<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>LSTM-C++版本实现</title>
      <link href="/2020/05/03/20200503-094544/"/>
      <url>/2020/05/03/20200503-094544/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>嵌入式系统与应用的课程设计是用C\C++写一个简单的RNN网络，于是通过查找资料，终于完成了两个较为简单的c++实现版本</p><p>参考资料集合：</p><ol><li><p><a href="https://blog.csdn.net/dQCFKyQDXYm3F8rB0/article/details/79017786" target="_blank" rel="noopener">C++从零实现神经网络（收藏版：两万字长文）</a></p><p>这篇文章详细的讲述了神经网络如何使用c++进行搭建</p><p>我没有全部写完，主要是因为时间的问题，只是完成了bp神经网络的前向和反向的搭建，从中学习到了不少的东西，C++没有矩阵运算库，遂搭建Opencv环境，使用Opencv的Mat类来进行矩阵操作，使用vector来做为矩阵容器</p><p>这篇文章有个错误的地方，就是sigmoid的导函数的实现是错误的！！因为导函数的输入矩阵已经是经过激化函数的了，所以在实现中没有必要再次sigmoid</p></li><li><p><a href="https://wohugb.github.io/chatbot/33.lstm-rnn/" target="_blank" rel="noopener">LSTM-RNN—有记忆的神经网络</a></p><p>这篇文章对本人的帮助极大！</p><p>我就是使用这篇文章的两个numpy程序来进行C++的复现。</p><p>这个复现过程是十分痛苦的！鬼知道我经过了多少时间进行调整参数</p><p>初步编写完C++代码后，然后通过使用vs2013和pycharm两个IDE进行逐行比对，一些随机生成的矩阵先进行固化，达到程序和数据的完全一致，在将C++版本的程序中的矩阵随机化，但是很有可能效果不是特别好！</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200505111625.png" alt=""></p></li></ol><p>下面将一些复现过程中的问题记录下来！</p><p>有的可能记不住了，毕竟是在程序完结后记录的！</p><h3 id="C-相关问题"><a href="#C-相关问题" class="headerlink" title="C++相关问题"></a>C++相关问题</h3><h4 id="C-的快速注释"><a href="#C-的快速注释" class="headerlink" title="C++的快速注释"></a>C++的快速注释</h4><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">// 注释</span><span class="token macro property">#<span class="token directive keyword">if</span> 0</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token comment" spellcheck="true">//取消注释</span><span class="token macro property">#<span class="token directive keyword">if</span> 1</span><span class="token macro property">#<span class="token directive keyword">endif</span></span></code></pre><h4 id="C-的随机初始化"><a href="#C-的随机初始化" class="headerlink" title="C++的随机初始化"></a>C++的随机初始化</h4><p>在 C++ 程序中，在新标准出现之前，C 和 C++ 都依赖一个简单的 C 库函数 <code>rand</code> 来生成随机数，但是，这个函数生成的是均匀分布的伪随机数，每个随机数的范围在 0 和一个系统相关的最大值（至少为 32767）之间。 </p><p><code>rand</code> 函数有一些问题：即使不是大多数，也有很多程序需要不通范围的随机数。一些应用需要随机浮点数。一些程序需要非均匀分布的随机数。而在编写程序为了解决这些通常会转换 <code>rand</code> 生成的随机数的范围、类型或者是分布时，常常会引入非随机性。 </p><p> 在 C++ 11 标准中，定义在头文件 <code>random</code> 中的随机数库通过一组协作的类来解决这些问题，主要用到的是两个类： </p><ul><li>随机数引擎类（random-number engines）</li><li>随机数分布类（random-number distribution)</li></ul><p>其中，一个引擎类可以生成 <code>unsigned</code> 随机数列，一个分布使用一个引擎类生成指定类型的，在给定范围内的，服从指定概率分布的随机数。 </p><pre class=" language-c"><code class="language-c">default_random_engine <span class="token function">e1</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 稍微随机些的种子</span><span class="token comment" spellcheck="true">//由于 time 返回以秒计的时间，因此这种方式只适用于生成种子的间隔为秒级或更长的应用。</span><span class="token comment" spellcheck="true">//生成 0 到 9 之间（包含）均匀分布的随机数</span>uniform_int_distribution<span class="token operator">&lt;</span><span class="token keyword">unsigned</span><span class="token operator">></span> <span class="token function">u</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 将 u 作为随机数源</span>    <span class="token comment" spellcheck="true">// 每个调用返回在指定范围内并服从均匀分布的值</span>    cout<span class="token operator">&lt;&lt;</span><span class="token function">u</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></code></pre><p>更详细的设置可百度查询！</p><p>生成指定数值范围内的矩阵：</p><pre class=" language-c"><code class="language-c">cv<span class="token punctuation">:</span><span class="token punctuation">:</span>Mat <span class="token function">rand_arr</span><span class="token punctuation">(</span><span class="token keyword">float</span> low<span class="token punctuation">,</span> <span class="token keyword">float</span> high<span class="token punctuation">,</span> <span class="token keyword">int</span> s_w<span class="token punctuation">,</span> <span class="token keyword">int</span> s_h<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// initialization rand engine and set seed</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>default_random_engine <span class="token function">e</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Specified random distribution </span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>uniform_real_distribution<span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span> <span class="token function">u</span><span class="token punctuation">(</span>low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// initial matrix </span>    cv<span class="token punctuation">:</span><span class="token punctuation">:</span>Mat res <span class="token operator">=</span> cv<span class="token punctuation">:</span><span class="token punctuation">:</span>Mat<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">zeros</span><span class="token punctuation">(</span>s_w<span class="token punctuation">,</span> s_h<span class="token punctuation">,</span> CV_32F<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> res<span class="token punctuation">.</span>rows<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> res<span class="token punctuation">.</span>cols<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            res<span class="token punctuation">.</span>at<span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">u</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="Mat的相关矩阵运算"><a href="#Mat的相关矩阵运算" class="headerlink" title="Mat的相关矩阵运算"></a>Mat的相关矩阵运算</h4><p><code>*</code>：是真正的乘法</p><p><code>dot</code>:点乘</p><p><code>size(cols,rows)</code> 与正常认知相反</p><h4 id="c-的vector基本操作"><a href="#c-的vector基本操作" class="headerlink" title="c++的vector基本操作"></a>c++的vector基本操作</h4><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>obj<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建一个向量存储容器 int</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// push_back(elem)在数组最后添加数据 </span>    <span class="token punctuation">{</span>        obj<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">","</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//去掉数组最后一个数据 </span>    <span class="token punctuation">{</span>        obj<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>obj<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//size()容器中实际数据个数 </span>    <span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span>obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">","</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,*/</span></code></pre><h3 id="numpy相关问题"><a href="#numpy相关问题" class="headerlink" title="numpy相关问题"></a>numpy相关问题</h3><h4 id="numpy的各种乘法"><a href="#numpy的各种乘法" class="headerlink" title="numpy的各种乘法"></a>numpy的各种乘法</h4><p><code>np.dot</code>: 维度&gt;= 2维，真正的矩阵乘法，一维向量的内积</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token number">12</span><span class="token operator">>></span><span class="token operator">></span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token number">20</span><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p><code>np.outer</code>:计算外积</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200505114557.png" alt=""></p><p><code>np.multiply()</code>:对应元素的乘机</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> np<span class="token punctuation">.</span>multiply<span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">4.0</span><span class="token punctuation">)</span><span class="token number">8.0</span><span class="token operator">>></span><span class="token operator">></span> x1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> x2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> np<span class="token punctuation">.</span>multiply<span class="token punctuation">(</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p><code>*</code>:类型为数组是：为对应元素相乘；类型为矩阵时，表示矩阵相乘</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x1 <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">9.0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> x2 <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">3.0</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> x1 <span class="token operator">*</span> x2array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span>  <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span>   <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span>   <span class="token number">4</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span>  <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span>   <span class="token number">4</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">10</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span>  <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span>   <span class="token number">7</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">16</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> x1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> x2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> np<span class="token punctuation">.</span>mat<span class="token punctuation">(</span>x1<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> np<span class="token punctuation">.</span>mat<span class="token punctuation">(</span>x2<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token operator">*</span>bmatrix<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>知网的免费入口</title>
      <link href="/2020/05/01/20200501-110000/"/>
      <url>/2020/05/01/20200501-110000/</url>
      
        <content type="html"><![CDATA[<h2 id="知网免费入口"><a href="#知网免费入口" class="headerlink" title="知网免费入口"></a>知网免费入口</h2><p>在做相关论文综述的时候，使用学校的VPN登录不上去，在网上搜索了下！</p><p><a href="http://blog.sciencenet.cn/blog-3410554-1170306.html" target="_blank" rel="noopener">参考资料</a></p><h3 id="1-广西壮族自治区图书馆"><a href="#1-广西壮族自治区图书馆" class="headerlink" title="1.广西壮族自治区图书馆"></a>1.广西壮族自治区图书馆</h3><p><a href="http://wap.gxlib.org.cn:9080/ermsLogin/view.do" target="_blank" rel="noopener">http://wap.gxlib.org.cn:9080/ermsLogin/view.do</a></p><h4 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h4><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200501104920.png" alt=""></p><h4 id="2-详细使用步骤"><a href="#2-详细使用步骤" class="headerlink" title="2. 详细使用步骤"></a>2. 详细使用步骤</h4><ol><li><p>进入网址</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200505100941.png" alt=""></p></li><li><p>注册账号</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200505105516.png" alt=""></p></li><li><p>有超多的相关的数据库入库</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200505103023.png" alt=""></p></li><li><p>进入知网</p><p>在搜索栏搜索 <strong>清华同方</strong></p><p>点击<strong>包库入口</strong></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200505103112.png" alt=""></p></li><li><p>确定登录成功</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200505103200.png" alt=""></p></li><li><p>寻找相关资料</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200505103521.png" alt=""></p></li><li><p>进入下载</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200505103554.png" alt=""></p></li><li><p>使用IP进行登录</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200505103629.png" alt=""></p></li><li><p>再次点击下载，输入验证</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200505103715.png" alt=""></p></li><li><p>出现的问题：</p><p>可以再次尝试下载，一般第二次就可以成功</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200505103748.png" alt=""></p></li><li><p>成果展示</p></li></ol><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200505103853.png" alt=""></p><h3 id="2-全国图书馆参考咨询联盟"><a href="#2-全国图书馆参考咨询联盟" class="headerlink" title="2.全国图书馆参考咨询联盟"></a><strong>2.全国图书馆参考咨询联盟</strong></h3><p><a href="http://www.ucdrs.superlib.net" target="_blank" rel="noopener">http://www.ucdrs.superlib.net</a></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200501105016.png" alt=""></p><h3 id="3-文献搜索网站iData"><a href="#3-文献搜索网站iData" class="headerlink" title="3.文献搜索网站iData"></a>3.文献搜索网站<strong>iData</strong></h3><p>再给大家推荐一个文献搜索网站<strong>iData</strong>，iData为大家提供<strong>中国知网和谷歌学术的镜像搜索</strong>，感兴趣的童鞋可以体验一下：</p><p><a href="https://www.cn-ki.net/" target="_blank" rel="noopener">https://www.cn-ki.net</a> </p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200505104116.png" alt=""> </p>]]></content>
      
      
      <categories>
          
          <category> website </category>
          
      </categories>
      
      
        <tags>
            
            <tag> website </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01-JavaSE练习题-线程</title>
      <link href="/2020/04/29/2020429-082107/"/>
      <url>/2020/04/29/2020429-082107/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200429082248.png" alt=""></p><h2 id="Java练习题-线程"><a href="#Java练习题-线程" class="headerlink" title="Java练习题-线程"></a>Java练习题-线程</h2><h3 id="1-Terminal-实现文件复制操作"><a href="#1-Terminal-实现文件复制操作" class="headerlink" title="1. Terminal 实现文件复制操作"></a>1. Terminal 实现文件复制操作</h3><blockquote><p>类似于Linux 下的 <code>cp sources destination</code></p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>homewyk<span class="token punctuation">.</span>thread<span class="token punctuation">.</span>practice1<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Q： 问题描述： *         类似于： Linux系统下的 cp source destination *         实现文件复制 * @author asdw1 * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**           * 判断输入参数         */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//System.out.println(args.length);</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Usage: xxx.exe source destination"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token function">cp</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * D：实现复制操作     * @param source     * @param destination     * @throws IOException     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">cp</span><span class="token punctuation">(</span>String source<span class="token punctuation">,</span> String destination<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * D:判断参数         *     1. 是否存在         *  2. 是否是文件         */</span>        File sourceFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>sourceFile<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"File Not Find!!\n Please Check FileName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>sourceFile<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"FileName is not File...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        File destinationFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>destination<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>destinationFile<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            destinationFile<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        BufferedReader br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>sourceFile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BufferedWriter bw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>destinationFile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String str <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>str <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            bw<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bw <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            bw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>br <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------Copy finish--------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="相关问题："><a href="#相关问题：" class="headerlink" title="相关问题："></a>相关问题：</h4><ol><li><p>Terminal的输入参数问题：</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200429091253.png" alt=""></p></li><li><p>Java 错误：找不到或无法加载主类（源文件中含有包名 package）:</p><p>编译（javac）和执行（java）java 程序时，出现这种类型的错误：找不到或无法加载主类：</p><ul><li>首先排除是否是环境变量配置不当造成的问题，只要保证，命令行界面能够识别 javac/java 命令，就说明环境变量配置没有问题。</li><li>出现这种问题，往往是因为，java 源文件中带有包名，如文件 C:\code\Hello.java：</li></ul><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200429091738.png" alt=""></p><hr><p>解决方法：</p><ul><li><p><del>源文件中删除包名(不提倡)</del></p></li><li><p>使用package结构进行编译和运行：</p><pre class=" language-bash"><code class="language-bash">E:\JAVASE_Practices\src<span class="token operator">></span>javac -encoding utf-8 ./com\homewyk\thread\practice1\Demo1.javaE:\JAVASE_Practices\src<span class="token operator">></span>java  com.homewyk.thread.practice1.Demo1 <span class="token punctuation">..</span>/src.txt <span class="token punctuation">..</span>/dest</code></pre></li></ul></li></ol><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200429092120.png" alt=""></p><h3 id="2-Terminal-实现文件夹的复制操作"><a href="#2-Terminal-实现文件夹的复制操作" class="headerlink" title="2. Terminal 实现文件夹的复制操作"></a>2. Terminal 实现文件夹的复制操作</h3><blockquote><p>类似于Linux下的 <code>cp -r sourceFile destinatonFile</code></p><p>其实可以和上面的功能合二为一的</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>homewyk<span class="token punctuation">.</span>thread<span class="token punctuation">.</span>practice2<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Usage: java xxx -r sourceDirecttory destinationDirecttory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">cpDir</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * D: 参数1： 源文件 其中包含文件夹&amp;问价     *         处理思路：     *             1 当碰到文件夹时，destination也需要创建文件夹，还要进行迭代操作     *             2.当碰到文件时，直接生成      *             3. 函数的参数最好为File类型，比较好弄！！进行第二步的时候直接传入就好了！     * @param sourceFile     * @param destinationFile     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">cpDir</span><span class="token punctuation">(</span>File sourceFile<span class="token punctuation">,</span> File destinationFile<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sourceFile<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>destinationFile<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                destinationFile<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sourceFile<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                String<span class="token punctuation">[</span><span class="token punctuation">]</span> list <span class="token operator">=</span> sourceFile<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>String string <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    File serFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>sourceFile<span class="token punctuation">,</span> string<span class="token punctuation">)</span><span class="token punctuation">;</span>                    File destFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>destinationFile<span class="token punctuation">,</span> string<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">cpDir</span><span class="token punctuation">(</span>serFile<span class="token punctuation">,</span> destFile<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token function">cpFile</span><span class="token punctuation">(</span>sourceFile<span class="token punctuation">,</span> destinationFile<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">cpFile</span><span class="token punctuation">(</span>File source<span class="token punctuation">,</span> File destination<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        BufferedReader br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BufferedWriter bw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>destination<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String str <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>str <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            bw<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bw <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            bw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>br <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//System.out.println("-----------Copy finish--------");</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-查找文件内容"><a href="#3-查找文件内容" class="headerlink" title="3. 查找文件内容"></a>3. 查找文件内容</h3><blockquote><p>在第二问的基础上，添加文件内容的查找</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>homewyk<span class="token punctuation">.</span>thread<span class="token punctuation">.</span>practice3<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*** * D：当文件内部包含指定的字符串时，才复制相应的文件 * @author asdw1 * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Usage: java xxx find -r soucres destination findString"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        File sourceFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        File destinationFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token function">cpDir</span><span class="token punctuation">(</span>sourceFile<span class="token punctuation">,</span> destinationFile<span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * D： 遍历整个文件夹     * @param sourceFile     * @param destinationFile     * @param str     * @throws IOException     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">cpDir</span><span class="token punctuation">(</span>File sourceFile<span class="token punctuation">,</span>File destinationFile<span class="token punctuation">,</span> String str<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sourceFile<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>destinationFile<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                destinationFile<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span> list <span class="token operator">=</span> sourceFile<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>String string <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>                File srcFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>sourceFile<span class="token punctuation">,</span> string<span class="token punctuation">)</span><span class="token punctuation">;</span>                File destFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>destinationFile<span class="token punctuation">,</span> string<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">cpDir</span><span class="token punctuation">(</span>srcFile<span class="token punctuation">,</span> destFile<span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">cpFile</span><span class="token punctuation">(</span>sourceFile<span class="token punctuation">,</span> destinationFile<span class="token punctuation">,</span> <span class="token function">find</span><span class="token punctuation">(</span>sourceFile<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * D：判断文件中是否有指定的字符串，并且返回一个标志     * @param sourceFile     * @param str     * @return     * @throws IOException     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">find</span><span class="token punctuation">(</span>File sourceFile<span class="token punctuation">,</span> String str<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        BufferedReader br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>sourceFile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String string <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>string <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>br <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * D： 进行文件复制操作     * @param sourceFile     * @param destFile     * @param flag     * @throws IOException     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">cpFile</span><span class="token punctuation">(</span>File sourceFile<span class="token punctuation">,</span> File destFile<span class="token punctuation">,</span> <span class="token keyword">boolean</span> flag<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>            BufferedReader br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>sourceFile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            BufferedWriter bw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>destFile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String string <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>string <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>                bw<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                bw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>bw <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                bw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>br <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用方法：</p><pre class=" language-java"><code class="language-java">find <span class="token operator">-</span>r E<span class="token operator">:</span>\GithubWareHouse\Java_Learning\Java_Practices_194_How2J\JAVASE_Practices\aaa E<span class="token operator">:</span>\GithubWareHouse\Java_Learning\Java_Practices_194_How2J\JAVASE_Practices\a <span class="token string">"as"</span></code></pre><h3 id="4-遍历文件夹并指定文件类型，进行查询复制"><a href="#4-遍历文件夹并指定文件类型，进行查询复制" class="headerlink" title="4. 遍历文件夹并指定文件类型，进行查询复制"></a>4. 遍历文件夹并指定文件类型，进行查询复制</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>homewyk<span class="token punctuation">.</span>thread<span class="token punctuation">.</span>practice3<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*** * D：当文件内部包含指定的字符串时，才复制相应的文件 *         添加功能：需要指定文件类型 * @author asdw1 * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Usage: java xxx find -r soucres destination findString"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        File sourceFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        File destinationFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token function">cpDir</span><span class="token punctuation">(</span>sourceFile<span class="token punctuation">,</span> destinationFile<span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * D： 遍历整个文件夹     * @param sourceFile     * @param destinationFile     * @param str     * @throws IOException     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">cpDir</span><span class="token punctuation">(</span>File sourceFile<span class="token punctuation">,</span>File destinationFile<span class="token punctuation">,</span> String str<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sourceFile<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>destinationFile<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                destinationFile<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">/**             * 得到特定文件类型的文件名称             *     一般当文件夹下面还有文件夹是，一般不用过滤文件夹的名字             */</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span> list <span class="token operator">=</span> sourceFile<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">suffix</span><span class="token punctuation">(</span><span class="token string">".java"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>String string <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>                File srcFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>sourceFile<span class="token punctuation">,</span> string<span class="token punctuation">)</span><span class="token punctuation">;</span>                File destFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>destinationFile<span class="token punctuation">,</span> string<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">cpDir</span><span class="token punctuation">(</span>srcFile<span class="token punctuation">,</span> destFile<span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">cpFile</span><span class="token punctuation">(</span>sourceFile<span class="token punctuation">,</span> destinationFile<span class="token punctuation">,</span> <span class="token function">find</span><span class="token punctuation">(</span>sourceFile<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * D：判断文件中是否有指定的字符串，并且返回一个标志     * @param sourceFile     * @param str     * @return     * @throws IOException     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">find</span><span class="token punctuation">(</span>File sourceFile<span class="token punctuation">,</span> String str<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        BufferedReader br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>sourceFile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String string <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>string <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>br <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * D： 进行文件复制操作     * @param sourceFile     * @param destFile     * @param flag     * @throws IOException     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">cpFile</span><span class="token punctuation">(</span>File sourceFile<span class="token punctuation">,</span> File destFile<span class="token punctuation">,</span> <span class="token keyword">boolean</span> flag<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>            BufferedReader br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>sourceFile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            BufferedWriter bw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>destFile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String string <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>string <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>                bw<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                bw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>bw <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                bw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>br <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * D：文件类型过滤 * @author asdw1 * */</span><span class="token keyword">class</span> <span class="token class-name">suffix</span> <span class="token keyword">implements</span> <span class="token class-name">FilenameFilter</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String suffix<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">suffix</span><span class="token punctuation">(</span>String suffix<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>suffix <span class="token operator">=</span> suffix<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">accept</span><span class="token punctuation">(</span>File dir<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//如果是文件的话，直接判断文件类型</span>        <span class="token comment" spellcheck="true">// 如果是文件夹的话，直接通过</span>        <span class="token comment" spellcheck="true">// 如果是别的文件类型不通过</span>        File srcFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>srcFile<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//System.out.println("d:"+name);</span>            <span class="token keyword">return</span> name<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span>suffix<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>srcFile<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//System.out.println("D:"+name);</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用方法：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">find</span> -r E:\GithubWareHouse\Java_Learning\Java_Practices_194_How2J\JAVASE_Practices\aaa E:\GithubWareHouse\Java_Learning\Java_Practices_194_How2J\JAVASE_Practices\a <span class="token string">"as"</span></code></pre><h3 id="5-线程同步查找文件"><a href="#5-线程同步查找文件" class="headerlink" title="5. 线程同步查找文件"></a>5. 线程同步查找文件</h3><blockquote><p>遍历所有文件，当遍历到文件是.java的时候，创建一个线程去查找这个文件的内容，不必等待这个线程结束，继续遍历下一个文件 </p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>homewyk<span class="token punctuation">.</span>thread<span class="token punctuation">.</span>practice4<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * D: 实现线程同步查找特定文件类型中的内容，并输出绝对路径 * @author asdw1 * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Usage: java xxx find -r soucres findString"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        File sourceFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">listDir</span><span class="token punctuation">(</span>sourceFile<span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">listDir</span><span class="token punctuation">(</span>File srcFile<span class="token punctuation">,</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>srcFile<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span> list <span class="token operator">=</span> srcFile<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MySuffix</span><span class="token punctuation">(</span><span class="token string">".java"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>String string <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>                File sourceFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>srcFile<span class="token punctuation">,</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">listDir</span><span class="token punctuation">(</span>sourceFile<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span>srcFile<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> File srcFile <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">private</span> String str <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MyThread</span><span class="token punctuation">(</span>File srcFile<span class="token punctuation">,</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>srcFile <span class="token operator">=</span> srcFile<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>str <span class="token operator">=</span> str<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread-name: "</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BufferedReader br <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>srcFile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        String string <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>string <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>srcFile<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>br <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * D:实现文件类型过滤  *       文件夹直接通过 * @author asdw1 * */</span><span class="token keyword">class</span> <span class="token class-name">MySuffix</span> <span class="token keyword">implements</span> <span class="token class-name">FilenameFilter</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String suffix <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MySuffix</span><span class="token punctuation">(</span>String suffix<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>suffix <span class="token operator">=</span> suffix<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">accept</span><span class="token punctuation">(</span>File dir<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> name<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span>suffix<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用方法：</p><pre class=" language-java"><code class="language-java">find <span class="token operator">-</span>r E<span class="token operator">:</span>\GithubWareHouse\Java_Learning\Java_Practices_194_How2J\JAVASE_Practices\aaa  <span class="token string">"as"</span></code></pre><h3 id="6-顺序线程的实现"><a href="#6-顺序线程的实现" class="headerlink" title="6. 顺序线程的实现"></a>6. 顺序线程的实现</h3><blockquote><p>英雄有可以放一个技能叫做: 波动拳-a du gen。 </p><p>每隔一秒钟，可以发一次，但是只能连续发3次。  </p><p>发完3次之后，需要充能5秒钟，充满，再继续发。 </p></blockquote><p>新建对象，使用此对象做为同步锁</p><p>使用匿名类，可以访问次外部变量。</p><p>使用了2个线程和一个标志位，标志位用来切换线程</p><p>也就是说，这两个线程的主要逻辑有了顺序！！</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>homewyk<span class="token punctuation">.</span>thread<span class="token punctuation">.</span>practice5<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*** * 英雄有可以放一个技能叫做: 波动拳-a du gen。 *    每隔一秒钟，可以发一次，但是只能连续发3次。 *     *    发完3次之后，需要充能5秒钟，充满，再继续发。 * 这里使用匿名类最好的！ * @author asdw1 * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Hero hero <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token string">"ddd"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>hero<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Name:"</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>hero<span class="token punctuation">.</span><span class="token function">isFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> hero<span class="token punctuation">.</span>MAXSIZE<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"释放技能："</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"次"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">try</span> <span class="token punctuation">{</span>                                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span>                            <span class="token punctuation">}</span>                            <span class="token comment" spellcheck="true">//技能释放完毕</span>                            hero<span class="token punctuation">.</span><span class="token function">setFlag</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            hero<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//等待冲能结束</span>                            <span class="token keyword">try</span> <span class="token punctuation">{</span>                                hero<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>hero<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Name:"</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hero<span class="token punctuation">.</span><span class="token function">isFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"技能冲能："</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"次"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">try</span> <span class="token punctuation">{</span>                                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span>                            <span class="token punctuation">}</span>                            <span class="token comment" spellcheck="true">//技能冲能完毕</span>                            hero<span class="token punctuation">.</span><span class="token function">setFlag</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            hero<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//等待技能释放结束</span>                            <span class="token keyword">try</span> <span class="token punctuation">{</span>                                hero<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Hero</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String skill <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> MAXSIZE <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Hero</span><span class="token punctuation">(</span>String skill<span class="token punctuation">,</span> <span class="token keyword">int</span> counter<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>skill <span class="token operator">=</span> skill<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>counter <span class="token operator">=</span> counter<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getSkill</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> skill<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSkill</span><span class="token punctuation">(</span>String skill<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>skill <span class="token operator">=</span> skill<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> counter<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCounter</span><span class="token punctuation">(</span><span class="token keyword">int</span> counter<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>counter <span class="token operator">=</span> counter<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> flag<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setFlag</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>flag <span class="token operator">=</span> flag<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Hero [skill="</span> <span class="token operator">+</span> skill <span class="token operator">+</span> <span class="token string">", counter="</span> <span class="token operator">+</span> counter <span class="token operator">+</span> <span class="token string">", MAXSIZE="</span> <span class="token operator">+</span> MAXSIZE <span class="token operator">+</span> <span class="token string">", flag="</span> <span class="token operator">+</span> flag <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaSE-Practices </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> practices </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QT5资料</title>
      <link href="/2020/04/27/20200427-113345/"/>
      <url>/2020/04/27/20200427-113345/</url>
      
        <content type="html"><![CDATA[<h2 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h2><p>传智播客的相关视频</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>15-数据结构Java版-递归</title>
      <link href="/2020/04/27/20200427-090027/"/>
      <url>/2020/04/27/20200427-090027/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/homewyk/cloudimg/raw/master/images.jpg" alt=""></p><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><h3 id="递归的简单举例"><a href="#递归的简单举例" class="headerlink" title="递归的简单举例"></a>递归的简单举例</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>homewyk<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>recursive<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">test</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">test1</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//n = 2</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">test</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"n="</span> <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//n = 2</span>    <span class="token comment" spellcheck="true">//n = 3</span>    <span class="token comment" spellcheck="true">//n = 4</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">test1</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"n="</span> <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 4x3x2x1</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> n<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200430094120.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200430095221.png" alt=""></p><h3 id="recursive-能解决的问题"><a href="#recursive-能解决的问题" class="headerlink" title="recursive 能解决的问题"></a>recursive 能解决的问题</h3><ol><li>各种数学问题： 8皇后问题 汉诺塔 阶乘问题 迷宫问题 </li><li>各种算法：快排 归并排序 二分查找 分治算法</li><li>用栈解决的问题，使用递归非常简洁</li></ol><h3 id="递归需要遵守的规定"><a href="#递归需要遵守的规定" class="headerlink" title="递归需要遵守的规定"></a>递归需要遵守的规定</h3><ol><li><p>执行一个方法就创建一个新的受保护的独立空间（栈空间）</p></li><li><p>方法的局部变量是独立的</p></li><li><p>方法中使用的是引用变量，就会共享该变量</p></li><li><p>递归必须向退出递归的条件进行逼近，否则就是无限循环，出现<code>StackoverflowError</code></p></li><li><p>当一个方法执行完毕后，或者遇到<code>return</code>时，就会返回，遵守的会调用，就将结果返回给谁</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200430095256.png" alt=""></p><p>上图只是单纯的演示递归对于引用数据类型所造成的的影响。</p></li></ol><h3 id="递归解决迷宫问题"><a href="#递归解决迷宫问题" class="headerlink" title="递归解决迷宫问题"></a>递归解决迷宫问题</h3><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200430105119.png" alt=""></p><p>说明: </p><p>1)小球得到的路径，和程序员设置的找路策略有关即：找路的上下左右的顺序相关</p><p>2)再得到小球路径时，可以先使用(下右上左)，再改成(上右下左)，看看路径是不是有变化</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>homewyk<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>recursive<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * D：走迷宫 *         0：表示未走过 *         1： 表示墙壁 *         2：表示正确的路径 *         3：表示走过未走通 * @author asdw1 * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Mase</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> mase <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 左右</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> items <span class="token operator">:</span> mase<span class="token punctuation">)</span> <span class="token punctuation">{</span>            items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            items<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 上下</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> mase<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            mase<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            mase<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        mase<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        mase<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">show</span><span class="token punctuation">(</span>mase<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setWay</span><span class="token punctuation">(</span>mase<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">show</span><span class="token punctuation">(</span>mase<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> mase<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> mase<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> mase<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>mase<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/***     * D：i,j表示寻找路径的起点     * @param mase     * @param i     * @param j     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">setWay</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> mase<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 到达目的地</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mase<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">// 未走过路径，设置为已经走过</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mase<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                mase<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">setWay</span><span class="token punctuation">(</span>mase<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 下</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">setWay</span><span class="token punctuation">(</span>mase<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 右</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">setWay</span><span class="token punctuation">(</span>mase<span class="token punctuation">,</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 上</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">setWay</span><span class="token punctuation">(</span>mase<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 左</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 走过了，未走通，设置为3</span>                    mase<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//1,2,3</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vim常见编辑技巧</title>
      <link href="/2020/04/24/20200424-111023/"/>
      <url>/2020/04/24/20200424-111023/</url>
      
        <content type="html"><![CDATA[<h2 id="vim的常用编辑技巧"><a href="#vim的常用编辑技巧" class="headerlink" title="vim的常用编辑技巧"></a>vim的常用编辑技巧</h2><h3 id="自动对齐"><a href="#自动对齐" class="headerlink" title="自动对齐"></a>自动对齐</h3><blockquote><p>适用于代码复制后，进行自动对齐</p></blockquote><p><strong>自动对齐：（gg=G）</strong></p><p>在命令模式下（即非“插入”等编辑模式），<strong>先输入gg</strong>，这时候光标会移动到第一行第一个字符</p><p><strong>然后按 “=” 号</strong>,这里不要按<code>shift</code></p><p>之后切换成<strong>大写，再按一下G</strong>，这时候光标会移到最后一行的第一个字符</p><p>这时候就可以看到代码被排得整整齐齐了！</p><p>未对齐前：</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200424110810.png" alt=""></p><p>使用对齐命令后：</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200424111137.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统下OpenCV(C++)开发环境搭建</title>
      <link href="/2020/04/24/20200424-100023/"/>
      <url>/2020/04/24/20200424-100023/</url>
      
        <content type="html"><![CDATA[<h2 id="Linux系统下OpenCV-C-开发环境搭建"><a href="#Linux系统下OpenCV-C-开发环境搭建" class="headerlink" title="Linux系统下OpenCV(C++)开发环境搭建"></a>Linux系统下OpenCV(C++)开发环境搭建</h2><p>为了满足实际生产或者脱机运行的需要，搭建Linux系统下的Opencv十分必要，熟悉Linux系统下opencv的开发后，可以在树莓派等平台上进行相应工程的开发。</p><h3 id="VMware-ubuntu"><a href="#VMware-ubuntu" class="headerlink" title="VMware+ubuntu"></a>VMware+ubuntu</h3><p>首先我们需要先搭建一个Linux的操作系统，Ubuntu(乌班图)是一个以桌面应用为主的开源GNU/Linux操作系统，如下图所示： </p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200424104758.png" alt=""></p><p>下载链接为<a href="https://ubuntu.com/download/desktop，版本为Ubantu" target="_blank" rel="noopener">https://ubuntu.com/download/desktop，版本为Ubantu</a> 16.04.2</p><p>在完成Ubantu系统的下载后，还需准备一个虚拟机，在虚拟机中完成Ubantu系统的安装，这里我们选择VMware软件作为虚拟机</p><p>具体VMware安装Ubuntu在此就不再赘述了，详情请看<a href="https://blog.csdn.net/shen_zhu/article/details/79521984，该博主详细介绍了VMwareworkstation安装Ubantu的流程" target="_blank" rel="noopener">https://blog.csdn.net/shen_zhu/article/details/79521984，该博主详细介绍了VMwareworkstation安装Ubantu的流程</a></p><p>VMwareworkstation的下载连接：<a href="https://www.nocmd.com/740.html。" target="_blank" rel="noopener">https://www.nocmd.com/740.html。</a><br>完成安装之后界面如下图所示：<br><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200424104720.png" alt=""></p><h3 id="OpenCV开发环境搭建"><a href="#OpenCV开发环境搭建" class="headerlink" title="OpenCV开发环境搭建"></a>OpenCV开发环境搭建</h3><p>Ubuntu在虚拟机中安装完成后，在Ubuntu中打开浏览器，进入opencv的<a href="https://opencv.org/" target="_blank" rel="noopener">官方网站opencv.org</a>，选择 ：</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200424101608.png" alt=""></p><p>在terminal上输入如下代码：(注：opencv官网给的三条代码中，第三个为可选项，如果安装失败不用在意) </p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200424101631.png" alt=""></p><p>如果提示 E: 无法定位软件包 xxxxx</p><p>终端输入:</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> add-apt-repository <span class="token string">"deb http://security.ubuntu.com/ubuntu xenial-security main"</span></code></pre><p>再重新执行一次错误代码，即可安装成功</p><p>完成上述操作后，需要下载opencv的源码，在此，安装的opencv版本为opencv_3.4.1,</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200424101903.png" alt=""></p><p>等待一段下载时间，完成后解压文件，在terminal中进入该目录，  </p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200424101926.png" alt=""></p><p>在opencv文件夹下，建立一个build文件夹 即输入：mkdir build ,</p><p>成功创建后，在opencv目录下应该会存在一个建立的build文件夹； </p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200424101957.png" alt=""></p><p>跳转到该目录下 cd build</p><p>配置,运行cmake[&lt;一些可选参数&gt;]&lt;路径到OpenCV源目录 :</p><p>输入：<code>cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local ..</code>或者从opencv官网复制： </p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200424102014.png" alt=""></p><p>如果执行<code>cmake</code>时候出现如下错误信息 :</p><pre class=" language-bash"><code class="language-bash">CMake Error at CMakeLists.txt:11 <span class="token punctuation">(</span>message<span class="token punctuation">)</span>:  FATAL: In-source builds are not allowed.         You should create separate directory <span class="token keyword">for</span> build files.-- Configuring incomplete, errors occurred<span class="token operator">!</span></code></pre><p>则应该是在代码根目录下直接执行过<code>cmake</code>，导致根目录下生成了<code>CMakeCache.txt</code>，需要删除<code>CMakeCache.txt</code>再次执行编译即可。 </p><p>构建。从build目录execute make中，建议在几个线程中执行此操作  :</p><p>完成后输入<code>make</code>：第一次的时候过程比较漫长，慢慢等待！</p><p>第一次编译界面：</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200424104640.png" alt=""></p><p>第二次编译界面：</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200424102346.png" alt=""></p><p>要安装库，请在build目录中执行以下命令 ：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span></code></pre><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200424105812.png" alt=""></p><p>至此已经完成了<code>ubantu</code>下<code>opencv</code>的配置</p><p>接下来检验一下是否配置成功，在该目录下输入： <code>pkg-config --cflags --libs opencv</code>,出现下面信息： </p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200424105929.png" alt=""></p><h3 id="运行一个Demo，打开图片"><a href="#运行一个Demo，打开图片" class="headerlink" title="运行一个Demo，打开图片"></a>运行一个Demo，打开图片</h3><h4 id="CMake方法"><a href="#CMake方法" class="headerlink" title="CMake方法"></a><del>CMake方法</del></h4><blockquote><p>自己未使用过</p></blockquote><p>在完成开发环境搭建之后，在Linux建立一个c++的opencv代码，首先建立一个demo文件夹，文件夹先要包含cpp和CMakeLists.txt文件 </p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200424103056.png" alt=""></p><p>在cpp文件中编辑c++代码 :</p><pre class=" language-c++"><code class="language-c++">#include <cv.h>#include <highgui.h>#include <opencv2/core/core.hpp> #include <opencv2/highgui/highgui.hpp>using namespace cv;int main( int argc, char** argv ){    Mat image;    image = imread( argv[1], 1 );    if( argc != 2 || !image.data )    {        printf( "No image data \n" );        return -1;    }    namedWindow( "Display Image", CV_WINDOW_AUTOSIZE );    imshow( "Display Image", image );    waitKey(0);    return 0;}</code></pre><p>在CMakeLists.txt中编辑如下信息： </p><pre class=" language-bash"><code class="language-bash">cmake_minimum_required<span class="token punctuation">(</span>VERSION 2.8<span class="token punctuation">)</span>project<span class="token punctuation">(</span> demo <span class="token punctuation">)</span>find_package<span class="token punctuation">(</span> OpenCV REQUIRED <span class="token punctuation">)</span>include_directories<span class="token punctuation">(</span> <span class="token variable">${OpenCV_INCLUDE_DIRS}</span> <span class="token punctuation">)</span>add_executable<span class="token punctuation">(</span> demo demo.cpp <span class="token punctuation">)</span>target_link_libraries<span class="token punctuation">(</span> demo <span class="token variable">${OpenCV_LIBS}</span> <span class="token punctuation">)</span></code></pre><p>完成编辑之后，<code>cmake.</code> ,<code>make</code> ，最后就可以执行了：如下图所示 :</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200424103256.png" alt=""></p><p>也可以不使用CMake，直接使用<code>g++</code></p><h4 id="g-编译方式"><a href="#g-编译方式" class="headerlink" title="g++编译方式"></a><code>g++</code>编译方式</h4><p>1、编写相应的源代码</p><pre class=" language-c++"><code class="language-c++">#include <cv.h>#include <highgui.h>#include <opencv2/core/core.hpp> #include <opencv2/highgui/highgui.hpp>using namespace cv;int main( int argc, char** argv ){    Mat image;    image = imread( argv[1], 1 );    if( argc != 2 || !image.data )    {        printf( "No image data \n" );        return -1;    }    namedWindow( "Display Image", CV_WINDOW_AUTOSIZE );    imshow( "Display Image", image );    waitKey(0);    return 0;}</code></pre><p>2、执行命令：</p><pre class=" language-bash"><code class="language-bash">g++ demo.cpp -o <span class="token function">test</span> <span class="token variable"><span class="token variable">`</span>pkg-config --cflags --libs opencv<span class="token variable">`</span></span></code></pre><p>注意上面有两个 <code>pkg-config --cflags --libs opencv</code> 点号 ，是键盘1左边的那个符号。</p><p>2、生成可执行文件 test  </p><p><strong>运行程序</strong> ：<code>./test test.jpg</code></p><p>如果OpenCV安装成功，可以显示出图片： </p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200424103717.png" alt=""></p><p>如果出现</p><pre class=" language-bash"><code class="language-bash">./test: error <span class="token keyword">while</span> loading shared libraries: libopencv_highgui.so.3.2: cannot <span class="token function">open</span> shared object file: No such <span class="token function">file</span> or directory </code></pre><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200424111453.png" alt=""></p><p>此错误，那是动态链接库的路径没有添加好，可按下面的方式添加：</p><p>1、用vim打开/etc/ld.so.conf，注意要用sudo打开获得权限，不然无法修改:</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> vim /etc/ld.so.conf</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># end line add</span>/usr/local/lib</code></pre><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200424111623.png" alt=""></p><p>2、运行：<br>    <code>sudo ldconfig</code></p><p>3、修改bash.bashrc文件：<br>   <code>sudo vim /etc/bash.bashrc</code></p><p>4、在文件末尾加入：</p><pre class=" language-bash"><code class="language-bash">PKG_CONFIG_PATH<span class="token operator">=</span><span class="token variable">$PKG_CONFIG_PATH</span>:/usr/local/lib/pkgconfig<span class="token function">export</span> PKG_CONFIG_PATH</code></pre><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200424111855.png" alt=""></p><p>5、最后执行：<br>    <code>source /etc/bash.bashrc</code></p><p>再重新执行上下可执行文件：</p><pre class=" language-bash"><code class="language-bash">./test test.jpg </code></pre><p>效果如下：</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200424111955.png" alt=""></p><p><a href="https://blog.csdn.net/weixin_43953829/article/details/96473891?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1&utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1" target="_blank" rel="noopener">参考资料：</a></p><p><a href="https://blog.csdn.net/li_wen01/article/details/71641408" target="_blank" rel="noopener">参考资料2</a></p>]]></content>
      
      
      <categories>
          
          <category> 软件安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件安装 </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习习总书记给北大援鄂医疗队回信精神</title>
      <link href="/2020/04/22/20200422-172916/"/>
      <url>/2020/04/22/20200422-172916/</url>
      
        <content type="html"><![CDATA[<h4 id="习近平回信勉励北京大学援鄂医疗队全体“90后”党员-让青春在党和人民最需要的地方绽放绚丽之花"><a href="#习近平回信勉励北京大学援鄂医疗队全体“90后”党员-让青春在党和人民最需要的地方绽放绚丽之花" class="headerlink" title="习近平回信勉励北京大学援鄂医疗队全体“90后”党员 让青春在党和人民最需要的地方绽放绚丽之花"></a>习近平回信勉励北京大学援鄂医疗队全体“90后”党员 让青春在党和人民最需要的地方绽放绚丽之花</h4><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200422173402.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/1125719112_15843396034021n.jpg" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp; 就今天的座谈会和此次座谈会的相关主题《<strong>学习习近平总书记给北京大学援鄂医疗队全体“90后”党员的回信</strong>》，我想谈一下我的拙见，仅一家之言，言辞若有不适，请多多担待。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 2020年伊始，我们就不断经受着着新冠病毒疫情的严峻考验。直到现在，已经3个多月了。这段时间以来，党和国家对战胜新冠病毒进行着不懈的努力，这些伟大的事迹对于中国人民乃至于世界来说，都深深的记在心中。即使问一个路边的小朋友，他也可以回答出来。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 在这次新冠肺炎疫情防控斗争中，共产党员发挥了十分重要的作用，充分体现了他们的榜样作用和艰苦奋斗的可贵品质。在此次防控斗争之中，我们青年一代也开始担负起自己的责任，于国家危难之际，开始贡献出自己的一份力量。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 对于90后来说，最年长的年龄已达30岁，即使是处于研究生阶段的我们来说，我们的年龄也处在24岁左右。对于个人来说，这是绚烂人生的起步阶段；对于国家来说，我们早已成为了新时代中国不可或缺的新生力量。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 我们这一代青年人同在一线英勇奋斗的广大疫情防控人员一道，不畏艰险、冲锋在前、舍生忘死，彰显了青春的蓬勃力量。在我看来，这不仅是一种责任精神，更是一种传承。我们这一代跟随着不断崛起的中国经历了许许多多的大事件，2003年的非典，60后、70后为我们成功抵御了病毒的入侵；2008年的金融风暴和汶川大地震，70后、80后开始为危难中的中国贡献自己的力量，担负起自己作为中国人的责任；而在2020年的今天，我们90后的青年一代，也将传承上一代青年人的精神，在疫情防控这个大阵地中不断的巩固防线，堵住防疫斗争中的缺口。你们守护了我们而我们将在以后守护你们。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 对于现阶段的我们，也就是咱们班来说，咱们经过研究生考试聚集在了一起，缘分让我们相遇在盛世之内。虽然考研究生的目的各不相同，作为青年一代的我们，我们现阶段要做的就是好好把握住时间的尾巴，努力学习知识，耐住寂寞搞研究、积淀自己的知识，在研究生毕业以后，找个适合自己的工作岗位，为国家的伟大复兴贡献出自己的一份力量。</p><p>一个国家的复兴需要我们来进行推进，只有千万个你我他汇集起来，才能实现中华民族的伟大复兴。</p>]]></content>
      
      
      <categories>
          
          <category> website </category>
          
      </categories>
      
      
        <tags>
            
            <tag> website </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>14-数据结构Java版-中缀转后缀表达式并实现计算</title>
      <link href="/2020/04/22/20200422-110027/"/>
      <url>/2020/04/22/20200422-110027/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/homewyk/cloudimg/raw/master/images.jpg" alt=""></p><h2 id="逆波兰计算器的实现"><a href="#逆波兰计算器的实现" class="headerlink" title="逆波兰计算器的实现"></a>逆波兰计算器的实现</h2><h3 id="后缀表达式求值"><a href="#后缀表达式求值" class="headerlink" title="后缀表达式求值"></a>后缀表达式求值</h3><blockquote><p>在本程序中 后缀表达式使用ArrayList来进行存储</p><p>思路：</p><ol><li>遍历ArrayList元素，遇到数字压栈，</li><li>遇到操作符，从栈中弹出两个操作数（第一个弹出的在操作符后面，第二个弹出的在操作符前面），进行计算，将结果重新入栈</li><li>循环2过程，直到元素遍历完成，最后栈中只剩下一个操作数</li><li>栈中的数字即为最后的表达式结果</li></ol></blockquote><p>字符串转整数：<code>Integer.parseInt()</code></p><p>整数转字符串：<code>num+&quot;&quot;</code>,进行数据类型的隐式转换</p><p>缀表达式也叫逆波兰表达式，其求值过程可以用到栈来辅助存储。假定待求值的后缀表达式为：<strong>6  5  2  3  + 8 * + 3  +  *，</strong>则其求值过程如下： </p><p>1）遍历表达式，遇到的数字首先放入栈中，此时栈如下所示 ：</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200423095813.png" alt=""></p><p>2）接着读到“+”，则弹出3和2，执行3+2，计算结果等于5，并将5压入到栈中 ：</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200423095826.png" alt=""></p><p>3）读到8，将其直接放入栈中：</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200423095844.png" alt=""></p><p>4）读到<code>*</code>，弹出8和5，执行8*5，并将结果40压入栈中。而后过程类似，读到“+”，将40和5弹出，将40+5的结果45压入栈…以此类推。最后求的值288。 </p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>homewyk<span class="token punctuation">.</span>stack<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Iterator<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Stack<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">suffixExpression</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"逆波兰计算器的简单实现"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String  suffixExpressionString <span class="token operator">=</span> <span class="token string">"1 2 3 + 4 x + 5 -"</span><span class="token punctuation">;</span>        SuffixCalculator calc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuffixCalculator</span><span class="token punctuation">(</span>suffixExpressionString<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>calc<span class="token punctuation">.</span><span class="token function">calc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 1. 直接计算后缀表达式 * 2. 字符串形式："1 2 3 + 4 x + 5 -" 中间使用空格进行分割 * @author asdw1 * */</span><span class="token keyword">class</span> <span class="token class-name">SuffixCalculator</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String suffixExpressionString<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> suffixListExpression <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     Stack<span class="token operator">&lt;</span>String<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">SuffixCalculator</span><span class="token punctuation">(</span>String suffixExpressionString<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>suffixExpressionString <span class="token operator">=</span> suffixExpressionString<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">StringConvertList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> expresses <span class="token operator">=</span> suffixExpressionString<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String string <span class="token operator">:</span> expresses<span class="token punctuation">)</span> <span class="token punctuation">{</span>            suffixListExpression<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">StringConvertList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>Iterator<span class="token operator">&lt;</span>String<span class="token operator">></span> it <span class="token operator">=</span> suffixListExpression<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String ch <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">///  如果是数字，入栈</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ch<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">48</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>ch<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">57</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 如果是操作符，则抛出2个数字，并且进行计算将结果入栈</span>                <span class="token keyword">int</span> num2 <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> num1 <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">switch</span> <span class="token punctuation">(</span>ch<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token string">'+'</span><span class="token operator">:</span>                    result <span class="token operator">=</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'-'</span><span class="token operator">:</span>                    result <span class="token operator">=</span> num1 <span class="token operator">-</span> num2<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'x'</span><span class="token operator">:</span>                    result <span class="token operator">=</span> num1 <span class="token operator">*</span> num2<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'/'</span><span class="token operator">:</span>                    result <span class="token operator">=</span> num1 <span class="token operator">/</span> num2<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token operator">:</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"无效操作符"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>result <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="中缀表达式转后缀表达式"><a href="#中缀表达式转后缀表达式" class="headerlink" title="中缀表达式转后缀表达式"></a>中缀表达式转后缀表达式</h3><p>中缀表达式$ a + b<em>c + (d </em> e + f) <em> g $，其转换成后缀表达式则为$ a b c </em> + d e <em> f  + g </em> + $。</p><p>转换过程需要用到栈，具体过程如下：</p><ol><li><p>初始化两个栈：运算符栈$S1$ 和 存储中间结果的栈$S2$</p></li><li><p>扫描顺序，从左到右</p></li><li><p>如果遇到多位字符串，直接入栈$S2​$</p><ol><li><p>遇到单字符，进行判断</p><ol><li><p>单字符为数字，直接入栈$S2$</p></li><li><p>单字符为操作符：</p><ol><li><p>如果$S1$为空,直接入栈$S1$</p></li><li><p>$S1$的栈顶为$($，直接入栈$S1$</p></li><li><p>如果$S1$非空且$S1$栈顶元素非$($，此时判断此时的运算符和栈顶运算符的优先级：</p><ol><li>此时操作符的优先级 &gt; 栈顶的优先级   =====》 直接入栈</li><li>否则此时操作符的优先级 &lt;= 栈顶的优先级   =====》 进行遍历操作<ol><li>判断操作栈$S1$不为空且此时操作符的优先级 &lt;= 栈顶的优先级 并且栈顶元素不为$($:</li><li>$S1$栈顶元素出栈，然后入栈到$S2$中</li><li>返回与此缩进相同的$1$</li></ol></li></ol></li><li><p>遇到$)$</p><ol><li><p>将$S1$中的运算符出栈到S2中，</p></li><li><p><code>while</code>的结束条件为栈顶元素为$)$</p></li><li><p>循环结束后且需要将$)$出栈</p><p><strong>在进行编程的时候，我将这一步提到了最前面！！</strong></p></li></ol></li></ol></li></ol></li></ol></li><li><p>重复步骤$3$，直到表达式的最后</p></li><li><p>将$S1$的剩余部分依次入栈到$S2$</p></li><li><p>依次弹出$S2$中的元素并且进行输出，结果的逆序即为中缀表达式所对应的后缀表达式。</p></li></ol><h4 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h4><p>第一部分：</p><p>将中缀表达式拆分出来，存储到ArrayList中</p><p>还是要注意多位数的处理为题</p><p>第二部分: 中缀表达式到后缀表达式的逻辑转换</p><h2 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h2><pre class=" language-java"><code class="language-java">ppackage com<span class="token punctuation">.</span>homewyk<span class="token punctuation">.</span>stack<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Iterator<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Stack<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">suffixExpression</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"逆波兰计算器的简单实现"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String  suffixExpressionString <span class="token operator">=</span> <span class="token string">"1 2 3 + 4 * + 5 -"</span><span class="token punctuation">;</span>        SuffixCalculator calc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuffixCalculator</span><span class="token punctuation">(</span>suffixExpressionString<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>calc<span class="token punctuation">.</span><span class="token function">calc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//String infixExpressionString = "1+((2+3)x4)-5";</span>        String infixExpressionString <span class="token operator">=</span> <span class="token string">"(1+2)/3 + (5*2)"</span><span class="token punctuation">;</span>        InfixConvertSufix ics <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InfixConvertSufix</span><span class="token punctuation">(</span>infixExpressionString<span class="token punctuation">)</span><span class="token punctuation">;</span>        ics<span class="token punctuation">.</span><span class="token function">StringConvertList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ics<span class="token punctuation">.</span><span class="token function">showInfixList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"中缀表达式转换为后缀表达式为： "</span> <span class="token operator">+</span> ics<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SuffixCalculator calc1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuffixCalculator</span><span class="token punctuation">(</span>ics<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"计算结果为："</span> <span class="token operator">+</span> calc1<span class="token punctuation">.</span><span class="token function">calc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 1. 实现中缀表达式转为后缀表达式 *     1.1 将中缀表达式存入ArrayList中 *         1.1.1 需要注意的多位数的处理问题 *  1.2 实现中缀表达式转为后缀表达式 * @author asdw1 * */</span><span class="token keyword">class</span> <span class="token class-name">InfixConvertSufix</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//接收表达式</span>    <span class="token keyword">private</span> String infixExpressionString<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//中缀表达式存储到list中，这里已经实现了多位数的处理</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> infixList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//表达式指针</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//控制循环</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> loop <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//中缀表达式多位数的组合</span>    StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//中转后的两个stack</span>    Stack<span class="token operator">&lt;</span>String<span class="token operator">></span> operStack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Stack<span class="token operator">&lt;</span>String<span class="token operator">></span> resultStack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">InfixConvertSufix</span><span class="token punctuation">(</span>String infixExpressionString<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>infixExpressionString <span class="token operator">=</span> infixExpressionString<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 1. 实现中缀表达式进行元素拆分并且存入arraylist中     * 2. 已经处理了多位数：     *     2.1 如果index到了最后，直接添加     *     2.2 判断index+1是否是数字，用来确定是否添加     *     2.3 注意在添加到ArrayList之后要删除下     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">StringConvertList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>loop<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//接收字符</span>            <span class="token keyword">char</span> ch <span class="token operator">=</span> infixExpressionString<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 字符如果是操作符 直接添加</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'+'</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'*'</span><span class="token punctuation">)</span><span class="token operator">||</span>                <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'x'</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">')'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                infixList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ch<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token number">48</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>ch <span class="token operator">&lt;=</span> <span class="token number">57</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//如果字符是数字，如果索引处于字符串最后，直接添加； 否则还要判断后一位的字符类型</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">==</span> infixExpressionString<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    infixList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    sb<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>infixExpressionString<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> index<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">48</span> <span class="token operator">||</span>                          infixExpressionString<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> index<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">57</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    infixList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    sb<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            index <span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">>=</span> infixExpressionString<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                loop <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 1. 显示分割好的中缀表达式     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showInfixList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String string <span class="token operator">:</span> infixList<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 1.中转后的详细逻辑     * @return     */</span>    <span class="token keyword">public</span> String <span class="token function">convert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String item <span class="token operator">:</span> infixList<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//如果item的长度 > 1,item一定是数字</span>            <span class="token comment" spellcheck="true">//这里是用于多位数的处理</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                resultStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">char</span> ch <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//如果是数字 直接入栈</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isOper</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    resultStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ch<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//如果是运算符</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isOper</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                     <span class="token comment" spellcheck="true">// 如果遇到)</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>operStack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">')'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">while</span><span class="token punctuation">(</span>operStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">'('</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            resultStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>operStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token comment" spellcheck="true">//pop (</span>                        operStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//如果操作栈为空</span>                    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>operStack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        operStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ch<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//S1的栈顶为( ，直接入栈</span>                    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        operStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ch<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>operStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                         operStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ch<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 如果S1不为空且S1的栈顶元素不为(， 进行操作符优先级的比较</span>                    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>operStack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>operStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">'('</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                         <span class="token comment" spellcheck="true">//如果操作符的优先级 > 栈顶的优先级 直接入栈</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">priority</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token function">priority</span><span class="token punctuation">(</span>operStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            operStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ch<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">//如果操作符的优先级 &lt;= 栈顶的优先级 且栈顶操作符不为(，操作符出栈</span>                            <span class="token comment" spellcheck="true">//当前的操作符入栈</span>                        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                             <span class="token comment" spellcheck="true">//！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！</span>                            <span class="token comment" spellcheck="true">//出现错误的地方</span>                            <span class="token comment" spellcheck="true">//修改了！ 必须要加这个判断！！(!operStack.isEmpty())</span>                            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span>operStack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>operStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">'('</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token function">priority</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token function">priority</span><span class="token punctuation">(</span>operStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                resultStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>operStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            operStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ch<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//循环完毕,将操作数依次出栈到结果栈中</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>operStack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            resultStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>operStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>resultStack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//后缀表达式约定是靠空格区分的</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>resultStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        sb<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 1. 判断是否是操作符     * @param ch     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isOper</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'+'</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>ch <span class="token operator">==</span><span class="token string">'*'</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">')'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">priority</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'+'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'*'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 1. 直接计算后缀表达式 * 2. 字符串形式："1 2 3 + 4 x + 5 -" 中间使用空格进行分割 * @author asdw1 * */</span><span class="token keyword">class</span> <span class="token class-name">SuffixCalculator</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String suffixExpressionString<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> suffixListExpression <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     Stack<span class="token operator">&lt;</span>String<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">SuffixCalculator</span><span class="token punctuation">(</span>String suffixExpressionString<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>suffixExpressionString <span class="token operator">=</span> suffixExpressionString<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     *  1.后缀表达式存放在ArrayList中     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">StringConvertList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> expresses <span class="token operator">=</span> suffixExpressionString<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String string <span class="token operator">:</span> expresses<span class="token punctuation">)</span> <span class="token punctuation">{</span>            suffixListExpression<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 1. 进行计算     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">StringConvertList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>Iterator<span class="token operator">&lt;</span>String<span class="token operator">></span> it <span class="token operator">=</span> suffixListExpression<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String ch <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">///  如果是数字，入栈</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ch<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">48</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>ch<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">57</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 如果是操作符，则抛出2个数字，并且进行计算将结果入栈</span>                <span class="token keyword">int</span> num2 <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> num1 <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">switch</span> <span class="token punctuation">(</span>ch<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token string">'+'</span><span class="token operator">:</span>                    result <span class="token operator">=</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'-'</span><span class="token operator">:</span>                    result <span class="token operator">=</span> num1 <span class="token operator">-</span> num2<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'*'</span><span class="token operator">:</span>                    result <span class="token operator">=</span> num1 <span class="token operator">*</span> num2<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'/'</span><span class="token operator">:</span>                    result <span class="token operator">=</span> num1 <span class="token operator">/</span> num2<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token operator">:</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"无效操作符"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>result <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>13-数据结构Java版-中缀表达式解决多位数和括号问题</title>
      <link href="/2020/04/21/20200421-100027/"/>
      <url>/2020/04/21/20200421-100027/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/homewyk/cloudimg/raw/master/images.jpg" alt=""></p><h3 id="解决中缀表达式的多位数输入和小括号问题"><a href="#解决中缀表达式的多位数输入和小括号问题" class="headerlink" title="解决中缀表达式的多位数输入和小括号问题"></a>解决中缀表达式的多位数输入和小括号问题</h3><h4 id="实现多位数输入"><a href="#实现多位数输入" class="headerlink" title="实现多位数输入"></a>实现多位数输入</h4><p>思路：</p><pre class=" language-java"><code class="language-java"><span class="token number">1.1</span> index的自加一直是最后的部分进行控制的 <span class="token operator">*</span>               <span class="token number">1.2</span> 这个多位数的判断部分就进行<span class="token number">2</span>个判断 <span class="token operator">*</span>                   <span class="token number">1.2</span><span class="token punctuation">.</span><span class="token number">1</span> 到了字符串尾部，直接push <span class="token operator">*</span>                   <span class="token number">1.2</span><span class="token punctuation">.</span><span class="token number">2</span> 未到字符串尾部，判断下一位是否是符号位，如果是符号位的话，直接push <span class="token operator">*</span>           <span class="token number">1.3</span> 自己想的太复杂了，在这个部分直接控制index的移动，这样不是很好！</code></pre><p>代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">calculatr1</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> ArrStack1 numStack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrStack1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> ArrStack1 operStack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrStack1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String expression<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//字符串指向标志</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//控制循环</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> loop <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//第二个出栈的数在操作符前面</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> backwardPop <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//第1个出栈的数组在操作符后面</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> forwardPop <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 符号栈的符号</span>    <span class="token keyword">private</span> <span class="token keyword">char</span> oper <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//多位数判断</span>    StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">calculatr1</span><span class="token punctuation">(</span>String expression<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>expression <span class="token operator">=</span> expression<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">CalcForMiddleExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>loop<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//beginIndex - the beginning index, inclusive.</span>            <span class="token comment" spellcheck="true">//endIndex - the ending index, exclusive.</span>            <span class="token keyword">char</span> ch <span class="token operator">=</span> expression<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//是操作符，入操作栈</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>operStack<span class="token punctuation">.</span><span class="token function">isOper</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>operStack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    operStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>operStack<span class="token punctuation">.</span><span class="token function">priority</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> operStack<span class="token punctuation">.</span><span class="token function">priority</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>operStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        forwardPop <span class="token operator">=</span> numStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        backwardPop <span class="token operator">=</span>  numStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        oper <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> operStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        numStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>numStack<span class="token punctuation">.</span><span class="token function">calc</span><span class="token punctuation">(</span>backwardPop<span class="token punctuation">,</span> forwardPop<span class="token punctuation">,</span> oper<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        operStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>                                            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                        operStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//不是操作符</span>            <span class="token comment" spellcheck="true">//判断是否是多位数</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">/**                 * 1.是这种逻辑：                 *   1.1 index的自加一直是最后的部分进行控制的                 *   1.2 这个多位数的判断部分就进行2个判断                 *       1.2.1 到了字符串尾部，直接push                 *       1.2.2 未到字符串尾部，判断下一位是否是符号位，如果是符号位的话，直接push                 *   1.3 自己想的太复杂了，在这个部分直接控制index的移动，这样不是很好！                 */</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">==</span> expression<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"end:"</span> <span class="token operator">+</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    numStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    sb<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>operStack<span class="token punctuation">.</span><span class="token function">isOper</span><span class="token punctuation">(</span>expression<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> index<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"mid:"</span> <span class="token operator">+</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        numStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        sb<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            index <span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">>=</span> expression<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                loop <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        loop <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>loop<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>operStack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                loop <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            forwardPop <span class="token operator">=</span> numStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            backwardPop <span class="token operator">=</span>  numStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            oper <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> operStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//System.out.println("calc:" + forwardPop + " : " + backwardPop + " : " + oper);</span>            <span class="token keyword">int</span> num <span class="token operator">=</span> numStack<span class="token punctuation">.</span><span class="token function">calc</span><span class="token punctuation">(</span>backwardPop<span class="token punctuation">,</span> forwardPop<span class="token punctuation">,</span> oper<span class="token punctuation">)</span><span class="token punctuation">;</span>            numStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> numStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="解决括号输入问题"><a href="#解决括号输入问题" class="headerlink" title="解决括号输入问题"></a>解决括号输入问题</h4>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写神经网络</title>
      <link href="/2020/04/20/20200420-133123/"/>
      <url>/2020/04/20/20200420-133123/</url>
      
        <content type="html"><![CDATA[<p>待续，正在学习中<del>~</del></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>01-opencv-Mat</title>
      <link href="/2020/04/20/20200420-133048/"/>
      <url>/2020/04/20/20200420-133048/</url>
      
        <content type="html"><![CDATA[<h2 id="OpenCV理解Mat与基本操作"><a href="#OpenCV理解Mat与基本操作" class="headerlink" title="OpenCV理解Mat与基本操作"></a>OpenCV理解Mat与基本操作</h2><blockquote><p>为手写神经网络做准备</p></blockquote><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><table><thead><tr><th>define</th><th>解释</th></tr></thead><tbody><tr><td>CV_8UC1</td><td>8位无符号单通道</td></tr><tr><td>CV_8UC3</td><td>8位无符号3通道</td></tr><tr><td>CV_8UC4</td><td>8位无符号4通道</td></tr><tr><td>CV_32FC1</td><td>32位浮点型单通道</td></tr><tr><td>CV_32FC3</td><td>32位浮点型3通道</td></tr></tbody></table><blockquote><p>数据位深度8位 32位</p><p>数据类型 U:uchar F:float</p><p>通道数： C1:单通道 C3:3通道 C4:4通道</p></blockquote><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><h4 id="创建矩阵"><a href="#创建矩阵" class="headerlink" title="创建矩阵"></a>创建矩阵</h4><pre class=" language-c"><code class="language-c">    <span class="token comment" spellcheck="true">//1.读入一张图片</span>    Mat image <span class="token operator">=</span> <span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">"../../../images/1.jpg"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Mat imagec <span class="token operator">=</span> <span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">"../../../images/1.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2.在窗口显示载入的图片</span>    <span class="token function">imshow</span><span class="token punctuation">(</span><span class="token string">"image"</span><span class="token punctuation">,</span> imagec<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">waitKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"创建矩阵的集中方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token punctuation">:</span><span class="token punctuation">:</span>Mat <span class="token function">a</span><span class="token punctuation">(</span>cv<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> CV_8UC1<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*    [205, 205, 205, 205, 205;    205, 205, 205, 205, 205;    205, 205, 205, 205, 205;    205, 205, 205, 205, 205;    205, 205, 205, 205, 205]    */</span>    cv<span class="token punctuation">:</span><span class="token punctuation">:</span>Mat b <span class="token operator">=</span> cv<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Mat</span><span class="token punctuation">(</span>cv<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> CV_8UC3<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*    [205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205;     205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205;     205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205;     205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205;     205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205]    [5 x 5]    */</span>    <span class="token comment" spellcheck="true">//2行2列对角矩阵</span>    cv<span class="token punctuation">:</span><span class="token punctuation">:</span>Mat c <span class="token operator">=</span> cv<span class="token punctuation">:</span><span class="token punctuation">:</span>Mat<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">eye</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> CV_64F<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> c <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*    [1, 0;     0, 1]    */</span>    <span class="token comment" spellcheck="true">//2行2列单位矩阵</span>    cv<span class="token punctuation">:</span><span class="token punctuation">:</span>Mat o <span class="token operator">=</span> cv<span class="token punctuation">:</span><span class="token punctuation">:</span>Mat<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">ones</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> CV_32F<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> o <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*    [1, 1;     1, 1]    */</span>    <span class="token comment" spellcheck="true">//3行 3列 0matrix</span>    cv<span class="token punctuation">:</span><span class="token punctuation">:</span>Mat z <span class="token operator">=</span> cv<span class="token punctuation">:</span><span class="token punctuation">:</span>Mat<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">zeros</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> CV_8UC1<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> z <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*    [  0,   0,   0;       0,   0,   0;       0,   0,   0]    */</span>    cv<span class="token punctuation">:</span><span class="token punctuation">:</span>Mat img<span class="token punctuation">;</span>    img<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>CV_8UC2<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> img <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*    [205, 205, 205, 205, 205, 205, 205, 205;     205, 205, 205, 205, 205, 205, 205, 205;     205, 205, 205, 205, 205, 205, 205, 205;     205, 205, 205, 205, 205, 205, 205, 205]    */</span></code></pre><h4 id="矩阵的基本运算"><a href="#矩阵的基本运算" class="headerlink" title="矩阵的基本运算"></a>矩阵的基本运算</h4><p><code>*</code>:是矩阵乘法</p><p><code>Size(col,row)</code>!!</p><p><code>dot()</code>是点乘</p><pre class=" language-c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n计算加减法\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Size（col, row）</span>    cv<span class="token punctuation">:</span><span class="token punctuation">:</span>Mat a1 <span class="token operator">=</span> Mat<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">eye</span><span class="token punctuation">(</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> CV_32F<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token punctuation">:</span><span class="token punctuation">:</span>Mat b1 <span class="token operator">=</span> Mat<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">ones</span><span class="token punctuation">(</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> CV_32F<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token punctuation">:</span><span class="token punctuation">:</span>Mat c1 <span class="token operator">=</span> a1 <span class="token operator">+</span> b1<span class="token punctuation">;</span>    cv<span class="token punctuation">:</span><span class="token punctuation">:</span>Mat d1 <span class="token operator">=</span> a1 <span class="token operator">-</span> b1<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> c1 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> d1 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*    [2, 1, 1;     1, 2, 1]    [0, -1, -1;     -1, 0, -1]    */</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n计算矩阵乘法|转置\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Mat m1 <span class="token operator">=</span> Mat<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">eye</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> CV_32F<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//使用cv命名空间可省略cv::前缀，下同  </span>    Mat m2 <span class="token operator">=</span> Mat<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">ones</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> CV_32F<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"m1  = "</span> <span class="token operator">&lt;&lt;</span> m1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> m1 <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"m2  = "</span> <span class="token operator">&lt;&lt;</span>m2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> m2 <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\nm1.*2 = "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>m1<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span>endl <span class="token operator">&lt;&lt;</span> m1 <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n(m1+2).*(m1+3) = "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>m1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mul</span><span class="token punctuation">(</span>m1<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>m1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mul</span><span class="token punctuation">(</span>m1<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>      cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\nm1*m2 = "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>m1<span class="token operator">*</span>m2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> m1<span class="token operator">*</span>m2 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*    m1  = [3 x 2]    [1, 0, 0;    0, 1, 0]    m2  = [2 x 3]    [1, 1;     1, 1;     1, 1]    m1.*2 = [3 x 2]    [2, 0, 0;     0, 2, 0]    (m1+2).*(m1+3) = [3 x 2]    [8, 3, 3;     3, 8, 3]    m1*m2 = [2 x 2]    [1, 1;     1, 1]    */</span></code></pre><h4 id="矩阵的转置"><a href="#矩阵的转置" class="headerlink" title="矩阵的转置"></a>矩阵的转置</h4><pre class=" language-c"><code class="language-c">Mat m3<span class="token operator">=</span> Mat<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">eye</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span> CV_32F<span class="token punctuation">)</span><span class="token punctuation">;</span>        Mat m3t <span class="token operator">=</span> m3<span class="token punctuation">.</span><span class="token function">t</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      cout<span class="token operator">&lt;&lt;</span><span class="token string">"m3  = "</span><span class="token operator">&lt;&lt;</span>endl<span class="token operator">&lt;&lt;</span>m3<span class="token operator">&lt;&lt;</span>endl<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>      cout<span class="token operator">&lt;&lt;</span><span class="token string">"m3t  = "</span><span class="token operator">&lt;&lt;</span>endl<span class="token operator">&lt;&lt;</span>m3t<span class="token operator">&lt;&lt;</span>endl<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/*    矩阵的转置    m3  =    [1, 0, 0;     0, 1, 0]    m3t  =    [1, 0;     0, 1;     0, 0]    */</span></code></pre><h4 id="矩阵求逆"><a href="#矩阵求逆" class="headerlink" title="矩阵求逆"></a>矩阵求逆</h4><pre class=" language-c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n矩阵求逆\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"必须为方阵"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Mat m4<span class="token operator">=</span> Mat<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">eye</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span> CV_32F<span class="token punctuation">)</span><span class="token punctuation">;</span>     Mat meinv <span class="token operator">=</span> m4<span class="token punctuation">.</span><span class="token function">inv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      cout<span class="token operator">&lt;&lt;</span><span class="token string">"m4  = "</span><span class="token operator">&lt;&lt;</span>endl<span class="token operator">&lt;&lt;</span>m4<span class="token operator">&lt;&lt;</span>endl<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>      cout<span class="token operator">&lt;&lt;</span><span class="token string">"meinv = "</span><span class="token operator">&lt;&lt;</span>endl<span class="token operator">&lt;&lt;</span>meinv<span class="token operator">&lt;&lt;</span>endl<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/*    [1, 0, 0;     0, 1, 0;     0, 0, 1]    meinv =    [1, 0, 0;     0, 1, 0;     0, 0, 1]    */</span></code></pre><h4 id="统计矩阵中非零个数"><a href="#统计矩阵中非零个数" class="headerlink" title="统计矩阵中非零个数"></a>统计矩阵中非零个数</h4><pre class=" language-c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"统计矩阵中非0的个数\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">countNonZero</span><span class="token punctuation">(</span>m4<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></code></pre><h4 id="矩阵的均值和标准差"><a href="#矩阵的均值和标准差" class="headerlink" title="矩阵的均值和标准差"></a>矩阵的均值和标准差</h4><pre class=" language-c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n均值和标准差\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Mat mean<span class="token punctuation">;</span>    Mat std<span class="token punctuation">;</span>    <span class="token function">meanStdDev</span><span class="token punctuation">(</span>m4<span class="token punctuation">,</span> mean<span class="token punctuation">,</span> std<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"mean = "</span> <span class="token operator">&lt;&lt;</span> mean <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"std = "</span> <span class="token operator">&lt;&lt;</span> std <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*    mean = [0.3333333333333333]    std = [0.4714045207910317]    */</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n多通道的均值和方差\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Mat mean3<span class="token punctuation">;</span>    Mat stddev3<span class="token punctuation">;</span>    Mat <span class="token function">m5</span><span class="token punctuation">(</span>cv<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> CV_8UC3<span class="token punctuation">,</span> <span class="token function">Scalar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"m5  = "</span> <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> m5 <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token function">meanStdDev</span><span class="token punctuation">(</span>m5<span class="token punctuation">,</span> mean3<span class="token punctuation">,</span> stddev3<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"mean3 = "</span> <span class="token operator">&lt;&lt;</span> mean3 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"stddev3 = "</span> <span class="token operator">&lt;&lt;</span> stddev3 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*    m5  =    [255, 200, 100, 255, 200, 100, 255, 200, 100, 255, 200, 100, 255, 200, 100;     255, 200, 100, 255, 200, 100, 255, 200, 100, 255, 200, 100, 255, 200, 100;     255, 200, 100, 255, 200, 100, 255, 200, 100, 255, 200, 100, 255, 200, 100;     255, 200, 100, 255, 200, 100, 255, 200, 100, 255, 200, 100, 255, 200, 100;     255, 200, 100, 255, 200, 100, 255, 200, 100, 255, 200, 100, 255, 200, 100]    mean3 = [255;             200;             100]    stddev3 = [0;               0;               0]    */</span></code></pre><h4 id="矩阵元素的访问"><a href="#矩阵元素的访问" class="headerlink" title="矩阵元素的访问"></a>矩阵元素的访问</h4><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;opencv2/opencv.hpp></span></span>using namespace cv<span class="token punctuation">;</span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"得到元素的值\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Mat <span class="token function">img</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> CV_8UC3<span class="token punctuation">,</span> <span class="token function">Scalar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> img<span class="token punctuation">.</span>rows <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//5</span>    cout <span class="token operator">&lt;&lt;</span> img<span class="token punctuation">.</span>cols <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//3</span>    cout <span class="token operator">&lt;&lt;</span> img<span class="token punctuation">.</span><span class="token function">channels</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//3</span>    cout <span class="token operator">&lt;&lt;</span> img<span class="token punctuation">.</span><span class="token function">depth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//0</span>    cout <span class="token operator">&lt;&lt;</span> img<span class="token punctuation">.</span>dims <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//2</span>    cout <span class="token operator">&lt;&lt;</span> img<span class="token punctuation">.</span><span class="token function">elemSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//3</span>    cout <span class="token operator">&lt;&lt;</span> img<span class="token punctuation">.</span><span class="token function">elemSize1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1</span>    cout <span class="token operator">&lt;&lt;</span> img<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//5</span>    cout <span class="token operator">&lt;&lt;</span> img<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//3</span>    cout <span class="token operator">&lt;&lt;</span> img<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//[3x5]</span>    cout <span class="token operator">&lt;&lt;</span> img <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">/*    对于三通道元素彩色图像来说，那么可以这样    image.at&lt;cv::Vec3b>(j,i)[channel]= value;    使用数组赋值    image.at&lt;cv::Vec3b>(j,i) = cv::Vec3b(a,b,c);    Vec3b表示3个unsigned char组成的向量    */</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> row <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> row <span class="token operator">&lt;</span> img<span class="token punctuation">.</span>rows<span class="token punctuation">;</span> row<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> col <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> col <span class="token operator">&lt;</span> img<span class="token punctuation">.</span>cols<span class="token punctuation">;</span> col<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> r <span class="token operator">=</span> img<span class="token punctuation">.</span>at<span class="token operator">&lt;</span>Vec3b<span class="token operator">></span><span class="token punctuation">(</span>row<span class="token punctuation">,</span> col<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> g <span class="token operator">=</span> img<span class="token punctuation">.</span>at<span class="token operator">&lt;</span>Vec3b<span class="token operator">></span><span class="token punctuation">(</span>row<span class="token punctuation">,</span> col<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> b <span class="token operator">=</span> img<span class="token punctuation">.</span>at<span class="token operator">&lt;</span>Vec3b<span class="token operator">></span><span class="token punctuation">(</span>row<span class="token punctuation">,</span> col<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> r <span class="token operator">&lt;&lt;</span> <span class="token string">" : "</span> <span class="token operator">&lt;&lt;</span> g <span class="token operator">&lt;&lt;</span> <span class="token string">" : "</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Mat <span class="token function">img1</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> CV_8UC1<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> img1 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> row <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> row <span class="token operator">&lt;</span> img1<span class="token punctuation">.</span>rows<span class="token punctuation">;</span> row<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> col <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> col <span class="token operator">&lt;</span> img1<span class="token punctuation">.</span>cols<span class="token punctuation">;</span> col<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> val <span class="token operator">=</span> img1<span class="token punctuation">.</span>at<span class="token operator">&lt;</span>uchar<span class="token operator">></span><span class="token punctuation">(</span>row<span class="token punctuation">,</span> col<span class="token punctuation">)</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> val <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="求矩阵的最大最小值-最大值坐标最小值坐标"><a href="#求矩阵的最大最小值-最大值坐标最小值坐标" class="headerlink" title="求矩阵的最大最小值|最大值坐标最小值坐标"></a>求矩阵的最大最小值|最大值坐标最小值坐标</h4><pre class=" language-c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"求最大最小值\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"图像必须得是单通道！！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"image"</span> <span class="token operator">&lt;&lt;</span> image<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">double</span> minVal <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> maxVal <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>    Point minPt<span class="token punctuation">;</span>    Point maxPt<span class="token punctuation">;</span>    <span class="token function">minMaxLoc</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token operator">&amp;</span>minVal<span class="token punctuation">,</span> <span class="token operator">&amp;</span>maxVal<span class="token punctuation">,</span> <span class="token operator">&amp;</span>minPt<span class="token punctuation">,</span> <span class="token operator">&amp;</span>maxPt<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"min value  = "</span> <span class="token operator">&lt;&lt;</span> minVal <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"max value  = "</span> <span class="token operator">&lt;&lt;</span> maxVal <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"minPt = ("</span> <span class="token operator">&lt;&lt;</span> minPt<span class="token punctuation">.</span>x <span class="token operator">&lt;&lt;</span> <span class="token string">","</span> <span class="token operator">&lt;&lt;</span> minPt<span class="token punctuation">.</span>y <span class="token operator">&lt;&lt;</span> <span class="token string">")"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"maxPt = ("</span> <span class="token operator">&lt;&lt;</span> maxPt<span class="token punctuation">.</span>x <span class="token operator">&lt;&lt;</span> <span class="token string">","</span> <span class="token operator">&lt;&lt;</span> maxPt<span class="token punctuation">.</span>y <span class="token operator">&lt;&lt;</span> <span class="token string">")"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*    image[658 x 439]    min value  = 0    max value  = 255    minPt = (36,217)    maxPt = (124,220)    */</span>    Rect <span class="token function">rectMin</span><span class="token punctuation">(</span>minPt<span class="token punctuation">.</span>x <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">,</span> minPt<span class="token punctuation">.</span>y <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Rect <span class="token function">rectMax</span><span class="token punctuation">(</span>maxPt<span class="token punctuation">.</span>x <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">,</span> maxPt<span class="token punctuation">.</span>y <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">rectangle</span><span class="token punctuation">(</span>imagec<span class="token punctuation">,</span> rectMin<span class="token punctuation">,</span> <span class="token function">Scalar</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">rectangle</span><span class="token punctuation">(</span>imagec<span class="token punctuation">,</span> rectMax<span class="token punctuation">,</span> <span class="token function">Scalar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">imshow</span><span class="token punctuation">(</span><span class="token string">"image with min max location"</span><span class="token punctuation">,</span> imagec<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>效果：</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200420174812.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200420174837.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> opencv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12-数据结构Java版-中缀表达式</title>
      <link href="/2020/04/19/20200419-100027/"/>
      <url>/2020/04/19/20200419-100027/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/homewyk/cloudimg/raw/master/images.jpg" alt=""></p><h2 id="中缀表达式"><a href="#中缀表达式" class="headerlink" title="中缀表达式"></a>中缀表达式</h2><p>栈的实际需求：</p><p>请输入一个表达式</p><p>计算式:[7<em>2</em>2-5+1-5+3-3] 点击计算【如下图】</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200419100423.png" alt=""></p><p>请问: 计算机底层是如何运算得到结果的？</p><p> 注意不是简单的把算式列出运算,因为我们看这个算式 7 <em> 2 </em> 2 - 5,</p><p> 但是计算机怎么理解这个算式的(对计算机而言，它接收到的就是一个字符串)，我们讨论的是这个问题。-&gt; 栈 </p><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><p>简化思路：操作数为$[0,9]$,操作符为<code>+-*/</code></p><ol><li>建立一个<code>index</code>指针，来遍历我们的字符串表达式</li><li>如果我们发现是一个数字，直接入栈</li><li>如果扫描到是一个操作符：<ol><li>如果当前栈为空，操作符入栈</li><li>若果当前栈非空，进行操作符优先级比较：<ol><li>如果当前的操作符 <code>&lt;=</code> 栈中的操作符，从数字栈中pop出2个数字，从操作符栈中pop出一个操作符，进行运算，然后将运算结果入数字栈，再将当前的操作符入栈</li><li>如果当前的操作符<code>&gt;</code>栈中的操作符，直接入栈</li></ol></li></ol></li><li>当表达式扫描完毕后，就顺序进行数字栈和操作栈的出栈操作，并进行运行，<strong>第一个出栈的放在操作符后面，第二个出栈的放在操作符前面</strong></li><li>到最后，数字栈中就剩下一个数字，就为表达式的结果</li></ol><h3 id="一个简单的例子"><a href="#一个简单的例子" class="headerlink" title="一个简单的例子"></a>一个简单的例子</h3><p> a + b * c / d </p><p>首先，遇到 a ，把 a 送到操作数栈，遇到 + ，送到操作符栈： </p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200419102157.png" alt=""></p><p>遇到 b，压栈 </p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200419102215.png" alt=""></p><p>遇到乘，由于乘的优先级高于加，所以，现在就什么也不做，只把乘号进栈： </p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200419102232.png" alt=""></p><p>同样，遇到 c 把 c 进栈（此图略，请自己补上），再遇到 / ，由于除的优先级与 <em> 的优先级相同，所以，乘就可以先做了。这个动作是把乘号出栈，把c 和 b出栈，求 c </em> b的值，并且把这个值入栈。即： </p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200419102304.png" alt=""></p><p>然后把 / 入栈，把 d 入栈： </p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200419102322.png" alt=""></p><p>现在到了运算的结尾了。我们只需要把现在的栈里的内容从顶向下计算起来即可，先算除法： </p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200419102337.png" alt=""></p><p>再算加法： </p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200419102358.png" alt=""></p><p><strong>提高阶段</strong></p><p>对于括号的处理：</p><p>可以这样想，在遇到形如 a * (b + c) 这样的形式的时候，左边的乘法是一定不能做的，我们只需要将左括号进栈即可。所以，我们可以把左括号看做是一个优先级无穷大的运算符，它使得左方的运算符都不能提前进行计算。</p><p>遇到右括号时，b + c 这个加法是可以进行运算的了，所以可以把右括号看作是一个优先级无穷小的运算符</p><p>它会使得操作符栈上的所有运算符都出栈并执行计算，直到遇到左括号。</p><p>遇到左括号以后，只需要把左括号从栈里弹出来，然后让它和右括号一起即可。</p><p>由于括号内的计算都已经完成了，结果是一个整数，我们已经在计算的过程中把这个整数放到操作数栈里了。所以整个括号内的求值就完成了。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>栈定义：</p><p>在出入栈和判断栈空满的基础上要添加新的方法：</p><ul><li>判断式数字还是操作符</li><li>判断操作符的优先级（使用数字可以表示优先级的大小）</li><li>进行一次运算操作</li><li>获得栈顶元素</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ArrStack</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> maxsize<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> stack <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> top<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/***     * 构造函数     * @param maxsize     */</span>    <span class="token keyword">public</span> <span class="token function">ArrStack</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxsize<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>maxsize <span class="token operator">=</span> maxsize<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>maxsize<span class="token punctuation">]</span><span class="token punctuation">;</span>        top <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判断stack is full?     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> top <span class="token operator">==</span> maxsize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判读 stack is empty?     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> top <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     *  1.入栈     * @param num     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"stack 已经满了~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        top <span class="token operator">++</span><span class="token punctuation">;</span>        stack<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 2. 出栈操作     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"stack 已经空了~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"stack 已经空了~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> number <span class="token operator">=</span> stack<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>        top <span class="token operator">--</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> number<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 列出所有的节点     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"stack 已经空了~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"stack 已经空了~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> top<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"stack["</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"] : "</span> <span class="token operator">+</span> stack<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判断字符是否为操作符     * @param val     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isOper</span><span class="token punctuation">(</span><span class="token keyword">char</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> val <span class="token operator">==</span> <span class="token string">'+'</span> <span class="token operator">||</span> val <span class="token operator">==</span> <span class="token string">'-'</span><span class="token operator">||</span> val <span class="token operator">==</span><span class="token string">'*'</span> <span class="token operator">||</span> val <span class="token operator">==</span> <span class="token string">'/'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/***     * 运算     * @param backwardPop 首次出栈值     * @param forwardPop  第二次出栈值     * @param oper     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token keyword">int</span> backwardPop<span class="token punctuation">,</span> <span class="token keyword">int</span> forwardPop<span class="token punctuation">,</span> <span class="token keyword">char</span> oper<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>oper<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token string">'+'</span><span class="token operator">:</span>            res <span class="token operator">=</span> backwardPop <span class="token operator">+</span> forwardPop<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'-'</span><span class="token operator">:</span>            res <span class="token operator">=</span> backwardPop <span class="token operator">-</span> forwardPop<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'*'</span><span class="token operator">:</span>            res <span class="token operator">=</span> backwardPop <span class="token operator">*</span> forwardPop<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'/'</span><span class="token operator">:</span>            res <span class="token operator">=</span> backwardPop <span class="token operator">/</span> forwardPop<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/***     * 得到操作符的优先级     * @param oper     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">priority</span><span class="token punctuation">(</span><span class="token keyword">char</span> oper<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>oper<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token string">'+'</span><span class="token operator">:</span>            num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'-'</span><span class="token operator">:</span>            num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'*'</span><span class="token operator">:</span>            num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'/'</span><span class="token operator">:</span>            num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            num <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> num<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获得栈顶元素     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stack<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>中缀表达式的实现：</p><p>根据上面的思路进行编写</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">calculatr</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> ArrStack numStack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrStack</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> ArrStack operStack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrStack</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String expression<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token keyword">private</span> <span class="token keyword">boolean</span> loop <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> backwardPop <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> forwardPop <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">char</span> oper <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">calculatr</span><span class="token punctuation">(</span>String expression<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>expression <span class="token operator">=</span> expression<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">CalcForMiddleExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>loop<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//beginIndex - the beginning index, inclusive.</span>            <span class="token comment" spellcheck="true">//endIndex - the ending index, exclusive.</span>            <span class="token keyword">char</span> ch <span class="token operator">=</span> expression<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//是操作符，入操作栈</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>operStack<span class="token punctuation">.</span><span class="token function">isOper</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>operStack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    operStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>operStack<span class="token punctuation">.</span><span class="token function">priority</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> operStack<span class="token punctuation">.</span><span class="token function">priority</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>operStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        forwardPop <span class="token operator">=</span> numStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        backwardPop <span class="token operator">=</span>  numStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        oper <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> operStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        numStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>numStack<span class="token punctuation">.</span><span class="token function">calc</span><span class="token punctuation">(</span>backwardPop<span class="token punctuation">,</span> forwardPop<span class="token punctuation">,</span> oper<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        operStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>                                            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                        operStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//不是操作符入数字栈</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                numStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ch <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            index <span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">==</span> expression<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                loop <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        System.out.println("num:");</span><span class="token comment" spellcheck="true">//        numStack.list();</span><span class="token comment" spellcheck="true">//        System.out.println("oper:");</span><span class="token comment" spellcheck="true">//        operStack.list();</span>        loop <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>loop<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>operStack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                loop <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            forwardPop <span class="token operator">=</span> numStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            backwardPop <span class="token operator">=</span>  numStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            oper <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> operStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//System.out.println("calc:" + forwardPop + " : " + backwardPop + " : " + oper);</span>            <span class="token keyword">int</span> num <span class="token operator">=</span> numStack<span class="token punctuation">.</span><span class="token function">calc</span><span class="token punctuation">(</span>backwardPop<span class="token punctuation">,</span> forwardPop<span class="token punctuation">,</span> oper<span class="token punctuation">)</span><span class="token punctuation">;</span>            numStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> numStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>只能实现0到9的加减乘除法操作</strong></p><p>对于多位数的加减乘除法和括号的实现问题，后面一章！</p><h2 id="详细代码"><a href="#详细代码" class="headerlink" title="详细代码"></a>详细代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>homewyk<span class="token punctuation">.</span>stack<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MiddleExpression</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"中缀表达式的测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        calculatr calculatr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">calculatr</span><span class="token punctuation">(</span><span class="token string">"2+2*2*4/8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>calculatr<span class="token punctuation">.</span><span class="token function">CalcForMiddleExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">calculatr</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> ArrStack numStack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrStack</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> ArrStack operStack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrStack</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String expression<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token keyword">private</span> <span class="token keyword">boolean</span> loop <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> backwardPop <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> forwardPop <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">char</span> oper <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">calculatr</span><span class="token punctuation">(</span>String expression<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>expression <span class="token operator">=</span> expression<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">CalcForMiddleExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>loop<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//beginIndex - the beginning index, inclusive.</span>            <span class="token comment" spellcheck="true">//endIndex - the ending index, exclusive.</span>            <span class="token keyword">char</span> ch <span class="token operator">=</span> expression<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//是操作符，入操作栈</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>operStack<span class="token punctuation">.</span><span class="token function">isOper</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>operStack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    operStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>operStack<span class="token punctuation">.</span><span class="token function">priority</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> operStack<span class="token punctuation">.</span><span class="token function">priority</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>operStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        forwardPop <span class="token operator">=</span> numStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        backwardPop <span class="token operator">=</span>  numStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        oper <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> operStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        numStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>numStack<span class="token punctuation">.</span><span class="token function">calc</span><span class="token punctuation">(</span>backwardPop<span class="token punctuation">,</span> forwardPop<span class="token punctuation">,</span> oper<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        operStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>                                            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                        operStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//不是操作符入数字栈</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                numStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ch <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            index <span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">==</span> expression<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                loop <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        System.out.println("num:");</span><span class="token comment" spellcheck="true">//        numStack.list();</span><span class="token comment" spellcheck="true">//        System.out.println("oper:");</span><span class="token comment" spellcheck="true">//        operStack.list();</span>        loop <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>loop<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>operStack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                loop <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            forwardPop <span class="token operator">=</span> numStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            backwardPop <span class="token operator">=</span>  numStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            oper <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> operStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//System.out.println("calc:" + forwardPop + " : " + backwardPop + " : " + oper);</span>            <span class="token keyword">int</span> num <span class="token operator">=</span> numStack<span class="token punctuation">.</span><span class="token function">calc</span><span class="token punctuation">(</span>backwardPop<span class="token punctuation">,</span> forwardPop<span class="token punctuation">,</span> oper<span class="token punctuation">)</span><span class="token punctuation">;</span>            numStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> numStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ArrStack</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> maxsize<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> stack <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> top<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/***     * 构造函数     * @param maxsize     */</span>    <span class="token keyword">public</span> <span class="token function">ArrStack</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxsize<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>maxsize <span class="token operator">=</span> maxsize<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>maxsize<span class="token punctuation">]</span><span class="token punctuation">;</span>        top <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判断stack is full?     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> top <span class="token operator">==</span> maxsize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判读 stack is empty?     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> top <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     *  1.入栈     * @param num     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"stack 已经满了~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        top <span class="token operator">++</span><span class="token punctuation">;</span>        stack<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 2. 出栈操作     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"stack 已经空了~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"stack 已经空了~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> number <span class="token operator">=</span> stack<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>        top <span class="token operator">--</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> number<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 列出所有的节点     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"stack 已经空了~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"stack 已经空了~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> top<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"stack["</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"] : "</span> <span class="token operator">+</span> stack<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判断字符是否为操作符     * @param val     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isOper</span><span class="token punctuation">(</span><span class="token keyword">char</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> val <span class="token operator">==</span> <span class="token string">'+'</span> <span class="token operator">||</span> val <span class="token operator">==</span> <span class="token string">'-'</span><span class="token operator">||</span> val <span class="token operator">==</span><span class="token string">'*'</span> <span class="token operator">||</span> val <span class="token operator">==</span> <span class="token string">'/'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/***     * 运算     * @param backwardPop 首次出栈值     * @param forwardPop  第二次出栈值     * @param oper     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token keyword">int</span> backwardPop<span class="token punctuation">,</span> <span class="token keyword">int</span> forwardPop<span class="token punctuation">,</span> <span class="token keyword">char</span> oper<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>oper<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token string">'+'</span><span class="token operator">:</span>            res <span class="token operator">=</span> backwardPop <span class="token operator">+</span> forwardPop<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'-'</span><span class="token operator">:</span>            res <span class="token operator">=</span> backwardPop <span class="token operator">-</span> forwardPop<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'*'</span><span class="token operator">:</span>            res <span class="token operator">=</span> backwardPop <span class="token operator">*</span> forwardPop<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'/'</span><span class="token operator">:</span>            res <span class="token operator">=</span> backwardPop <span class="token operator">/</span> forwardPop<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/***     * 得到操作符的优先级     * @param oper     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">priority</span><span class="token punctuation">(</span><span class="token keyword">char</span> oper<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>oper<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token string">'+'</span><span class="token operator">:</span>            num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'-'</span><span class="token operator">:</span>            num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'*'</span><span class="token operator">:</span>            num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'/'</span><span class="token operator">:</span>            num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            num <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> num<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获得栈顶元素     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stack<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>对于多位数的加减乘除法和括号的实现问题，后面一章！</p><p>改动也不大！</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>09-pytorch-StartWithCoab</title>
      <link href="/2020/04/18/20200418-221300/"/>
      <url>/2020/04/18/20200418-221300/</url>
      
        <content type="html"><![CDATA[<h1 id="使用Google-Colab-实现关于Yolov3的训练检测"><a href="#使用Google-Colab-实现关于Yolov3的训练检测" class="headerlink" title="使用Google Colab 实现关于Yolov3的训练检测"></a>使用Google Colab 实现关于Yolov3的训练检测</h1><blockquote><p>jupyter -&gt; md :<code>jupyter nbconvert --to md notebook.ipynb</code><br>苦于自己的电脑没有GPU加速，无法进行yolov3的训练，所以查找资料，发现了这个！<br>免费12小时也足够了<br>使用时间：2020年4月18日21:21:50<br>突然发现自己每个月25大洋花的还算可以，哈哈</p></blockquote><p>整体界面<br><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200418212504.png" alt=""><br>界面类似于jupyter，感觉挺好上手的  </p><ul><li>执行<code>Linux</code>的相关终端命令,需要在前面添加<code>%</code>,<code>%ls</code> <code>%pwd</code>  </li><li>执行程序的时候，需要在前面添加<code>!</code>  <code>!./a.out</code>  </li></ul><hr><h2 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h2><h3 id="连接到托管代码执行程序"><a href="#连接到托管代码执行程序" class="headerlink" title="连接到托管代码执行程序"></a>连接到托管代码执行程序</h3><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200418212257.png" alt="">  </p><h3 id="设置GPU加速"><a href="#设置GPU加速" class="headerlink" title="设置GPU加速"></a>设置GPU加速</h3><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200418212819.png" alt=""><br><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200418212854.png" alt="">  </p><h2 id="此时基本的环境已经配置完成了，开工了"><a href="#此时基本的环境已经配置完成了，开工了" class="headerlink" title="此时基本的环境已经配置完成了，开工了  "></a>此时基本的环境已经配置完成了，开工了  </h2><h2 id="开始Demo"><a href="#开始Demo" class="headerlink" title="开始Demo"></a>开始Demo</h2><h3 id="加载网络，开启GPU和OPENCV"><a href="#加载网络，开启GPU和OPENCV" class="headerlink" title="加载网络，开启GPU和OPENCV"></a>加载网络，开启GPU和OPENCV</h3><pre><code>!git clone https://github.com/AlexeyAB/darknet</code></pre><pre><code>fatal: destination path &#39;darknet&#39; already exists and is not an empty directory.</code></pre><pre><code>%cd darknet!sed -i &#39;s/OPENCV=0/OPENCV=1/&#39; Makefile!sed -i &#39;s/GPU=0/GPU=1/&#39; Makefile!sed -i &#39;s/CUDNN=0/CUDNN=1/&#39; Makefile</code></pre><pre><code>[Errno 20] Not a directory: &#39;darknet&#39;/content/darknet</code></pre><h3 id="查看CUDA的信息"><a href="#查看CUDA的信息" class="headerlink" title="查看CUDA的信息"></a>查看CUDA的信息</h3><pre><code># 看下CUDA! /usr/local/cuda/bin/nvcc --version</code></pre><pre><code>nvcc: NVIDIA (R) Cuda compiler driverCopyright (c) 2005-2019 NVIDIA CorporationBuilt on Sun_Jul_28_19:07:16_PDT_2019Cuda compilation tools, release 10.1, V10.1.243</code></pre><h3 id="编译Dartnet"><a href="#编译Dartnet" class="headerlink" title="编译Dartnet"></a>编译Dartnet</h3><pre><code># 编译Darket!make</code></pre><h3 id="下载预训练权重"><a href="#下载预训练权重" class="headerlink" title="下载预训练权重"></a>下载预训练权重</h3><p>YOLOv3 在COCO数据集上已经训练的很好了，我们不需要花大力气去训练，加载预训练的权重能够帮助我们更快的训练模型。</p><p><strong>下过一次就不要再运行这个代码块了！</strong></p><p>执行一次下载一次</p><pre><code># 下载预训练的权重!wget https://pjreddie.com/media/files/yolov3.weights</code></pre><pre><code>--2020-04-18 13:47:44--  https://pjreddie.com/media/files/yolov3.weightsResolving pjreddie.com (pjreddie.com)... 128.208.4.108Connecting to pjreddie.com (pjreddie.com)|128.208.4.108|:443... connected.HTTP request sent, awaiting response... 200 OKLength: 248007048 (237M) [application/octet-stream]Saving to: âyolov3.weights.1âyolov3.weights.1    100%[===================&gt;] 236.52M   751KB/s    in 4m 29s  2020-04-18 13:52:15 (900 KB/s) - âyolov3.weights.1â saved [248007048/248007048]</code></pre><p>​    </p><h3 id="定义几个函数"><a href="#定义几个函数" class="headerlink" title="定义几个函数"></a>定义几个函数</h3><ul><li>显示预测图像  </li><li>从本地上传文件  </li><li>从终端下载文件</li></ul><pre><code>def imShow(path):  import cv2  import matplotlib.pyplot as plt  %matplotlib inline  image = cv2.imread(path)  height, width = image.shape[:2]  resized_image = cv2.resize(image,(3*width, 3*height), interpolation = cv2.INTER_CUBIC)  fig = plt.gcf()  fig.set_size_inches(18, 10)  plt.axis(&quot;off&quot;)  plt.imshow(cv2.cvtColor(resized_image, cv2.COLOR_BGR2RGB))  plt.show()# 上传文件def upload():  from google.colab import files  uploaded = files.upload()   for name, data in uploaded.items():    with open(name, &#39;wb&#39;) as f:      f.write(data)      print (&#39;saved file&#39;, name)# 下载文件  def download(path):  from google.colab import files  files.download(path)</code></pre><h3 id="切换到工作目录-检测实例"><a href="#切换到工作目录-检测实例" class="headerlink" title="切换到工作目录|检测实例"></a>切换到工作目录|检测实例</h3><p>现在其实就有一个好的YOLOv3了，你可以很好的使用这个构建好的网络去检测COCO数据集里面的类别<br>用下面的命令进行检测</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">!</span>./darknet detect <span class="token operator">&lt;</span>path to config<span class="token operator">></span> <span class="token operator">&lt;</span>path to weights<span class="token operator">></span> <span class="token operator">&lt;</span>path to image<span class="token operator">></span></code></pre><p><code>Darknet</code> 自带了一些示例图片</p><p><strong>注意: 检测完成，我们需要显示一下</strong></p><pre class=" language-bash"><code class="language-bash">imShow<span class="token punctuation">(</span><span class="token string">'predictions.jpg'</span><span class="token punctuation">)</span></code></pre><p>OK了，可以显示出来</p><pre><code>%cd /content/darknet!./darknet detect ./cfg/yolov3.cfg yolov3.weights data/dog.jpgimShow(&#39;predictions.jpg&#39;)</code></pre><pre><code>/content/darknet CUDA-version: 10010 (10010), cuDNN: 7.6.5, GPU count: 1   OpenCV version: 3.2.0 compute_capability = 600, cudnn_half = 0 net.optimized_memory = 0 mini_batch = 1, batch = 1, time_steps = 1, train = 0    layer   filters  size/strd(dil)      input                output   0 conv     32       3 x 3/ 1    416 x 416 x   3 -&gt;  416 x 416 x  32 0.299 BF   1 conv     64       3 x 3/ 2    416 x 416 x  32 -&gt;  208 x 208 x  64 1.595 BF   2 conv     32       1 x 1/ 1    208 x 208 x  64 -&gt;  208 x 208 x  32 0.177 BF   3 conv     64       3 x 3/ 1    208 x 208 x  32 -&gt;  208 x 208 x  64 1.595 BF   4 Shortcut Layer: 1,  wt = 0, wn = 0, outputs: 208 x 208 x  64 0.003 BF   5 conv    128       3 x 3/ 2    208 x 208 x  64 -&gt;  104 x 104 x 128 1.595 BF   6 conv     64       1 x 1/ 1    104 x 104 x 128 -&gt;  104 x 104 x  64 0.177 BF   7 conv    128       3 x 3/ 1    104 x 104 x  64 -&gt;  104 x 104 x 128 1.595 BF   8 Shortcut Layer: 5,  wt = 0, wn = 0, outputs: 104 x 104 x 128 0.001 BF   9 conv     64       1 x 1/ 1    104 x 104 x 128 -&gt;  104 x 104 x  64 0.177 BF  10 conv    128       3 x 3/ 1    104 x 104 x  64 -&gt;  104 x 104 x 128 1.595 BF  11 Shortcut Layer: 8,  wt = 0, wn = 0, outputs: 104 x 104 x 128 0.001 BF  12 conv    256       3 x 3/ 2    104 x 104 x 128 -&gt;   52 x  52 x 256 1.595 BF  13 conv    128       1 x 1/ 1     52 x  52 x 256 -&gt;   52 x  52 x 128 0.177 BF  14 conv    256       3 x 3/ 1     52 x  52 x 128 -&gt;   52 x  52 x 256 1.595 BF  15 Shortcut Layer: 12,  wt = 0, wn = 0, outputs:  52 x  52 x 256 0.001 BF  16 conv    128       1 x 1/ 1     52 x  52 x 256 -&gt;   52 x  52 x 128 0.177 BF  17 conv    256       3 x 3/ 1     52 x  52 x 128 -&gt;   52 x  52 x 256 1.595 BF  18 Shortcut Layer: 15,  wt = 0, wn = 0, outputs:  52 x  52 x 256 0.001 BF  19 conv    128       1 x 1/ 1     52 x  52 x 256 -&gt;   52 x  52 x 128 0.177 BF  20 conv    256       3 x 3/ 1     52 x  52 x 128 -&gt;   52 x  52 x 256 1.595 BF  21 Shortcut Layer: 18,  wt = 0, wn = 0, outputs:  52 x  52 x 256 0.001 BF  22 conv    128       1 x 1/ 1     52 x  52 x 256 -&gt;   52 x  52 x 128 0.177 BF  23 conv    256       3 x 3/ 1     52 x  52 x 128 -&gt;   52 x  52 x 256 1.595 BF  24 Shortcut Layer: 21,  wt = 0, wn = 0, outputs:  52 x  52 x 256 0.001 BF  25 conv    128       1 x 1/ 1     52 x  52 x 256 -&gt;   52 x  52 x 128 0.177 BF  26 conv    256       3 x 3/ 1     52 x  52 x 128 -&gt;   52 x  52 x 256 1.595 BF  27 Shortcut Layer: 24,  wt = 0, wn = 0, outputs:  52 x  52 x 256 0.001 BF  28 conv    128       1 x 1/ 1     52 x  52 x 256 -&gt;   52 x  52 x 128 0.177 BF  29 conv    256       3 x 3/ 1     52 x  52 x 128 -&gt;   52 x  52 x 256 1.595 BF  30 Shortcut Layer: 27,  wt = 0, wn = 0, outputs:  52 x  52 x 256 0.001 BF  31 conv    128       1 x 1/ 1     52 x  52 x 256 -&gt;   52 x  52 x 128 0.177 BF  32 conv    256       3 x 3/ 1     52 x  52 x 128 -&gt;   52 x  52 x 256 1.595 BF  33 Shortcut Layer: 30,  wt = 0, wn = 0, outputs:  52 x  52 x 256 0.001 BF  34 conv    128       1 x 1/ 1     52 x  52 x 256 -&gt;   52 x  52 x 128 0.177 BF  35 conv    256       3 x 3/ 1     52 x  52 x 128 -&gt;   52 x  52 x 256 1.595 BF  36 Shortcut Layer: 33,  wt = 0, wn = 0, outputs:  52 x  52 x 256 0.001 BF  37 conv    512       3 x 3/ 2     52 x  52 x 256 -&gt;   26 x  26 x 512 1.595 BF  38 conv    256       1 x 1/ 1     26 x  26 x 512 -&gt;   26 x  26 x 256 0.177 BF  39 conv    512       3 x 3/ 1     26 x  26 x 256 -&gt;   26 x  26 x 512 1.595 BF  40 Shortcut Layer: 37,  wt = 0, wn = 0, outputs:  26 x  26 x 512 0.000 BF  41 conv    256       1 x 1/ 1     26 x  26 x 512 -&gt;   26 x  26 x 256 0.177 BF  42 conv    512       3 x 3/ 1     26 x  26 x 256 -&gt;   26 x  26 x 512 1.595 BF  43 Shortcut Layer: 40,  wt = 0, wn = 0, outputs:  26 x  26 x 512 0.000 BF  44 conv    256       1 x 1/ 1     26 x  26 x 512 -&gt;   26 x  26 x 256 0.177 BF  45 conv    512       3 x 3/ 1     26 x  26 x 256 -&gt;   26 x  26 x 512 1.595 BF  46 Shortcut Layer: 43,  wt = 0, wn = 0, outputs:  26 x  26 x 512 0.000 BF  47 conv    256       1 x 1/ 1     26 x  26 x 512 -&gt;   26 x  26 x 256 0.177 BF  48 conv    512       3 x 3/ 1     26 x  26 x 256 -&gt;   26 x  26 x 512 1.595 BF  49 Shortcut Layer: 46,  wt = 0, wn = 0, outputs:  26 x  26 x 512 0.000 BF  50 conv    256       1 x 1/ 1     26 x  26 x 512 -&gt;   26 x  26 x 256 0.177 BF  51 conv    512       3 x 3/ 1     26 x  26 x 256 -&gt;   26 x  26 x 512 1.595 BF  52 Shortcut Layer: 49,  wt = 0, wn = 0, outputs:  26 x  26 x 512 0.000 BF  53 conv    256       1 x 1/ 1     26 x  26 x 512 -&gt;   26 x  26 x 256 0.177 BF  54 conv    512       3 x 3/ 1     26 x  26 x 256 -&gt;   26 x  26 x 512 1.595 BF  55 Shortcut Layer: 52,  wt = 0, wn = 0, outputs:  26 x  26 x 512 0.000 BF  56 conv    256       1 x 1/ 1     26 x  26 x 512 -&gt;   26 x  26 x 256 0.177 BF  57 conv    512       3 x 3/ 1     26 x  26 x 256 -&gt;   26 x  26 x 512 1.595 BF  58 Shortcut Layer: 55,  wt = 0, wn = 0, outputs:  26 x  26 x 512 0.000 BF  59 conv    256       1 x 1/ 1     26 x  26 x 512 -&gt;   26 x  26 x 256 0.177 BF  60 conv    512       3 x 3/ 1     26 x  26 x 256 -&gt;   26 x  26 x 512 1.595 BF  61 Shortcut Layer: 58,  wt = 0, wn = 0, outputs:  26 x  26 x 512 0.000 BF  62 conv   1024       3 x 3/ 2     26 x  26 x 512 -&gt;   13 x  13 x1024 1.595 BF  63 conv    512       1 x 1/ 1     13 x  13 x1024 -&gt;   13 x  13 x 512 0.177 BF  64 conv   1024       3 x 3/ 1     13 x  13 x 512 -&gt;   13 x  13 x1024 1.595 BF  65 Shortcut Layer: 62,  wt = 0, wn = 0, outputs:  13 x  13 x1024 0.000 BF  66 conv    512       1 x 1/ 1     13 x  13 x1024 -&gt;   13 x  13 x 512 0.177 BF  67 conv   1024       3 x 3/ 1     13 x  13 x 512 -&gt;   13 x  13 x1024 1.595 BF  68 Shortcut Layer: 65,  wt = 0, wn = 0, outputs:  13 x  13 x1024 0.000 BF  69 conv    512       1 x 1/ 1     13 x  13 x1024 -&gt;   13 x  13 x 512 0.177 BF  70 conv   1024       3 x 3/ 1     13 x  13 x 512 -&gt;   13 x  13 x1024 1.595 BF  71 Shortcut Layer: 68,  wt = 0, wn = 0, outputs:  13 x  13 x1024 0.000 BF  72 conv    512       1 x 1/ 1     13 x  13 x1024 -&gt;   13 x  13 x 512 0.177 BF  73 conv   1024       3 x 3/ 1     13 x  13 x 512 -&gt;   13 x  13 x1024 1.595 BF  74 Shortcut Layer: 71,  wt = 0, wn = 0, outputs:  13 x  13 x1024 0.000 BF  75 conv    512       1 x 1/ 1     13 x  13 x1024 -&gt;   13 x  13 x 512 0.177 BF  76 conv   1024       3 x 3/ 1     13 x  13 x 512 -&gt;   13 x  13 x1024 1.595 BF  77 conv    512       1 x 1/ 1     13 x  13 x1024 -&gt;   13 x  13 x 512 0.177 BF  78 conv   1024       3 x 3/ 1     13 x  13 x 512 -&gt;   13 x  13 x1024 1.595 BF  79 conv    512       1 x 1/ 1     13 x  13 x1024 -&gt;   13 x  13 x 512 0.177 BF  80 conv   1024       3 x 3/ 1     13 x  13 x 512 -&gt;   13 x  13 x1024 1.595 BF  81 conv    255       1 x 1/ 1     13 x  13 x1024 -&gt;   13 x  13 x 255 0.088 BF  82 yolo[yolo] params: iou loss: mse (2), iou_norm: 0.75, cls_norm: 1.00, scale_x_y: 1.00  83 route  79                                    -&gt;   13 x  13 x 512   84 conv    256       1 x 1/ 1     13 x  13 x 512 -&gt;   13 x  13 x 256 0.044 BF  85 upsample                 2x    13 x  13 x 256 -&gt;   26 x  26 x 256  86 route  85 61                                -&gt;   26 x  26 x 768   87 conv    256       1 x 1/ 1     26 x  26 x 768 -&gt;   26 x  26 x 256 0.266 BF  88 conv    512       3 x 3/ 1     26 x  26 x 256 -&gt;   26 x  26 x 512 1.595 BF  89 conv    256       1 x 1/ 1     26 x  26 x 512 -&gt;   26 x  26 x 256 0.177 BF  90 conv    512       3 x 3/ 1     26 x  26 x 256 -&gt;   26 x  26 x 512 1.595 BF  91 conv    256       1 x 1/ 1     26 x  26 x 512 -&gt;   26 x  26 x 256 0.177 BF  92 conv    512       3 x 3/ 1     26 x  26 x 256 -&gt;   26 x  26 x 512 1.595 BF  93 conv    255       1 x 1/ 1     26 x  26 x 512 -&gt;   26 x  26 x 255 0.177 BF  94 yolo[yolo] params: iou loss: mse (2), iou_norm: 0.75, cls_norm: 1.00, scale_x_y: 1.00  95 route  91                                    -&gt;   26 x  26 x 256   96 conv    128       1 x 1/ 1     26 x  26 x 256 -&gt;   26 x  26 x 128 0.044 BF  97 upsample                 2x    26 x  26 x 128 -&gt;   52 x  52 x 128  98 route  97 36                                -&gt;   52 x  52 x 384   99 conv    128       1 x 1/ 1     52 x  52 x 384 -&gt;   52 x  52 x 128 0.266 BF 100 conv    256       3 x 3/ 1     52 x  52 x 128 -&gt;   52 x  52 x 256 1.595 BF 101 conv    128       1 x 1/ 1     52 x  52 x 256 -&gt;   52 x  52 x 128 0.177 BF 102 conv    256       3 x 3/ 1     52 x  52 x 128 -&gt;   52 x  52 x 256 1.595 BF 103 conv    128       1 x 1/ 1     52 x  52 x 256 -&gt;   52 x  52 x 128 0.177 BF 104 conv    256       3 x 3/ 1     52 x  52 x 128 -&gt;   52 x  52 x 256 1.595 BF 105 conv    255       1 x 1/ 1     52 x  52 x 256 -&gt;   52 x  52 x 255 0.353 BF 106 yolo[yolo] params: iou loss: mse (2), iou_norm: 0.75, cls_norm: 1.00, scale_x_y: 1.00Total BFLOPS 65.879 avg_outputs = 532444  Allocate additional workspace_size = 52.43 MB Loading weights from yolov3.weights... seen 64, trained: 32013 K-images (500 Kilo-batches_64) Done! Loaded 107 layers from weights-file data/dog.jpg: Predicted in 18.457000 milli-seconds.bicycle: 99%dog: 100%truck: 94%Unable to init server: Could not connect: Connection refused(predictions:3921): Gtk-[1;33mWARNING[0m **: [34m13:52:20.479[0m: cannot open display: </code></pre><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200419114358.png" alt=""></p><p>这里是为了代码块全部运行的时候能够停在这里</p><p>上面的执行素对贼快！！ </p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200418215333.png" alt=""></p><pre><code># 到这里抛出一个异常assert False</code></pre><pre><code>---------------------------------------------------------------------------AssertionError                            Traceback (most recent call last)&lt;ipython-input-49-a871fdc9ebee&gt; in &lt;module&gt;()----&gt; 1 assert FalseAssertionError: </code></pre><h3 id="通过上传照片进行检测"><a href="#通过上传照片进行检测" class="headerlink" title="通过上传照片进行检测"></a>通过上传照片进行检测</h3><p>本地文件下面写好了upload()函数，可以运行上传文件。</p><p>也可以点击左边功能框的 【上传】 选择图片上传到服务器</p><p>但是注意，上传的文件默认在根目录，不再上述工作目录</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">!</span>./darknet detect cfg/yolov3.cfg yolov3.weights <span class="token punctuation">..</span>/<span class="token operator">&lt;</span>your image name<span class="token operator">></span></code></pre><pre><code>#上传文件%cd ..%pwdupload()</code></pre><pre><code># 进入工作路径%pwd %cd /content/darknet!./darknet detect cfg/yolov3.cfg yolov3.weights /messi.jpgimShow(&#39;predictions.jpg&#39;)</code></pre><pre><code>/content/darknet CUDA-version: 10010 (10010), cuDNN: 7.6.5, GPU count: 1   OpenCV version: 3.2.0 compute_capability = 600, cudnn_half = 0 net.optimized_memory = 0 mini_batch = 1, batch = 1, time_steps = 1, train = 0    layer   filters  size/strd(dil)      input                output   0 conv     32       3 x 3/ 1    416 x 416 x   3 -&gt;  416 x 416 x  32 0.299 BF   1 conv     64       3 x 3/ 2    416 x 416 x  32 -&gt;  208 x 208 x  64 1.595 BF   2 conv     32       1 x 1/ 1    208 x 208 x  64 -&gt;  208 x 208 x  32 0.177 BF   3 conv     64       3 x 3/ 1    208 x 208 x  32 -&gt;  208 x 208 x  64 1.595 BF   4 Shortcut Layer: 1,  wt = 0, wn = 0, outputs: 208 x 208 x  64 0.003 BF   5 conv    128       3 x 3/ 2    208 x 208 x  64 -&gt;  104 x 104 x 128 1.595 BF   6 conv     64       1 x 1/ 1    104 x 104 x 128 -&gt;  104 x 104 x  64 0.177 BF   7 conv    128       3 x 3/ 1    104 x 104 x  64 -&gt;  104 x 104 x 128 1.595 BF   8 Shortcut Layer: 5,  wt = 0, wn = 0, outputs: 104 x 104 x 128 0.001 BF   9 conv     64       1 x 1/ 1    104 x 104 x 128 -&gt;  104 x 104 x  64 0.177 BF  10 conv    128       3 x 3/ 1    104 x 104 x  64 -&gt;  104 x 104 x 128 1.595 BF  11 Shortcut Layer: 8,  wt = 0, wn = 0, outputs: 104 x 104 x 128 0.001 BF  12 conv    256       3 x 3/ 2    104 x 104 x 128 -&gt;   52 x  52 x 256 1.595 BF  13 conv    128       1 x 1/ 1     52 x  52 x 256 -&gt;   52 x  52 x 128 0.177 BF  14 conv    256       3 x 3/ 1     52 x  52 x 128 -&gt;   52 x  52 x 256 1.595 BF  15 Shortcut Layer: 12,  wt = 0, wn = 0, outputs:  52 x  52 x 256 0.001 BF  16 conv    128       1 x 1/ 1     52 x  52 x 256 -&gt;   52 x  52 x 128 0.177 BF  17 conv    256       3 x 3/ 1     52 x  52 x 128 -&gt;   52 x  52 x 256 1.595 BF  18 Shortcut Layer: 15,  wt = 0, wn = 0, outputs:  52 x  52 x 256 0.001 BF  19 conv    128       1 x 1/ 1     52 x  52 x 256 -&gt;   52 x  52 x 128 0.177 BF  20 conv    256       3 x 3/ 1     52 x  52 x 128 -&gt;   52 x  52 x 256 1.595 BF  21 Shortcut Layer: 18,  wt = 0, wn = 0, outputs:  52 x  52 x 256 0.001 BF  22 conv    128       1 x 1/ 1     52 x  52 x 256 -&gt;   52 x  52 x 128 0.177 BF  23 conv    256       3 x 3/ 1     52 x  52 x 128 -&gt;   52 x  52 x 256 1.595 BF  24 Shortcut Layer: 21,  wt = 0, wn = 0, outputs:  52 x  52 x 256 0.001 BF  25 conv    128       1 x 1/ 1     52 x  52 x 256 -&gt;   52 x  52 x 128 0.177 BF  26 conv    256       3 x 3/ 1     52 x  52 x 128 -&gt;   52 x  52 x 256 1.595 BF  27 Shortcut Layer: 24,  wt = 0, wn = 0, outputs:  52 x  52 x 256 0.001 BF  28 conv    128       1 x 1/ 1     52 x  52 x 256 -&gt;   52 x  52 x 128 0.177 BF  29 conv    256       3 x 3/ 1     52 x  52 x 128 -&gt;   52 x  52 x 256 1.595 BF  30 Shortcut Layer: 27,  wt = 0, wn = 0, outputs:  52 x  52 x 256 0.001 BF  31 conv    128       1 x 1/ 1     52 x  52 x 256 -&gt;   52 x  52 x 128 0.177 BF  32 conv    256       3 x 3/ 1     52 x  52 x 128 -&gt;   52 x  52 x 256 1.595 BF  33 Shortcut Layer: 30,  wt = 0, wn = 0, outputs:  52 x  52 x 256 0.001 BF  34 conv    128       1 x 1/ 1     52 x  52 x 256 -&gt;   52 x  52 x 128 0.177 BF  35 conv    256       3 x 3/ 1     52 x  52 x 128 -&gt;   52 x  52 x 256 1.595 BF  36 Shortcut Layer: 33,  wt = 0, wn = 0, outputs:  52 x  52 x 256 0.001 BF  37 conv    512       3 x 3/ 2     52 x  52 x 256 -&gt;   26 x  26 x 512 1.595 BF  38 conv    256       1 x 1/ 1     26 x  26 x 512 -&gt;   26 x  26 x 256 0.177 BF  39 conv    512       3 x 3/ 1     26 x  26 x 256 -&gt;   26 x  26 x 512 1.595 BF  40 Shortcut Layer: 37,  wt = 0, wn = 0, outputs:  26 x  26 x 512 0.000 BF  41 conv    256       1 x 1/ 1     26 x  26 x 512 -&gt;   26 x  26 x 256 0.177 BF  42 conv    512       3 x 3/ 1     26 x  26 x 256 -&gt;   26 x  26 x 512 1.595 BF  43 Shortcut Layer: 40,  wt = 0, wn = 0, outputs:  26 x  26 x 512 0.000 BF  44 conv    256       1 x 1/ 1     26 x  26 x 512 -&gt;   26 x  26 x 256 0.177 BF  45 conv    512       3 x 3/ 1     26 x  26 x 256 -&gt;   26 x  26 x 512 1.595 BF  46 Shortcut Layer: 43,  wt = 0, wn = 0, outputs:  26 x  26 x 512 0.000 BF  47 conv    256       1 x 1/ 1     26 x  26 x 512 -&gt;   26 x  26 x 256 0.177 BF  48 conv    512       3 x 3/ 1     26 x  26 x 256 -&gt;   26 x  26 x 512 1.595 BF  49 Shortcut Layer: 46,  wt = 0, wn = 0, outputs:  26 x  26 x 512 0.000 BF  50 conv    256       1 x 1/ 1     26 x  26 x 512 -&gt;   26 x  26 x 256 0.177 BF  51 conv    512       3 x 3/ 1     26 x  26 x 256 -&gt;   26 x  26 x 512 1.595 BF  52 Shortcut Layer: 49,  wt = 0, wn = 0, outputs:  26 x  26 x 512 0.000 BF  53 conv    256       1 x 1/ 1     26 x  26 x 512 -&gt;   26 x  26 x 256 0.177 BF  54 conv    512       3 x 3/ 1     26 x  26 x 256 -&gt;   26 x  26 x 512 1.595 BF  55 Shortcut Layer: 52,  wt = 0, wn = 0, outputs:  26 x  26 x 512 0.000 BF  56 conv    256       1 x 1/ 1     26 x  26 x 512 -&gt;   26 x  26 x 256 0.177 BF  57 conv    512       3 x 3/ 1     26 x  26 x 256 -&gt;   26 x  26 x 512 1.595 BF  58 Shortcut Layer: 55,  wt = 0, wn = 0, outputs:  26 x  26 x 512 0.000 BF  59 conv    256       1 x 1/ 1     26 x  26 x 512 -&gt;   26 x  26 x 256 0.177 BF  60 conv    512       3 x 3/ 1     26 x  26 x 256 -&gt;   26 x  26 x 512 1.595 BF  61 Shortcut Layer: 58,  wt = 0, wn = 0, outputs:  26 x  26 x 512 0.000 BF  62 conv   1024       3 x 3/ 2     26 x  26 x 512 -&gt;   13 x  13 x1024 1.595 BF  63 conv    512       1 x 1/ 1     13 x  13 x1024 -&gt;   13 x  13 x 512 0.177 BF  64 conv   1024       3 x 3/ 1     13 x  13 x 512 -&gt;   13 x  13 x1024 1.595 BF  65 Shortcut Layer: 62,  wt = 0, wn = 0, outputs:  13 x  13 x1024 0.000 BF  66 conv    512       1 x 1/ 1     13 x  13 x1024 -&gt;   13 x  13 x 512 0.177 BF  67 conv   1024       3 x 3/ 1     13 x  13 x 512 -&gt;   13 x  13 x1024 1.595 BF  68 Shortcut Layer: 65,  wt = 0, wn = 0, outputs:  13 x  13 x1024 0.000 BF  69 conv    512       1 x 1/ 1     13 x  13 x1024 -&gt;   13 x  13 x 512 0.177 BF  70 conv   1024       3 x 3/ 1     13 x  13 x 512 -&gt;   13 x  13 x1024 1.595 BF  71 Shortcut Layer: 68,  wt = 0, wn = 0, outputs:  13 x  13 x1024 0.000 BF  72 conv    512       1 x 1/ 1     13 x  13 x1024 -&gt;   13 x  13 x 512 0.177 BF  73 conv   1024       3 x 3/ 1     13 x  13 x 512 -&gt;   13 x  13 x1024 1.595 BF  74 Shortcut Layer: 71,  wt = 0, wn = 0, outputs:  13 x  13 x1024 0.000 BF  75 conv    512       1 x 1/ 1     13 x  13 x1024 -&gt;   13 x  13 x 512 0.177 BF  76 conv   1024       3 x 3/ 1     13 x  13 x 512 -&gt;   13 x  13 x1024 1.595 BF  77 conv    512       1 x 1/ 1     13 x  13 x1024 -&gt;   13 x  13 x 512 0.177 BF  78 conv   1024       3 x 3/ 1     13 x  13 x 512 -&gt;   13 x  13 x1024 1.595 BF  79 conv    512       1 x 1/ 1     13 x  13 x1024 -&gt;   13 x  13 x 512 0.177 BF  80 conv   1024       3 x 3/ 1     13 x  13 x 512 -&gt;   13 x  13 x1024 1.595 BF  81 conv    255       1 x 1/ 1     13 x  13 x1024 -&gt;   13 x  13 x 255 0.088 BF  82 yolo[yolo] params: iou loss: mse (2), iou_norm: 0.75, cls_norm: 1.00, scale_x_y: 1.00  83 route  79                                    -&gt;   13 x  13 x 512   84 conv    256       1 x 1/ 1     13 x  13 x 512 -&gt;   13 x  13 x 256 0.044 BF  85 upsample                 2x    13 x  13 x 256 -&gt;   26 x  26 x 256  86 route  85 61                                -&gt;   26 x  26 x 768   87 conv    256       1 x 1/ 1     26 x  26 x 768 -&gt;   26 x  26 x 256 0.266 BF  88 conv    512       3 x 3/ 1     26 x  26 x 256 -&gt;   26 x  26 x 512 1.595 BF  89 conv    256       1 x 1/ 1     26 x  26 x 512 -&gt;   26 x  26 x 256 0.177 BF  90 conv    512       3 x 3/ 1     26 x  26 x 256 -&gt;   26 x  26 x 512 1.595 BF  91 conv    256       1 x 1/ 1     26 x  26 x 512 -&gt;   26 x  26 x 256 0.177 BF  92 conv    512       3 x 3/ 1     26 x  26 x 256 -&gt;   26 x  26 x 512 1.595 BF  93 conv    255       1 x 1/ 1     26 x  26 x 512 -&gt;   26 x  26 x 255 0.177 BF  94 yolo[yolo] params: iou loss: mse (2), iou_norm: 0.75, cls_norm: 1.00, scale_x_y: 1.00  95 route  91                                    -&gt;   26 x  26 x 256   96 conv    128       1 x 1/ 1     26 x  26 x 256 -&gt;   26 x  26 x 128 0.044 BF  97 upsample                 2x    26 x  26 x 128 -&gt;   52 x  52 x 128  98 route  97 36                                -&gt;   52 x  52 x 384   99 conv    128       1 x 1/ 1     52 x  52 x 384 -&gt;   52 x  52 x 128 0.266 BF 100 conv    256       3 x 3/ 1     52 x  52 x 128 -&gt;   52 x  52 x 256 1.595 BF 101 conv    128       1 x 1/ 1     52 x  52 x 256 -&gt;   52 x  52 x 128 0.177 BF 102 conv    256       3 x 3/ 1     52 x  52 x 128 -&gt;   52 x  52 x 256 1.595 BF 103 conv    128       1 x 1/ 1     52 x  52 x 256 -&gt;   52 x  52 x 128 0.177 BF 104 conv    256       3 x 3/ 1     52 x  52 x 128 -&gt;   52 x  52 x 256 1.595 BF 105 conv    255       1 x 1/ 1     52 x  52 x 256 -&gt;   52 x  52 x 255 0.353 BF 106 yolo[yolo] params: iou loss: mse (2), iou_norm: 0.75, cls_norm: 1.00, scale_x_y: 1.00Total BFLOPS 65.879 avg_outputs = 532444  Allocate additional workspace_size = 52.43 MB Loading weights from yolov3.weights... seen 64, trained: 32013 K-images (500 Kilo-batches_64) Done! Loaded 107 layers from weights-file /messi.jpg: Predicted in 18.397000 milli-seconds.person: 100%frisbee: 37%person: 43%person: 100%person: 99%Unable to init server: Could not connect: Connection refused(predictions:3939): Gtk-[1;33mWARNING[0m **: [34m13:52:46.487[0m: cannot open display: </code></pre><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200419114446.png" alt=""></p><h3 id="Google-Drive"><a href="#Google-Drive" class="headerlink" title="Google Drive"></a>Google Drive</h3><p>链接Drive，使用以下命令</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">!</span>./darknet detect cfg/yolov3.cfg yolov3.weights /mydrive/<span class="token operator">&lt;</span>path to image<span class="token operator">></span></code></pre><p>就OK了</p><p>建议在Google Drive里面搞一个 ‘images’文件夹</p><p>当输入以下命令后，需要点击网址，确认信息，并且还要将秘钥复制到下面的框中</p><pre class=" language-bash"><code class="language-bash">%cd <span class="token punctuation">..</span>from google.colab <span class="token function">import</span> drivedrive.mount<span class="token punctuation">(</span><span class="token string">'/content/gdrive'</span><span class="token punctuation">)</span></code></pre><pre><code>%cd ..from google.colab import drivedrive.mount(&#39;/content/gdrive&#39;)</code></pre><h3 id="建立软连接"><a href="#建立软连接" class="headerlink" title="建立软连接"></a>建立软连接</h3><pre><code># 这其实就是一个连接!ln -s /content/gdrive/My\ Drive/ /mydrive!ls /mydrive</code></pre><pre><code>%pwd%cd /%cd /mydrive/%ls%cd images/%ls%cd samples/%ls%pwd</code></pre><h3 id="使用自己的image进行检测"><a href="#使用自己的image进行检测" class="headerlink" title="使用自己的image进行检测"></a>使用自己的image进行检测</h3><pre><code># 进入工作路径%pwd %cd /content/darknet%pwd!./darknet detect cfg/yolov3.cfg yolov3.weights /mydrive/images/samples/eagle.jpgimShow(&#39;predictions.jpg&#39;)</code></pre><h3 id="文件转储"><a href="#文件转储" class="headerlink" title="文件转储"></a>文件转储</h3><p>因为colab每次免费使用12小时，所以最好将文件转储到别的地方  </p><ul><li>下载到本地 <code>download</code></li><li>复制到Google Driver 中</li></ul><pre><code># 下载文件到本地download(&#39;predictions.jpg&#39;)</code></pre><pre><code># GOOGLE DRIVE!cp predictions.jpg /mydrive/det.jpg</code></pre><p>参考：<br><a href="https://github.com/ZhangYouyi-Lab/ZhangYouyi-Lab/blob/master/YOLOv3_Colab.ipynb" target="_blank" rel="noopener">https://github.com/ZhangYouyi-Lab/ZhangYouyi-Lab/blob/master/YOLOv3_Colab.ipynb</a></p>]]></content>
      
      
      <categories>
          
          <category> pytorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>08-pytorch-循环神经网络</title>
      <link href="/2020/04/17/20200417-134000/"/>
      <url>/2020/04/17/20200417-134000/</url>
      
        <content type="html"><![CDATA[<h2 id="时间序列表示"><a href="#时间序列表示" class="headerlink" title="时间序列表示"></a>时间序列表示</h2><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417134133.png" alt=""></p><p>pytorch中不支持<code>String</code>的表示</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417134200.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417134412.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417134632.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417134937.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417135119.png" alt=""></p><p>不好之处：稀疏矩阵！！维度太高</p><p>基本不适用了</p><p>NLP常用的编码方法:</p><ul><li><code>word2vel</code></li><li><code>glove</code></li></ul><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417135435.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417135723.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417140021.png" alt=""></p><p>比如：一句话有100个单词，一共有3句话，时间戳每移动一次，输入 [3,1]</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417140600.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417140707.png" alt=""></p><h2 id="RNN原理"><a href="#RNN原理" class="headerlink" title="RNN原理"></a>RNN原理</h2><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417140842.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417140917.png" alt=""></p><p>改进，用同一个线性层处理</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417140956.png" alt=""></p><p>局部信息共享！！</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417141216.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417141344.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417141425.png" alt=""></p><p>输出由自己决定，可以通过最后一个h，也可以通过聚合h，得到最后的输出</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417142008.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417142329.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417142422.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417142512.png" alt=""></p><h2 id="RNN-Layer使用"><a href="#RNN-Layer使用" class="headerlink" title="RNN Layer使用"></a>RNN Layer使用</h2><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417142728.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417143425.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417143536.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417143741.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417144345.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417144556.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417144847.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417144921.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417144956.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417145100.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417145144.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417145228.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417145303.png" alt=""></p><h2 id="时间序列预测"><a href="#时间序列预测" class="headerlink" title="时间序列预测"></a>时间序列预测</h2><p>波形预测</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417145328.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417145555.png" alt=""></p><h2 id="RNN训练难题"><a href="#RNN训练难题" class="headerlink" title="RNN训练难题"></a>RNN训练难题</h2><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417151231.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417151256.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417151310.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417151415.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417151437.png" alt=""></p><p>哈哈哈！！ </p><p>鸡汤：</p><p>你每一天比前一天努力一点，到第365天那就相当相当努力了！</p><p>你每一天比前一天颓废一点，到第365天那就相当相当颓废了！</p><p>基本上不可能实现！！</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417151650.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417151841.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417151927.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417152042.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417152116.png" alt=""></p><h2 id="LSTM"><a href="#LSTM" class="headerlink" title="LSTM"></a>LSTM</h2><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417152337.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417152638.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417152721.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417152912.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417153020.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417153136.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417153231.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417153337.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417153350.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417153430.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417153514.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417153533.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417153627.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417153739.png" alt=""></p><h2 id="LSTM的使用"><a href="#LSTM的使用" class="headerlink" title="LSTM的使用"></a>LSTM的使用</h2><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417153843.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417153926.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417154020.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417154107.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417154120.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417154200.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417154213.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417154245.png" alt=""></p><h2 id="情感分类"><a href="#情感分类" class="headerlink" title="情感分类"></a>情感分类</h2><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417154341.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417154518.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417154536.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417154717.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417154959.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417155020.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417155053.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> pytorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>07-pytorch-神经网络</title>
      <link href="/2020/04/17/20200417-102000/"/>
      <url>/2020/04/17/20200417-102000/</url>
      
        <content type="html"><![CDATA[<h2 id="神经网络和全连接层"><a href="#神经网络和全连接层" class="headerlink" title="神经网络和全连接层"></a>神经网络和全连接层</h2><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417102412.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417102509.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417102727.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417102934.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417103101.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417103137.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417103200.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417103224.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417103315.png" alt=""></p><h2 id="交叉熵"><a href="#交叉熵" class="headerlink" title="交叉熵"></a>交叉熵</h2><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417103410.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417103726.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417103857.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417104113.png" alt=""></p><p>优化的目标是:<code>KL Divergence</code></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417111829.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417111915.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417112147.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417112251.png" alt=""></p><h2 id="多分类问题"><a href="#多分类问题" class="headerlink" title="多分类问题"></a>多分类问题</h2><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417112430.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417112529.png" alt=""></p><h2 id="激活函数和GPU加速"><a href="#激活函数和GPU加速" class="headerlink" title="激活函数和GPU加速"></a>激活函数和GPU加速</h2><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417112744.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417113650.png" alt=""></p><p>一定程度上解决了梯度离散和梯度爆炸的情况！</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417113811.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417113831.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417113859.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417113916.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417113929.png" alt=""></p><p>.cuda 不推荐使用！</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417114148.png" alt=""></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417114257.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417114614.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417114812.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417114911.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417114950.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417115019.png" alt=""></p><h2 id="Visdom可视化"><a href="#Visdom可视化" class="headerlink" title="Visdom可视化"></a>Visdom可视化</h2><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417115059.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417115206.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417115219.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417115258.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417115326.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417115447.png" alt=""></p><p>最好采用源文件安装！！</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417115531.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417115552.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417115731.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417115744.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417115815.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417115827.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417115857.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417115910.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> pytorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>06-pytorch-梯度</title>
      <link href="/2020/04/16/20200416-162400/"/>
      <url>/2020/04/16/20200416-162400/</url>
      
        <content type="html"><![CDATA[<h2 id="什么叫做梯度"><a href="#什么叫做梯度" class="headerlink" title="什么叫做梯度"></a>什么叫做梯度</h2><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416163040.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416163242.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416163505.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/aaaaaa.gif" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416163635.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416163739.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416164336.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416164529.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416164609.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416164935.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416175109.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416175324.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416175613.png" alt=""></p><p>鞍点比局部最小值点更可怕！！</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416175710.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/aaaaaa3.gif" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416175845.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/aaaaaa4.gif" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416180357.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/aaaaaa5.gif" alt=""></p><p>增加一个惯性！！</p><h2 id="常用函数的梯度"><a href="#常用函数的梯度" class="headerlink" title="常用函数的梯度"></a>常用函数的梯度</h2><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416193106.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416193155.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416193230.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416193308.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416193438.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416193534.png" alt=""></p><h2 id="激活函数及其梯度"><a href="#激活函数及其梯度" class="headerlink" title="激活函数及其梯度"></a>激活函数及其梯度</h2><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416193905.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416194302.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416194453.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416194618.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416195604.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416195904.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416200216.png" alt=" "></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416200301.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416200407.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416200546.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416200619.png" alt=""></p><h2 id="LOSS以及LOSS的梯度"><a href="#LOSS以及LOSS的梯度" class="headerlink" title="LOSS以及LOSS的梯度"></a>LOSS以及LOSS的梯度</h2><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416200652.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416200839.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416200950.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416201619.png" alt=""></p><p>参数一开始要设置需要导数信息</p><p>或者一开始不设置，在后面要更新下参数需要导数信息</p><p>参数更新以后，要重新运行下计算图！！ 才可以得到正确的结果</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416202125.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416202203.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416215004.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417083537.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417083611.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417083708.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417083947.png" alt=""></p><h2 id="感知机"><a href="#感知机" class="headerlink" title="感知机"></a>感知机</h2><h3 id="单层感知机模型"><a href="#单层感知机模型" class="headerlink" title="单层感知机模型"></a>单层感知机模型</h3><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417084052.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417084551.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417084814.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417084835.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417085025.png" alt=""></p><p><strong>！！！！ 注意Loss是一个标量！</strong></p><h3 id="多层感知机"><a href="#多层感知机" class="headerlink" title="多层感知机"></a>多层感知机</h3><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417085659.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417085830.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417090631.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417090648.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417090833.png" alt=""></p><h2 id="链式法则"><a href="#链式法则" class="headerlink" title="链式法则"></a>链式法则</h2><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417090934.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417091244.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417091305.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417091339.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417091454.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417091637.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417091743.png" alt=""></p><h2 id="MLP反向传播"><a href="#MLP反向传播" class="headerlink" title="MLP反向传播"></a>MLP反向传播</h2><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417091836.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417091857.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417092009.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417092944.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417093009.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417093136.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417093329.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417093359.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417093410.png" alt=""></p><h2 id="2D函数优化"><a href="#2D函数优化" class="headerlink" title="2D函数优化"></a>2D函数优化</h2><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417093458.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417093511.png" alt=""></p><p>测试优化器的好坏！！</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417094010.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200417094250.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> pytorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>05-pytorch-进阶知识</title>
      <link href="/2020/04/16/20200416-160000/"/>
      <url>/2020/04/16/20200416-160000/</url>
      
        <content type="html"><![CDATA[<h2 id="拼接与拆分操作"><a href="#拼接与拆分操作" class="headerlink" title="拼接与拆分操作"></a>拼接与拆分操作</h2><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416142544.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416142626.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416142839.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416143018.png" alt=""></p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span>b <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>c <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span>dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>c <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">]</span><span class="token punctuation">,</span>dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>a1 <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">)</span>a2 <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">[</span>a1<span class="token punctuation">,</span>a2<span class="token punctuation">]</span><span class="token punctuation">,</span>dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>shape<span class="token punctuation">)</span>a1 <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">)</span>a2 <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">[</span>a1<span class="token punctuation">,</span>a2<span class="token punctuation">]</span><span class="token punctuation">,</span>dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">[</span>a1<span class="token punctuation">,</span>a2<span class="token punctuation">]</span><span class="token punctuation">,</span>dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""torch.Size([4, 32, 8])torch.Size([5, 32, 8])torch.Size([9, 32, 8])torch.Size([9, 32, 8])torch.Size([9, 3, 32, 32])RuntimeError: invalid argument 0: Sizes of tensors must match except in dimension 0. """</span></code></pre><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416150642.png" alt=""></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 参数必须完全匹配</span>a1 <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">)</span>a2 <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>stack<span class="token punctuation">(</span><span class="token punctuation">[</span>a1<span class="token punctuation">,</span>a2<span class="token punctuation">]</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>shape<span class="token punctuation">)</span></code></pre><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416150751.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416151030.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416151115.png" alt=""></p><pre class=" language-python"><code class="language-python">b <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span>a <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> b<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>c <span class="token operator">=</span> torch<span class="token punctuation">.</span>stack<span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">]</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>aa<span class="token punctuation">,</span>bb <span class="token operator">=</span> torch<span class="token punctuation">.</span>split<span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>aa<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> bb<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>aa<span class="token punctuation">,</span> bb <span class="token operator">=</span> torch<span class="token punctuation">.</span>split<span class="token punctuation">(</span>c<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>aa<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> bb<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""torch.Size([32, 8]) torch.Size([32, 8])torch.Size([2, 32, 8])torch.Size([1, 32, 8]) torch.Size([1, 32, 8])torch.Size([2, 10, 8]) torch.Size([2, 22, 8])"""</span></code></pre><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416151152.png" alt=""></p><pre class=" language-python"><code class="language-python">b <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span>a <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> b<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>c <span class="token operator">=</span> torch<span class="token punctuation">.</span>stack<span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">]</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>aa<span class="token punctuation">,</span>bb <span class="token operator">=</span> torch<span class="token punctuation">.</span>chunk<span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>aa<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> bb<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>aa<span class="token punctuation">,</span>bb <span class="token operator">=</span> torch<span class="token punctuation">.</span>chunk<span class="token punctuation">(</span>c<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>aa<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> bb<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""torch.Size([32, 8]) torch.Size([32, 8])torch.Size([2, 32, 8])torch.Size([1, 32, 8]) torch.Size([1, 32, 8])torch.Size([2, 16, 8]) torch.Size([2, 16, 8])"""</span></code></pre><h3 id="矩阵的运算"><a href="#矩阵的运算" class="headerlink" title="矩阵的运算"></a>矩阵的运算</h3><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416151220.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416151344.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416151833.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416152134.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416152511.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416152626.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416152719.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416152800.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416152921.png" alt=""></p><h3 id="统计属性"><a href="#统计属性" class="headerlink" title="统计属性"></a>统计属性</h3><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416152948.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416153106.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416153120.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416153308.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416153517.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416153629.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416153935.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416154323.png" alt=""></p><h3 id="高阶操作"><a href="#高阶操作" class="headerlink" title="高阶操作"></a>高阶操作</h3><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416160319.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416161433.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416161716.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416162004.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416162131.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416162412.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> pytorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11-数据结构Java版-单链表模拟栈实现</title>
      <link href="/2020/04/16/20200416-120027/"/>
      <url>/2020/04/16/20200416-120027/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/homewyk/cloudimg/raw/master/images.jpg" alt=""></p><h2 id="单链表模拟栈"><a href="#单链表模拟栈" class="headerlink" title="单链表模拟栈"></a>单链表模拟栈</h2><p>最主要的思路实现：</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200419094840.png" alt=""></p><p>就是push的节点放在头结点后的位置，pop的时候直接把头结点的next连接到后面，jvm会启动垃圾回收机制回收pop的node</p><h3 id="详细思路"><a href="#详细思路" class="headerlink" title="详细思路"></a>详细思路</h3><ul><li><p>结点定义：</p><ul><li><code>data</code>：<ul><li>在头结点中表示入栈的节点总数 </li><li>在后续节点中表示其节点内容</li></ul></li><li><code>next</code>：<ul><li>指向下一个节点</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">StackNode</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> data<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//记录total node</span>    <span class="token keyword">private</span> StackNode next<span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token function">StackNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setData</span><span class="token punctuation">(</span><span class="token keyword">int</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> StackNode <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNext</span><span class="token punctuation">(</span>StackNode next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"StackNode [data= "</span> <span class="token operator">+</span> data <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>判断栈满</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * 判断是否满     * @return     */</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> head<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> maxsize<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>判断栈空：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * 判断是否空     * @return     */</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> head<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>入栈操作</p><ul><li>添加节点信息</li><li>头结点的data数据加1</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/***     * 入栈操作     * @param node     */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span>StackNode node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Stack is Full~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        head<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        head<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token operator">++</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    node<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    head<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    head<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token operator">++</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>出栈操作</p><ul><li>添加节点信息</li><li>头结点的data数据加1</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * 出栈操作     */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Stack is Full~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//指向头节点</span>    StackNode temp <span class="token operator">=</span> head<span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"StackNode 数量："</span> <span class="token operator">+</span> temp<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//指向第一个节点</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        temp <span class="token operator">=</span> temp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><pre><code>## 详细代码实现```javapackage com.homewyk.stack;import java.util.Scanner;public class LinkedListStackDemo {    public static void main(String[] args) {        System.out.println(&quot;使用单链表实现Stack&quot;);        LinkedListStack stack = new LinkedListStack(4);        String key = &quot;&quot;;        Scanner scanner = new Scanner(System.in);        boolean loop = true;        while (loop) {            key = scanner.next();            switch (key) {            case &quot;push&quot;:                System.out.println(&quot;请输入要入栈的元素：&quot;);                int num = scanner.nextInt();                stack.push(new StackNode(num));                break;            case &quot;list&quot;:                stack.list();                break;            case &quot;pop&quot;:                System.out.println(stack.pop());                break;            case &quot;exit&quot;:                loop = false;                break;            default:                break;            }        }        scanner.close();        System.out.println(&quot;程序退出~~&quot;);    }}class LinkedListStack{    //Stack的最大容量    private int maxsize;    //记录当前节点数量    private int count = 0;    //头结点的数据域保存节点的个数，用来判断stack is Full    private StackNode head = new StackNode(0);    public LinkedListStack(int maxsize) {        this.maxsize = maxsize;    }    /**     * 判断是否满     * @return     */    public boolean isFull() {        return head.getData() == maxsize;    }    /**     * 判断是否空     * @return     */    public boolean isEmpty() {        return head.getNext() == null;    }    /***     * 入栈操作     * @param node     */    public void push(StackNode node) {        if (this.isFull()) {            System.out.println(&quot;Stack is Full~~&quot;);            return ;        }        if (head.getNext() == null) {            head.setNext(node);            head.setData(++count);            return ;        }        node.setNext(head.getNext());        head.setNext(node);        head.setData(++count);    }    /**     * 出栈操作     */    public void list() {        if (this.isEmpty()) {            System.out.println(&quot;Stack is Full~~&quot;);            return ;        }        //指向头节点        StackNode temp = head;        System.out.println(&quot;StackNode 数量：&quot; + temp.getData());        while(true) {            //指向第一个节点            if(temp.getNext() == null) {                break;            }            temp = temp.getNext();            System.out.println(temp);        }    }    public StackNode pop() {        if (this.isEmpty()) {            System.out.println(&quot;Stack is Full~~&quot;);            return null;        }        StackNode temp = head.getNext();        head.setNext(head.getNext().getNext());        head.setData(--count);        temp.setNext(null);        return temp;    }}class StackNode{    private int data;    private StackNode next;    public StackNode(int data) {        super();        this.data = data;        this.next = null;    }    public int getData() {        return data;    }    public void setData(int data) {        this.data = data;    }    public StackNode getNext() {        return next;    }    public void setNext(StackNode next) {        this.next = next;    }    @Override    public String toString() {        return &quot;StackNode [data= &quot; + data + &quot;]&quot;;    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10-数据结构Java版-数组模拟栈实现</title>
      <link href="/2020/04/16/20200416-101527/"/>
      <url>/2020/04/16/20200416-101527/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/homewyk/cloudimg/raw/master/images.jpg" alt=""></p><h2 id="栈-Stack"><a href="#栈-Stack" class="headerlink" title="栈(Stack)"></a>栈(Stack)</h2><ol><li><p>栈的英文为(stack)</p></li><li><p>栈是一个先入后出(FILO-First In Last Out)的有序列表。</p></li><li><p>栈(stack)是限制线性表中元素的插入和删除只能在线性表的同一端进行的一种特殊线性表。允许插入和删除的一端，为变化的一端，称为栈顶(Top)，另一端为固定的一端，称为栈底(Bottom)。</p></li><li><p>根据栈的定义可知，最先放入栈中元素在栈底，最后放入的元素在栈顶，而删除元素刚好相反，最后放入的元素最先删除，最先放入的元素最后删除</p></li><li><p>出栈和入栈的概念</p><blockquote><p>始终指向栈顶元素</p></blockquote><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200419095944.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200419100013.png" alt=""></p></li></ol><h3 id="栈的应用场景"><a href="#栈的应用场景" class="headerlink" title="栈的应用场景"></a>栈的应用场景</h3><ol><li>子程序的调用：在跳往子程序前，会先将下个指令的地址存到堆栈中，直到子程序执行完后再将地址取出，以回到原来的程序中。   </li><li>处理递归调用：和子程序的调用类似，只是除了储存下一个指令的地址外，也将参数、区域变量等数据存入堆栈中。</li><li>表达式的转换[中缀表达式转后缀表达式]与求值(实际解决)。</li><li>二叉树的遍历。</li><li>图形的深度优先(depth一first)搜索法。</li></ol><h2 id="数组模拟栈"><a href="#数组模拟栈" class="headerlink" title="数组模拟栈"></a>数组模拟栈</h2><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200419100256.png" alt=""></p><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><ol><li>定义1个变量指向栈顶：<code>top</code></li><li>赋初值<code>top = -1</code></li><li>元素入栈操作：<code>top ++; stack[top] = xx</code></li><li>元素出栈操作：<code>数据类型 变量 = stack[top]; top --; return 变量</code></li></ol><h3 id="判断stack是否空-满"><a href="#判断stack是否空-满" class="headerlink" title="判断stack是否空|满"></a>判断stack是否空|满</h3><ul><li>满就是数组满了<code>top = maxsize -1</code></li><li>空就是<code>top == -1</code></li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * 判断stack is full?     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> top <span class="token operator">==</span> maxsize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判读 stack is empty?     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> top <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="入栈操作"><a href="#入栈操作" class="headerlink" title="入栈操作"></a>入栈操作</h3><blockquote><p>也容易记忆，因为<code>top</code>的初值为-1 ，要入栈，肯定要先自加，在入栈</p></blockquote><ol><li><code>top ++</code></li><li><code>stack[top] = num</code></li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/***  1.入栈* @param num*/</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"stack 已经满了~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    top <span class="token operator">++</span><span class="token punctuation">;</span>    stack<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="出栈操作"><a href="#出栈操作" class="headerlink" title="出栈操作"></a>出栈操作</h3><ol><li><code>int num = stack[top]</code></li><li><code>top --</code></li><li><code>return num</code></li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 2. 出栈操作* @return*/</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"stack 已经空了~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"stack 已经空了~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> number <span class="token operator">=</span> stack<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>    top <span class="token operator">--</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> number<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="详细代码实现"><a href="#详细代码实现" class="headerlink" title="详细代码实现"></a>详细代码实现</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>homewyk<span class="token punctuation">.</span>stack<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayStackDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数组模拟栈的测试程序"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ArrayStack stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayStack</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String key <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> loop <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>loop<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"push: 入栈操作~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"pop: 入栈操作~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"list: 显示元素~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"exit: 程序退出~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            key <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token string">"push"</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"入栈操作~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入一个数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> num <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"pop"</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"出栈操作~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"pop:"</span> <span class="token operator">+</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"list"</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"显示所有元素~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                stack<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"exit"</span><span class="token operator">:</span>                loop <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"程序退出~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ArrayStack</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> maxsize<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> stack <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> top<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/***     * 构造函数     * @param maxsize     */</span>    <span class="token keyword">public</span> <span class="token function">ArrayStack</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxsize<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>maxsize <span class="token operator">=</span> maxsize<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>maxsize<span class="token punctuation">]</span><span class="token punctuation">;</span>        top <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判断stack is full?     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> top <span class="token operator">==</span> maxsize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判读 stack is empty?     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> top <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     *  1.入栈     * @param num     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"stack 已经满了~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        top <span class="token operator">++</span><span class="token punctuation">;</span>        stack<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 2. 出栈操作     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"stack 已经空了~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"stack 已经空了~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> number <span class="token operator">=</span> stack<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>        top <span class="token operator">--</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> number<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 列出所有的节点     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"stack 已经空了~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"stack 已经空了~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> top<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"stack["</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"] : "</span> <span class="token operator">+</span> stack<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="关于单链表实现stack的思路"><a href="#关于单链表实现stack的思路" class="headerlink" title="关于单链表实现stack的思路"></a>关于单链表实现stack的思路</h3><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200416112741.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04-pytorch-基础知识</title>
      <link href="/2020/04/15/20200415-160000/"/>
      <url>/2020/04/15/20200415-160000/</url>
      
        <content type="html"><![CDATA[<h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><h3 id="python与pyTorch的数据类型："><a href="#python与pyTorch的数据类型：" class="headerlink" title="python与pyTorch的数据类型："></a>python与pyTorch的数据类型：</h3><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200415155952.png" alt=""></p><p><code>pytorch</code>无法表示<code>string</code>类型，<code>NLP</code>会使用到</p><p>one-hot编码不合适，语义相关性不强</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200415164809.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200415160154.png" alt=""></p><p>上面标红的用的比较多：</p><ul><li><code>torch.IntTensor</code></li><li><code>torch.floatTensor</code></li><li><code>torch.longTensor</code></li><li><code>torch.ByteTensor</code></li></ul><p><strong>注意</strong>：CUP的数据类型和GPU的数据类型并不一致</p><h3 id="数据类型检查"><a href="#数据类型检查" class="headerlink" title="数据类型检查"></a>数据类型检查</h3><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200415164922.png" alt=""></p><p><img src="C:%5CUsers%5Casdw1%5CAppData%5CLocal%5CTemp%5C1586940592575.png" alt="1586940592575"></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> torchvision<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npa <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>type<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""torch.LongTensor"""</span>a <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>type<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""torch.FloatTensor"""</span><span class="token keyword">print</span><span class="token punctuation">(</span>isinstance<span class="token punctuation">(</span>a<span class="token punctuation">,</span> torch<span class="token punctuation">.</span>FloatTensor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""True"""</span></code></pre><h3 id="dim-0"><a href="#dim-0" class="headerlink" title="dim 0"></a>dim 0</h3><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200415165021.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200415165042.png" alt=""></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 标量</span>a <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># size() 是内置函数</span><span class="token comment" spellcheck="true"># shape 是内置属性</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>a<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""torch.Size([])torch.Size([])0"""</span></code></pre><h3 id="Dim-1"><a href="#Dim-1" class="headerlink" title="Dim 1"></a>Dim 1</h3><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200415165307.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200415165501.png" alt=""></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 一维向量</span>a <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 未初始化的二维向量</span>b <span class="token operator">=</span> torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># dim 为矩阵有几个维度</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>dim<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>dim<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># size / shape 表明每一个维度的具体信息</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""tensor([1.])tensor([[1.3563e-19, 1.1446e+24, 1.7543e+19],        [3.9178e-02, 2.1131e-19, 7.9395e+23]])12torch.Size([1])torch.Size([2, 3])13"""</span></code></pre><h3 id="Dim-2"><a href="#Dim-2" class="headerlink" title="Dim 2"></a>Dim 2</h3><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200415165622.png" alt=""></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 范围 [0,1)</span>a <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>b <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>c <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>d <span class="token operator">=</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>type<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""tensor([[0.3936, 0.6058],        [0.4561, 0.5282]])tensor([[0.9216, 0.4605],        [0.8260, 0.3790]])torch.IntTensor"""</span></code></pre><h3 id="Dim-3"><a href="#Dim-3" class="headerlink" title="Dim 3"></a>Dim 3</h3><p>适合NLP处理</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200415165742.png" alt=""></p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""tensor([[[0.8177, 0.2091, 0.5237],         [0.7146, 0.3750, 0.2664]],        [[0.1908, 0.8833, 0.6077],         [0.2584, 0.4582, 0.8517]]])tensor([[0.8177, 0.2091, 0.5237],        [0.7146, 0.3750, 0.2664]])torch.Size([2, 3])"""</span></code></pre><h3 id="Dim-4"><a href="#Dim-4" class="headerlink" title="Dim 4"></a>Dim 4</h3><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200415165838.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200415174955.png" alt=""></p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>numel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>dim<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""torch.Size([2, 3, 28, 28])47044"""</span></code></pre><h2 id="创建数据"><a href="#创建数据" class="headerlink" title="创建数据"></a>创建数据</h2><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200415170033.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200415170542.png" alt=""></p><h3 id="未初始化"><a href="#未初始化" class="headerlink" title="未初始化"></a>未初始化</h3><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200415170749.png" alt=""></p><p>未初始化会造成如下情况</p><p><img src="C:%5CUsers%5Casdw1%5CAppData%5CLocal%5CTemp%5C1586941717362.png" alt="1586941717362"></p><h3 id="设置默认的数据类型"><a href="#设置默认的数据类型" class="headerlink" title="设置默认的数据类型"></a>设置默认的数据类型</h3><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200415170957.png" alt=""></p><h3 id="随机初始化"><a href="#随机初始化" class="headerlink" title="随机初始化"></a>随机初始化</h3><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200415171218.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200415171647.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200415171749.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200415171843.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200415172008.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200415172059.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200415172119.png" alt=""></p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>c <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros_like<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>d <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>e <span class="token operator">=</span> torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>f <span class="token operator">=</span> torch<span class="token punctuation">.</span>full<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>g <span class="token operator">=</span> torch<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""[1 2 3][[1. 1. 1.] [1. 1. 1.]][[0. 0. 0.] [0. 0. 0.]]tensor([1, 2, 3])tensor([[8.4078e-45, 0.0000e+00],        [1.4013e-45, 0.0000e+00]])tensor([[4., 4.],        [4., 4.]])tensor([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"""</span></code></pre><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200415172313.png" alt=""></p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>b <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>idx <span class="token operator">=</span> torch<span class="token punctuation">.</span>randperm<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""tensor([[0.6936, 0.1417, 0.6834],        [0.3320, 0.8091, 0.5106]])tensor([[0.4342, 0.0887, 0.3589],        [0.5816, 0.5893, 0.9691]])tensor([1, 0])tensor([[0.3320, 0.8091, 0.5106],        [0.6936, 0.1417, 0.6834]])tensor([[0.5816, 0.5893, 0.9691],        [0.4342, 0.0887, 0.3589]])"""</span></code></pre><h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200415172418.png" alt=""></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 要和实际的意义相结合！</span><span class="token comment" spellcheck="true"># [b c h w]</span>a <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 取第一张图片</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 取第一张图片的第一个通道</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""torch.Size([4, 3, 28, 28])torch.Size([3, 28, 28])torch.Size([28, 28])tensor(0.0173)"""</span></code></pre><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200415173506.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200415173712.png" alt=""></p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shape<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [2 1 28 28 ]</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shape<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [2 1 28 28 ]</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shape<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [2 1 28 28]</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shape<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [2 1 28 28]</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""torch.Size([2, 1, 28, 28])torch.Size([2, 1, 28, 28])torch.Size([2, 2, 28, 28])torch.Size([2, 1, 28, 28])torch.Size([4, 3, 14, 14])"""</span></code></pre><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200415173748.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200415174329.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200415174534.png" alt=""></p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 在0维度上进行操作</span><span class="token comment" spellcheck="true"># 选取第一张和第三张img</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>index_select<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""torch.Size([2, 3, 28, 28])torch.Size([3, 28, 28])"""</span></code></pre><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200415174730.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200415174851.png" alt=""></p><h2 id="维度变换"><a href="#维度变换" class="headerlink" title="维度变换"></a>维度变换</h2><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200415175052.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200415193044.png" alt=""></p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>b <span class="token operator">=</span> a<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>b <span class="token operator">=</span> a<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">*</span><span class="token number">28</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""torch.Size([4, 1, 28, 28])torch.Size([4, 784])torch.Size([112, 28])"""</span></code></pre><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200415193129.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200415193638.png" alt=""></p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 增加的一维可以是将图片分组了！</span>b <span class="token operator">=</span> a<span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>b <span class="token operator">=</span> a<span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>shape<span class="token punctuation">)</span></code></pre><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200415193914.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200415194157.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200415194343.png" alt=""></p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 增加的一维可以是将图片分组了！</span>b <span class="token operator">=</span> a<span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>b <span class="token operator">=</span> a<span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># bias</span>b <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>f <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 对于f的每一个元素增加一个bias</span><span class="token comment" spellcheck="true"># 数值并没有变化，只是修改数值的组织形式</span><span class="token comment" spellcheck="true"># 先进行维度拓展</span><span class="token comment" spellcheck="true"># 在进行扩张操作</span>b <span class="token operator">=</span> b<span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>c <span class="token operator">=</span> b<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""torch.Size([1, 4, 1, 28, 28])torch.Size([4, 1, 28, 28, 1])torch.Size([1, 32, 1, 1])torch.Size([32, 1, 1])"""</span></code></pre><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200415194505.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200415194759.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200415212108.png" alt=""></p><pre class=" language-python"><code class="language-python">b <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>b <span class="token operator">=</span> b<span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>c <span class="token operator">=</span> b<span class="token punctuation">.</span>expand<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># -1 表示不拓展维度</span>c <span class="token operator">=</span> b<span class="token punctuation">.</span>expand<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>shape<span class="token punctuation">)</span></code></pre><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200415212144.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200415213029.png" alt=""></p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [4 28 28 3]</span>a1 <span class="token operator">=</span> a<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>contiguous<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a1<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>all<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>eq<span class="token punctuation">(</span>a<span class="token punctuation">,</span>a1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""torch.Size([4, 3, 28, 28])torch.Size([4, 3, 28, 28])tensor(1, dtype=torch.uint8)"""</span></code></pre><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200415213253.png" alt=""></p><h2 id="Broadcsting-自动扩张"><a href="#Broadcsting-自动扩张" class="headerlink" title="Broadcsting 自动扩张"></a>Broadcsting 自动扩张</h2><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200415213614.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200415213829.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200415214124.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200415214422.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200415214545.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200415214614.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200415214628.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200415214739.png" alt="">)<img src="https://gitee.com/homewyk/cloudimg/raw/master/20200415214739.png" alt=""></p><h3 id="总结广播语义"><a href="#总结广播语义" class="headerlink" title="总结广播语义"></a>总结广播语义</h3><p>如果<code>Pytorch</code>操作支持广播,则其张量参数可以自动扩展为相同大小（不需要复制数据）。 </p><h4 id="一般语义"><a href="#一般语义" class="headerlink" title="一般语义"></a>一般语义</h4><p>2个规则：</p><ul><li>每个张量至少有一个维度(这里表明标量不可以)</li><li>在遍历维度是，从尾部（小维度）开始遍历<ul><li>两个<code>Tensor</code>必须满足一项条件：<ul><li>大小必须相等<ul><li><code>a = torch.Tensor(2,3,4); b = torch.Tensor(2,3,4)</code></li></ul></li><li>他们其中一个要么是1，要么不存在<ul><li><code>a = torch.Tnesor(2,3,4); b = torch.Tensor(3,1);</code></li></ul></li></ul></li></ul></li></ul><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>y <span class="token operator">=</span> torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token punctuation">.</span>shape<span class="token punctuation">)</span>x <span class="token operator">=</span> torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>y <span class="token operator">=</span> torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token punctuation">.</span>shape<span class="token punctuation">)</span>x <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>y <span class="token operator">=</span> torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token punctuation">.</span>shape<span class="token punctuation">)</span>x <span class="token operator">=</span> torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>y <span class="token operator">=</span> torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""torch.Size([2, 3, 5])torch.Size([2, 3, 5])torch.Size([])torch.Size([2, 3, 5])RuntimeError: The size of tensor a (3) must match the size of tensor b (4) at non-singleton dimension 1"""</span></code></pre><p>如果<code>x</code>和<code>y</code>可以被广播,得到的张量大小的计算方法如下：</p><ul><li>如果维数<code>x</code>和<code>y</code>不相等，在维度较少的张量的维度前加上<code>1</code>使它们相等的长度。</li><li>然后,对于每个维度的大小,生成维度的大小是<code>x</code>和<code>y</code>的最大值。</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 可以排列尾部维度,使阅读更容易</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token operator">=</span>torch<span class="token punctuation">.</span>FloatTensor<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> y<span class="token operator">=</span>torch<span class="token punctuation">.</span>FloatTensor<span class="token punctuation">(</span>  <span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span>torch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 但不是必要的:</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token operator">=</span>torch<span class="token punctuation">.</span>FloatTensor<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> y<span class="token operator">=</span>torch<span class="token punctuation">.</span>FloatTensor<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span>torch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token operator">=</span>torch<span class="token punctuation">.</span>FloatTensor<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> y<span class="token operator">=</span>torch<span class="token punctuation">.</span>FloatTensor<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span>RuntimeError<span class="token punctuation">:</span> The size of tensor a <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> must match the size of tensor b <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> at non<span class="token operator">-</span>singleton dimension <span class="token number">1</span></code></pre><h4 id="直接语义"><a href="#直接语义" class="headerlink" title="直接语义"></a>直接语义</h4><p><del>一个复杂的问题是<code>in-place</code>操作不允许<code>in-place</code>张量像广播那样改变形状</del>。</p><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>y <span class="token operator">=</span> torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>z <span class="token operator">=</span> x<span class="token punctuation">.</span>add_<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>z<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>y <span class="token operator">=</span> torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>z <span class="token operator">=</span> x<span class="token punctuation">.</span>add_<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>z<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""torch.Size([2, 3, 5])torch.Size([2, 3, 5])"""</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> pytorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03-pytorch-分类问题</title>
      <link href="/2020/04/14/20200414-120000/"/>
      <url>/2020/04/14/20200414-120000/</url>
      
        <content type="html"><![CDATA[<h2 id="分类问题流程"><a href="#分类问题流程" class="headerlink" title="分类问题流程"></a>分类问题流程</h2><blockquote><p> 手写数字识别</p></blockquote><h3 id="mnist数据集"><a href="#mnist数据集" class="headerlink" title="mnist数据集"></a>mnist数据集</h3><p>Mnist是一个手写体数据集，<a href="http://yann.lecun.com/exdb/mnist/" target="_blank" rel="noopener">官方网站</a>,数据集由四部分组成，分别为：</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200414144122.png" alt=""></p><p>一个训练图片集，一个训练标签集，一个测试图片集，一个测试标签集 </p><p>每张图片都是灰度图，位深度为8，图片大小为28x28</p><blockquote><p>在数据集中 数值是 0<del>1，而不是 0</del>255</p></blockquote><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200414144933.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200414115502.png" alt=""></p><h3 id="mapping"><a href="#mapping" class="headerlink" title="mapping"></a>mapping</h3><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200414142405.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200414142642.png" alt=""></p><h3 id="如何计算Loss"><a href="#如何计算Loss" class="headerlink" title="如何计算Loss"></a>如何计算Loss</h3><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200414142946.png" alt=""></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200414143057.png" alt=""></p><p>激活函数：将线性变为非线性！！增加了表达能力！</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200414143215.png" alt=""></p><h3 id="Gradient-Descent"><a href="#Gradient-Descent" class="headerlink" title="Gradient Descent"></a>Gradient Descent</h3><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200414143319.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200414143429.png" alt=""></p><h2 id="使用pytorch进行手写数字识别"><a href="#使用pytorch进行手写数字识别" class="headerlink" title="使用pytorch进行手写数字识别"></a>使用pytorch进行手写数字识别</h2><h3 id="自己动手实现"><a href="#自己动手实现" class="headerlink" title="自己动手实现"></a>自己动手实现</h3><blockquote><p>平台： coLab</p><p>未使用GPU加速</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 实现手写数字识别</span><span class="token keyword">import</span> torch<span class="token keyword">import</span> torchvision<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> torch <span class="token keyword">import</span> optim<span class="token keyword">import</span> timetorch<span class="token punctuation">.</span>__version__</code></pre><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200421193552.png" alt=""></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 加载数据集</span><span class="token comment" spellcheck="true">## 用colab是真的快！</span>batch_size <span class="token operator">=</span> <span class="token number">512</span><span class="token keyword">def</span> <span class="token function">load_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  train_loader <span class="token operator">=</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>      torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>MNIST<span class="token punctuation">(</span><span class="token string">'/content/drive/My Drive/pytorch学习/深度学习与pytorch入门实战'</span><span class="token punctuation">,</span>train<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                    transform<span class="token operator">=</span>torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>                      torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                      torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0.1307</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0.3081</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  test_loader <span class="token operator">=</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>      torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>MNIST<span class="token punctuation">(</span><span class="token string">'/content/drive/My Drive/pytorch学习/深度学习与pytorch入门实战'</span><span class="token punctuation">,</span>train<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                    transform<span class="token operator">=</span>torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>                      torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                      torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0.1307</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0.3081</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> train_loader<span class="token punctuation">,</span> test_loadertrain_loader<span class="token punctuation">,</span> test_loader <span class="token operator">=</span> load_data<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>train_loader<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>test_loader<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200421193636.png" alt=""></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># one-hot 编码</span><span class="token keyword">def</span> <span class="token function">one_hot</span><span class="token punctuation">(</span>label<span class="token punctuation">,</span>depth<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  out <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>label<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>depth<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 修改tensor的dtype</span>  idx <span class="token operator">=</span> torch<span class="token punctuation">.</span>LongTensor<span class="token punctuation">(</span>label<span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>  out<span class="token punctuation">.</span>scatter_<span class="token punctuation">(</span>dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> index<span class="token operator">=</span>idx<span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># print('out:\n',out)</span>  <span class="token keyword">return</span> out one_hot<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> </code></pre><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200421193704.png" alt=""></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 显示随机的图片</span><span class="token keyword">def</span> <span class="token function">plot_image</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span>label<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>  fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 显示6张images</span>  <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 分割windows</span>    plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># img[i][0]: 表示0维度为0~6 1维度为0 后面的元素做复原操作</span>    plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">3081</span><span class="token operator">+</span><span class="token number">0.1307</span><span class="token punctuation">,</span>cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">,</span>interpolation<span class="token operator">=</span><span class="token string">'none'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"{}:{}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>name<span class="token punctuation">,</span>label<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>yticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 显示image</span>  plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 形象化图片输出</span>x<span class="token punctuation">,</span> y <span class="token operator">=</span> next<span class="token punctuation">(</span>iter<span class="token punctuation">(</span>train_loader<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 矩阵格式</span><span class="token comment" spellcheck="true"># torch.Size([512, 1, 28, 28]) torch.Size([512])</span><span class="token comment" spellcheck="true"># 0：image number</span><span class="token comment" spellcheck="true"># 1: channel number</span><span class="token comment" spellcheck="true"># 2: col</span><span class="token comment" spellcheck="true"># 3: row</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> y<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>y_one <span class="token operator">=</span> one_hot<span class="token punctuation">(</span>y<span class="token punctuation">)</span>plot_image<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token string">'image sample'</span><span class="token punctuation">)</span></code></pre><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200421193740.png" alt=""></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义网络类型：</span><span class="token comment" spellcheck="true">## 使用了3个线性层，2个relu激活函数</span><span class="token keyword">class</span> <span class="token class-name">Net</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    super<span class="token punctuation">(</span>Net<span class="token punctuation">,</span>self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>fc1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">28</span><span class="token operator">*</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>fc2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>fc3 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fc1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>    x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fc2<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>    x <span class="token operator">=</span> self<span class="token punctuation">.</span>fc3<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token keyword">return</span> xnet <span class="token operator">=</span> Net<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>net<span class="token punctuation">)</span></code></pre><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200421193801.png" alt=""></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 画线函数</span><span class="token keyword">def</span> <span class="token function">plot_curve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>  fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>data<span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>loc<span class="token operator">=</span><span class="token string">'upper right'</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'step'</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'value'</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"gpu can be used"</span><span class="token punctuation">,</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"gpu device"</span><span class="token punctuation">,</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>device_count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 直立中断的目的是为了能够一键执行上面的代码，到后面能够选择执行</span><span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'stop'</span><span class="token punctuation">)</span></code></pre><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200421193840.png" alt=""></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 此单元框和下一个单元框是实现同一种功能</span><span class="token comment" spellcheck="true">## 此单元框采用了封装的形式</span><span class="token comment" spellcheck="true">#开始进行训练</span><span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> train_loader<span class="token punctuation">,</span> optimizer<span class="token punctuation">,</span> train_loss<span class="token punctuation">,</span> epoch<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># rain(mode=True)：将module设置为 training mode，只影响dropout和batchNorm</span>  model<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">for</span> batch_idx<span class="token punctuation">,</span> <span class="token punctuation">(</span>data<span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>train_loader<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 打平</span>    data <span class="token operator">=</span> data<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token operator">*</span><span class="token number">28</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 得到网络输出</span>    out <span class="token operator">=</span> model<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># one_hot编码</span>    y_one_hot <span class="token operator">=</span> one_hot<span class="token punctuation">(</span>target<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 使用MSE计算loss</span>    loss <span class="token operator">=</span> F<span class="token punctuation">.</span>mse_loss<span class="token punctuation">(</span>out<span class="token punctuation">,</span>y_one_hot<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># grad 置0</span>    optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 反向梯度</span>    loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">## w = w` - lr *grad</span>    optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">## item将tensor变为数值</span>    train_loss<span class="token punctuation">.</span>append<span class="token punctuation">(</span>loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> batch_idx <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span>epoch<span class="token punctuation">,</span> batch_idx<span class="token punctuation">,</span> loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  plot_curve<span class="token punctuation">(</span>train_loss<span class="token punctuation">)</span>optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>lr<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">,</span> momentum<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">)</span>train_loss <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  train<span class="token punctuation">(</span>net<span class="token punctuation">,</span> train_loader<span class="token punctuation">,</span> optimizer<span class="token punctuation">,</span> train_loss<span class="token punctuation">,</span> epoch<span class="token punctuation">)</span>end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'spend time'</span><span class="token punctuation">,</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># for parameters in net.parameters():</span><span class="token comment" spellcheck="true">#   print(parameters)</span><span class="token keyword">for</span> name<span class="token punctuation">,</span> parameters <span class="token keyword">in</span> net<span class="token punctuation">.</span>named_parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token string">':'</span><span class="token punctuation">,</span>parameters<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 此时得到比较好的[w1,b1,w2,b2,w3,b3]</span></code></pre><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200421195026.png" alt=""></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">## 此单元框直接计算</span>optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>lr<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">,</span> momentum<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">)</span>train_loss <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">for</span> batch_idx<span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>train_loader<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">## 打平</span>    x <span class="token operator">=</span> x<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token operator">*</span><span class="token number">28</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">## 得到网络输出</span>    out <span class="token operator">=</span> net<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">## 得到one_hot编码</span>    y_ont_hot <span class="token operator">=</span> one_hot<span class="token punctuation">(</span>y<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">## 使用MSE计算损失</span>    <span class="token comment" spellcheck="true">## 优化器要优化的值</span>    loss <span class="token operator">=</span> F<span class="token punctuation">.</span>mse_loss<span class="token punctuation">(</span>out<span class="token punctuation">,</span>y_ont_hot<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">## 这一步必须置零</span>    optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">## 反向梯度</span>    loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">## w = w` - lr *grad</span>    optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">## item将tensor变为数值</span>    loss <span class="token operator">=</span> loss<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span>    train_loss<span class="token punctuation">.</span>append<span class="token punctuation">(</span>loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> batch_idx <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span>epoch<span class="token punctuation">,</span> batch_idx<span class="token punctuation">,</span> loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plot_curve<span class="token punctuation">(</span>train_loss<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#此时得到比较好的[w1,b1,w2,b2,w3,b3]</span>end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'spend time'</span><span class="token punctuation">,</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 准确率计算</span><span class="token comment" spellcheck="true"># 多分类问题要计算准确率</span>total_currect <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> x<span class="token punctuation">,</span> y <span class="token keyword">in</span> test_loader<span class="token punctuation">:</span>  x <span class="token operator">=</span> x<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token operator">*</span><span class="token number">28</span><span class="token punctuation">)</span>  out <span class="token operator">=</span> net<span class="token punctuation">(</span>x<span class="token punctuation">)</span>  pre <span class="token operator">=</span> out<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>  currect <span class="token operator">=</span> pre<span class="token punctuation">.</span>eq<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>float<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>  total_currect <span class="token operator">+=</span> currecttotal_num <span class="token operator">=</span> len<span class="token punctuation">(</span>test_loader<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span>acc <span class="token operator">=</span> total_currect <span class="token operator">/</span> total_num<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'test_acc:'</span><span class="token punctuation">,</span> acc<span class="token punctuation">)</span></code></pre><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200421212551.png" alt=""></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 查看预测结果</span>x<span class="token punctuation">,</span> y <span class="token operator">=</span> next<span class="token punctuation">(</span>iter<span class="token punctuation">(</span>test_loader<span class="token punctuation">)</span><span class="token punctuation">)</span>input <span class="token operator">=</span>x<span class="token punctuation">.</span>view<span class="token punctuation">(</span>x<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token operator">*</span><span class="token number">28</span><span class="token punctuation">)</span>out <span class="token operator">=</span> net<span class="token punctuation">(</span>input<span class="token punctuation">)</span>pred <span class="token operator">=</span> out<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>plot_image<span class="token punctuation">(</span>x<span class="token punctuation">,</span>pred<span class="token punctuation">,</span> <span class="token string">'test'</span><span class="token punctuation">)</span></code></pre><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200421212644.png" alt=""></p><h3 id="别人的实现"><a href="#别人的实现" class="headerlink" title="别人的实现"></a>别人的实现</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span>  torch<span class="token keyword">import</span>  torchvision<span class="token keyword">import</span>  torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">import</span>  torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F<span class="token keyword">import</span>  numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> matplotlib <span class="token keyword">import</span>  pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> torch <span class="token keyword">import</span> optim<span class="token keyword">def</span> <span class="token function">plot_image</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> label<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>    fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>tight_layout<span class="token punctuation">(</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">0.3081</span><span class="token operator">+</span><span class="token number">0.1307</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">,</span> interpolation<span class="token operator">=</span><span class="token string">'none'</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"{}: {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>name<span class="token punctuation">,</span> label<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>yticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">one_hot</span><span class="token punctuation">(</span>label<span class="token punctuation">,</span> depth<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    out <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>label<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> depth<span class="token punctuation">)</span>    idx <span class="token operator">=</span> torch<span class="token punctuation">.</span>LongTensor<span class="token punctuation">(</span>label<span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    out<span class="token punctuation">.</span>scatter_<span class="token punctuation">(</span>dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> index<span class="token operator">=</span>idx<span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> out<span class="token keyword">def</span> <span class="token function">plot_curve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'blue'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> loc<span class="token operator">=</span><span class="token string">'upper right'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'step'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'value'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>batch_size <span class="token operator">=</span> <span class="token number">512</span>train_loader <span class="token operator">=</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>    torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>MNIST<span class="token punctuation">(</span><span class="token string">'./data'</span><span class="token punctuation">,</span> train<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> download<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>        transform<span class="token operator">=</span>torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>            torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true"># 这个地方是个元组</span>            <span class="token comment" spellcheck="true"># mean std</span>            torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0.1307</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0.3081</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        batch_size <span class="token operator">=</span> batch_size<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>test_loader <span class="token operator">=</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>    torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>MNIST<span class="token punctuation">(</span><span class="token string">'./data'</span><span class="token punctuation">,</span> train<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> download<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>        transform<span class="token operator">=</span>torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>            torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0.1307</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0.3081</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        batch_size <span class="token operator">=</span> batch_size<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 1000</span><span class="token comment" spellcheck="true"># print(len(test_loader.dataset))</span><span class="token comment" spellcheck="true"># 2. 验证数据正确性</span><span class="token comment" spellcheck="true"># x, y = next(iter(train_loader))</span><span class="token comment" spellcheck="true"># print(x.shape, y.shape, x.min(), x.max())</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># y_onehat = one_hot(y)</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># print(y_onehat)</span><span class="token comment" spellcheck="true"># plot_image(x,y,'image sample')</span><span class="token keyword">class</span> <span class="token class-name">Net</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>Net<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># H1 = w1x+b1</span>        self<span class="token punctuation">.</span>fc1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">28</span> <span class="token operator">*</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># H2 = w2H1 + b2</span>        self<span class="token punctuation">.</span>fc2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># H3 = w3H2 + b3</span>        self<span class="token punctuation">.</span>fc3 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fc1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fc2<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>fc3<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> xnet <span class="token operator">=</span> Net<span class="token punctuation">(</span><span class="token punctuation">)</span>optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">,</span> momentum<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">)</span>train_loss <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> batch_idx <span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>train_loader<span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token comment" spellcheck="true"># input [b,1,28,28] y: 512</span>         <span class="token comment" spellcheck="true"># [b,1,28,28] => [b,784]</span>         <span class="token comment" spellcheck="true"># flatten</span>        x <span class="token operator">=</span> x<span class="token punctuation">.</span>view<span class="token punctuation">(</span>x<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token operator">*</span><span class="token number">28</span><span class="token punctuation">)</span>        out <span class="token operator">=</span> net<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 真实值的onehat编码</span>        y_onehat <span class="token operator">=</span> one_hot<span class="token punctuation">(</span>y<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 计算loss</span>        <span class="token comment" spellcheck="true">## 使用MSE 平方差</span>        loss <span class="token operator">=</span> F<span class="token punctuation">.</span>mse_loss<span class="token punctuation">(</span>out<span class="token punctuation">,</span> y_onehat<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 梯度置零 必须</span>        optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># w` = w - lr * grad</span>        optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>        train_loss<span class="token punctuation">.</span>append<span class="token punctuation">(</span>loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> batch_idx <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>epoch<span class="token punctuation">,</span> batch_idx<span class="token punctuation">,</span> loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plot_curve<span class="token punctuation">(</span>train_loss<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 此时得到了一个比较好的[w1 b1 w2 b2 w3 b3]</span>total_currect <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> x<span class="token punctuation">,</span> y <span class="token keyword">in</span> test_loader<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># x [512 1 28 28]</span>    x <span class="token operator">=</span> x<span class="token punctuation">.</span>view<span class="token punctuation">(</span>x<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token operator">*</span><span class="token number">28</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># [512 10]</span>    out <span class="token operator">=</span> net<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># [512 1]</span>    pred <span class="token operator">=</span> out<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 正确的数量进行相加转换为float类型然后将张量的数值取出来</span>    currect <span class="token operator">=</span> pred<span class="token punctuation">.</span>eq<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>float<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>    total_currect <span class="token operator">+=</span> currecttotal_num <span class="token operator">=</span> len<span class="token punctuation">(</span>test_loader<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span>acc <span class="token operator">=</span> total_currect <span class="token operator">/</span> total_num<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'test_acc:'</span><span class="token punctuation">,</span> acc<span class="token punctuation">)</span>x<span class="token punctuation">,</span> y <span class="token operator">=</span> next<span class="token punctuation">(</span>iter<span class="token punctuation">(</span>test_loader<span class="token punctuation">)</span><span class="token punctuation">)</span>input <span class="token operator">=</span>x<span class="token punctuation">.</span>view<span class="token punctuation">(</span>x<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token operator">*</span><span class="token number">28</span><span class="token punctuation">)</span>out <span class="token operator">=</span> net<span class="token punctuation">(</span>input<span class="token punctuation">)</span>pred <span class="token operator">=</span> out<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>plot_image<span class="token punctuation">(</span>x<span class="token punctuation">,</span>pred<span class="token punctuation">,</span> <span class="token string">'test'</span><span class="token punctuation">)</span></code></pre><p>loss曲线：</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200415154403.png" alt=""></p><p>测试值：</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200415154459.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> pytorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>09-数据结构Java版-单向环形链表|约瑟夫问题</title>
      <link href="/2020/04/14/20200414-095027/"/>
      <url>/2020/04/14/20200414-095027/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/homewyk/cloudimg/raw/master/images.jpg" alt=""></p><h2 id="单向环形链表"><a href="#单向环形链表" class="headerlink" title="单向环形链表"></a>单向环形链表</h2><h3 id="单向环形链表的创建"><a href="#单向环形链表的创建" class="headerlink" title="单向环形链表的创建"></a>单向环形链表的创建</h3><ul><li>循环结束条件：<code>temp.next == first</code></li></ul><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200415105440.jpg" alt=""></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** * 创建并且添加节点到单向环形链表 * @author asdw1 * */</span><span class="token keyword">class</span> <span class="token class-name">CircleLinkedList</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//第一个节点</span>    <span class="token keyword">private</span> BoyNode first <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addBoy</span><span class="token punctuation">(</span>BoyNode node<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Boy Node的值设置不正确"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 第一个节点指向新加入的学生节点</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>first <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            first <span class="token operator">=</span> node<span class="token punctuation">;</span>            first<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        BoyNode temp <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> first<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        node<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>        temp<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="单向环形链表的遍历操作"><a href="#单向环形链表的遍历操作" class="headerlink" title="单向环形链表的遍历操作"></a>单向环形链表的遍历操作</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/***     * 显示单向环形链表的所有节点     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"无学生节点~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        BoyNode temp <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"小孩的编号为%d\n"</span><span class="token punctuation">,</span>temp<span class="token punctuation">.</span><span class="token function">getNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> first<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="约瑟夫问题"><a href="#约瑟夫问题" class="headerlink" title="约瑟夫问题"></a>约瑟夫问题</h2><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200415105748.jpg" alt=""></p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/***     * 解决约瑟夫问题     * @param startNo 从哪一个学生开始     * @param countNum 间隔几次     *      * 实现思路：     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token keyword">int</span> startNo<span class="token punctuation">,</span> <span class="token keyword">int</span> countNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"无学生节点~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//temp指针指向头结点的前一个节点，也就是尾结点</span>        BoyNode temp <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//此时指向最后一个节点</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> first<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//将first和temp的位置移动到起始位置</span>        <span class="token comment" spellcheck="true">// 从n开始移动 n-1下</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> startNo <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            first <span class="token operator">=</span> first<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//上述为初始化操作</span>        <span class="token comment" spellcheck="true">//下面开始进行间隔取出</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//循环退出条件</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp <span class="token operator">==</span> first<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//数countNum下，移动countNum-1下</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> countNum <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                first <span class="token operator">=</span> first<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                temp <span class="token operator">=</span> temp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//此时first指向要出圈的节点</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"学生%d出圈~~\n"</span><span class="token punctuation">,</span>first<span class="token punctuation">.</span><span class="token function">getNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//学生出圈子</span>            first <span class="token operator">=</span> first<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            temp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>            temp<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"最后留在圈子的小孩编号为%d\n"</span><span class="token punctuation">,</span> first<span class="token punctuation">.</span><span class="token function">getNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="详细的代码实现"><a href="#详细的代码实现" class="headerlink" title="详细的代码实现"></a>详细的代码实现</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>homewyk<span class="token punctuation">.</span>linked<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CircleSingleLinked</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"约瑟夫环的解法：使用单向环形链表实现"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CircleLinkedList c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CircleLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> key <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> loop <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>loop<span class="token punctuation">)</span> <span class="token punctuation">{</span>            key <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token string">'a'</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"添加学生节点"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                c<span class="token punctuation">.</span><span class="token function">addBoy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BoyNode</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                c<span class="token punctuation">.</span><span class="token function">addBoy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BoyNode</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                c<span class="token punctuation">.</span><span class="token function">addBoy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BoyNode</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                c<span class="token punctuation">.</span><span class="token function">addBoy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BoyNode</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"添加学生节点成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'l'</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"列出所有的学生节点信息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                c<span class="token punctuation">.</span><span class="token function">listAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'s'</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"约瑟夫问题的解决方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                c<span class="token punctuation">.</span><span class="token function">solve</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'e'</span><span class="token operator">:</span>                loop <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>         scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"程序退出~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*** * 创建并且添加节点到单向环形链表 * @author asdw1 * */</span><span class="token keyword">class</span> <span class="token class-name">CircleLinkedList</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//第一个节点</span>    <span class="token keyword">private</span> BoyNode first <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addBoy</span><span class="token punctuation">(</span>BoyNode node<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Boy Node的值设置不正确"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 第一个节点指向新加入的学生节点</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>first <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            first <span class="token operator">=</span> node<span class="token punctuation">;</span>            first<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        BoyNode temp <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> first<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        node<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>        temp<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/***     * 显示单向环形链表的所有节点     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"无学生节点~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        BoyNode temp <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"小孩的编号为%d\n"</span><span class="token punctuation">,</span>temp<span class="token punctuation">.</span><span class="token function">getNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> first<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/***     * 解决约瑟夫问题     * @param startNo 从哪一个学生开始     * @param countNum 间隔几次     *      * 实现思路：     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token keyword">int</span> startNo<span class="token punctuation">,</span> <span class="token keyword">int</span> countNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"无学生节点~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//temp指针指向头结点的前一个节点，也就是尾结点</span>        BoyNode temp <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//此时指向最后一个节点</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> first<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//将first和temp的位置移动到起始位置</span>        <span class="token comment" spellcheck="true">// 从n开始移动 n-1下</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> startNo <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            first <span class="token operator">=</span> first<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//上述为初始化操作</span>        <span class="token comment" spellcheck="true">//下面开始进行间隔取出</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//循环退出条件</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp <span class="token operator">==</span> first<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//数countNum下，移动countNum-1下</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> countNum <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                first <span class="token operator">=</span> first<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                temp <span class="token operator">=</span> temp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//此时first指向要出圈的节点</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"学生%d出圈~~\n"</span><span class="token punctuation">,</span>first<span class="token punctuation">.</span><span class="token function">getNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//学生出圈子</span>            first <span class="token operator">=</span> first<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            temp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>            temp<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"最后留在圈子的小孩编号为%d\n"</span><span class="token punctuation">,</span> first<span class="token punctuation">.</span><span class="token function">getNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*** * 节点 * @author asdw1 * */</span><span class="token keyword">class</span> <span class="token class-name">BoyNode</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> no<span class="token punctuation">;</span>    <span class="token keyword">private</span> BoyNode next<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">BoyNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>no <span class="token operator">=</span> no<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> no<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNo</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>no <span class="token operator">=</span> no<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> BoyNode <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNext</span><span class="token punctuation">(</span>BoyNode next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"BoyNode [no="</span> <span class="token operator">+</span> no <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类加载器|注解|动态代理</title>
      <link href="/2020/04/13/20200413-211247/"/>
      <url>/2020/04/13/20200413-211247/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/homewyk/cloudimg/raw/master/cover.png" alt=""></p><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><h3 id="什么叫代理（中介）"><a href="#什么叫代理（中介）" class="headerlink" title="什么叫代理（中介）"></a>什么叫代理（中介）</h3><p>目标对象/被代理对象： 房主：真正的租房方法</p><p>代理对象： 黑中介：有租房子的方法（调用房主的真正的租房方法）</p><p>执行代理对象方法的人：租房者</p><p>process:</p><p>租房者要租房 -&gt; 寻找中介 -&gt; 中介寻找房主（真正出租的人）</p><p>将上述流程进行抽象：</p><p>实际的对象调用者 -&gt; 代理对象 -&gt; 目标对象/被代理对象</p><p>静态代理示意图：</p><blockquote><p>前提：代理对象与目标对象实现同一接口，必须保证方法的一致性</p></blockquote><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200413213036.png" alt=""></p><h3 id="动态代理-1"><a href="#动态代理-1" class="headerlink" title="动态代理"></a>动态代理</h3><p>不需要手动编写一个代理对象（区别于静态代理），不需要一一编写与目标对象相同的方法，在这个过程中，在程序运行过程中动态的生成代理对象 – 字节码级别的代理对象</p><h3 id="快速实现动态代理"><a href="#快速实现动态代理" class="headerlink" title="快速实现动态代理"></a>快速实现动态代理</h3><p>接口：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>homewyk<span class="token punctuation">.</span>dongtai<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Target</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">method3</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>目标对象：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>homewyk<span class="token punctuation">.</span>dongtai<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">demo1</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">TargetImp</span> <span class="token keyword">implements</span> <span class="token class-name">Target</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"method1...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"method2...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"method2...."</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">method3</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"method3...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>动态代理：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>homewyk<span class="token punctuation">.</span>dongtai<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationHandler<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Proxy<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">proxy</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span>  <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Target objProxy <span class="token operator">=</span>  <span class="token punctuation">(</span>Target<span class="token punctuation">)</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>                TargetImp<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 TargetImp<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"目标方法前的逻辑..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        Object invoke <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TargetImp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"目标方法后的逻辑...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> invoke<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objProxy<span class="token punctuation">.</span><span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objProxy<span class="token punctuation">.</span><span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objProxy<span class="token punctuation">.</span><span class="token function">method3</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="详细的理解"><a href="#详细的理解" class="headerlink" title="详细的理解"></a>详细的理解</h4><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200413222232.png" alt=""></p><p>获得动态的代理对象 – 在运行时进行创建</p><p>动态代理的意思是说：</p><p>在内存中动态的给目标对象创建一个虚拟的代理对象</p><p>还需要根据参数来确定到底是谁的代理对象</p><h4 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>homewyk<span class="token punctuation">.</span>dongtai<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationHandler<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Proxy<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">proxy</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span>  <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//此对象的类型需要根据参数来确定到底是谁的代理对象</span>        Target objProxy <span class="token operator">=</span>  <span class="token punctuation">(</span>Target<span class="token punctuation">)</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>                <span class="token comment" spellcheck="true">//与目标相同的类加载器</span>                TargetImp<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">// 目标对象实现的接口</span>                TargetImp<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">//句柄，用来管理代理对象</span>                <span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token comment" spellcheck="true">//第一个参数： 代理对象</span>                    <span class="token comment" spellcheck="true">//第二个参数：代理对象当前执行的方法的描述对象</span>                    <span class="token comment" spellcheck="true">// 方法的实际参数</span>                    <span class="token comment" spellcheck="true">// 执行的方法名称： method.getName()</span>                    <span class="token comment" spellcheck="true">// 执行方法： method.invoke(对象，参数)</span>                    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"目标方法前的逻辑..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        Object invoke <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TargetImp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"目标方法后的逻辑...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> invoke<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objProxy<span class="token punctuation">.</span><span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objProxy<span class="token punctuation">.</span><span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objProxy<span class="token punctuation">.</span><span class="token function">method3</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>动态代理可以实现在目标对象的方法执行前后进行逻辑控制！！</p><h3 id="案例：实现全局编码"><a href="#案例：实现全局编码" class="headerlink" title="案例：实现全局编码"></a>案例：实现全局编码</h3><blockquote><p>采用proxy方法，对request进行动态代理</p><p>只是在request.getParamter()方法上进行处理</p></blockquote><pre class=" language-java"><code class="language-java">待续<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><h2 id="注解-xxx"><a href="#注解-xxx" class="headerlink" title="注解 @xxx"></a>注解 @xxx</h2><p>注解必须符合一定的语法格式：@Test</p><p>注解的作用：</p><ul><li>注释：在阅读程序时可以清楚逻辑</li><li>注解：是个JVM看的</li></ul><p>注解现在最主流的应用：代替配置文件</p><p>配置文件和注解的区分：</p><ul><li>注解的优点：开发效率高，成本低</li><li>注解的缺点：耦合性大，并且不利于后期维护</li></ul><p>我们的最终目标是实现只修改配置文件</p><h3 id="JDK5提供的注解类型"><a href="#JDK5提供的注解类型" class="headerlink" title="JDK5提供的注解类型"></a>JDK5提供的注解类型</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@override</span><span class="token operator">:</span> 告知编译器此方法是覆盖父类的<span class="token annotation punctuation">@Deprecated</span><span class="token operator">:</span>标注过时<span class="token annotation punctuation">@SuppressWarning</span><span class="token operator">:</span>压制警告</code></pre><p><strong>不同的注解只能在不同的位置上使用（方法上、字段上、类上）</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//只能用在方法上</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//注解的特性，仅源文件可见</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>SOURCE<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Override</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//可以使用在很多地方</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>TYPE<span class="token punctuation">,</span> FIELD<span class="token punctuation">,</span> METHOD<span class="token punctuation">,</span> PARAMETER<span class="token punctuation">,</span> CONSTRUCTOR<span class="token punctuation">,</span> LOCAL_VARIABLE<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//源文件可见</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>SOURCE<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">SuppressWarnings</span> <span class="token punctuation">{</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="自定义注解实现"><a href="#自定义注解实现" class="headerlink" title="自定义注解实现"></a>自定义注解实现</h3><p>测试代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>homewyk<span class="token punctuation">.</span>zhujie<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Mytest</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MyTest...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>自定义注解代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>homewyk<span class="token punctuation">.</span>zhujie<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ElementType<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Retention<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RetentionPolicy<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Target<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注解默认是源文件级别</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Mytest</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//注解的属性定义</span>    String <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>注解解析代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>homewyk<span class="token punctuation">.</span>zhujie<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAnnoParser</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchMethodException<span class="token punctuation">,</span> SecurityException <span class="token punctuation">{</span>        Class <span class="token class-name">clazzClass</span> <span class="token operator">=</span> Demo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        Method method <span class="token operator">=</span> clazzClass<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//注意：注解默认是源代码级别的，运行阶段不可见</span>        <span class="token comment" spellcheck="true">// 需要进行修改！！</span>        Mytest annotation <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>Mytest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>annotation<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>annotation<span class="token punctuation">.</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="自定义注解步骤"><a href="#自定义注解步骤" class="headerlink" title="自定义注解步骤"></a>自定义注解步骤</h3><ol><li><p>编写一个注解</p><p>关键字：<code>@interface</code></p><p>注解的属性：返回值 名称（）<code>String name()</code></p><p>注解的属性为<code>value</code>，且注解的属性只有一个是，在使用注解时可以省略<code>value</code></p><p>主机的属性类型：基本类型 | String | 枚举类型 | 注解类型 | class类型 | 以上类型的一维数组</p></li><li><p>使用注解</p><p>有使用范围的限制（类、方法、字段）</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@MyAnnotation</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre></li><li><p>解析使用了注解的类：</p><p>元注解：代表修饰注解的注解</p><p>元注解的作用：限制定义的注解的特性</p><pre><code>@RetentionSOURCE:    注解在源码级别可见CLASS：注解在字节码文件级别可见RUNTIME：注解在整个运行阶段都可见@Target代表注解修饰的范围：类上使用，方法上使用，字段上使用FIELD:字段上可用此注解METHOD:方法上可以用此注解TYPE:类/接口上可以使用此注解</code></pre><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/%E6%B3%A8%E8%A7%A3%E7%9A%84%E5%8F%AF%E8%A7%81%E8%8C%83%E5%9B%B4.png" alt=""></p></li></ol><p><strong>在解析注解时，需要将注解设置为<code>RUNTIME</code></strong></p><p>关于注解的实质：从注解中解析出属性值</p><p>获取指定的方法:</p><pre class=" language-java"><code class="language-java">Method method <span class="token operator">=</span> clazzClass<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>获取指定方法的注解：</p><pre class=" language-java"><code class="language-java">Mytest annotation <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>Mytest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><blockquote><p>再次复习下reflect</p></blockquote><p>类加载器就是加载字节码文件</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8.png" alt=""></p><p>类加载器的三种类型：</p><p>不同类型的加载器加载不同的部分</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200413233050.png" alt=""></p><ul><li>BootStrap: 引导类加载器：加载的都是最基础的文件</li><li>ExtClassLoader: 拓展类加载器，加载的都是基础文件</li><li>AppClassLoader:应用类加载器，第三方的jar包和src下的java文件</li></ul><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200413233242.png" alt=""></p><p>获得类加载器：</p><pre class=" language-java"><code class="language-java">ClassLoader 字节码对象<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="类加载器举例"><a href="#类加载器举例" class="headerlink" title="类加载器举例"></a>类加载器举例</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>homewyk<span class="token punctuation">.</span>classer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Classer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ClassLoader loader <span class="token operator">=</span> Classer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String path <span class="token operator">=</span> loader<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"jdbc.properties"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> 类加载器 </tag>
            
            <tag> 动态代理 </tag>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Yolov3代码详细讲解</title>
      <link href="/2020/04/13/20200413-171508/"/>
      <url>/2020/04/13/20200413-171508/</url>
      
        <content type="html"><![CDATA[<p>网上资料太多了，先列参考资料！！</p><p><a href="https://blog.csdn.net/lilai619/article/details/79695109" target="_blank" rel="noopener">目标检测：YOLOv3: 训练自己的数据-未看</a></p><p><a href="https://blog.csdn.net/qq_36076110/article/details/80534982?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2&utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2" target="_blank" rel="noopener">YOLOv3-Pytorch学习笔记-正在看</a></p><p><a href="https://github.com/ayooshkathuria/pytorch-yolo-v3" target="_blank" rel="noopener">pytorch实现的yolov3</a></p><p><a href="https://www.zhihu.com/people/wang-ruo-xiao-83/posts" target="_blank" rel="noopener">逍遥王可爱4部</a></p><p><a href="https://zhuanlan.zhihu.com/p/62772142" target="_blank" rel="noopener">小绿叶</a></p><p><a href="https://blog.csdn.net/qq_24739717/article/details/97166266" target="_blank" rel="noopener">强大的流程图解释详细</a></p><p><a href="https://github.com/bobo0810/PyTorch-YOLOv3-master" target="_blank" rel="noopener">加注释的仓库</a></p><p><a href="https://blog.csdn.net/z649431508/article/details/100161318" target="_blank" rel="noopener">利用PyTorch自己动手从零实现YOLOv3（详细注释）主看这个！！</a></p><p><a href="https://www.codeleading.com/article/84442039641/" target="_blank" rel="noopener">代码先锋网</a></p><p><a href="https://blog.csdn.net/DaVinciL/article/details/100519392" target="_blank" rel="noopener">yolov3源码tf版本</a></p><h3 id="运行Demo效果"><a href="#运行Demo效果" class="headerlink" title="运行Demo效果"></a>运行Demo效果</h3><h3 id="关于argparse"><a href="#关于argparse" class="headerlink" title="关于argparse"></a>关于argparse</h3><p><a href="https://docs.python.org/zh-cn/3/howto/argparse.html" target="_blank" rel="noopener">参考资料:argparse教程</a></p><h4 id="位置参数的使用"><a href="#位置参数的使用" class="headerlink" title="位置参数的使用"></a>位置参数的使用</h4><p>简单使用：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> argparseparser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span><span class="token punctuation">)</span>parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""python demo1.py --helpusage: demo1.py [-h]optional arguments:  -h, --help  show this help message and exit--help 选项，也可缩写为 -h，是唯一一个可以直接使用的选项（即不需要指定该选项的内容）"""</span></code></pre><p>使用过程2：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> argparseparser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 增加 add_argument() 方法，该方法用于指定程序能够接受哪些命令行选项</span>parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"echo"</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"echo the string you use here"</span><span class="token punctuation">)</span>args <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>echo<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""python demo1.py -husage: demo1.py [-h] echopositional arguments:  echo        echo the string you use hereoptional arguments:  -h, --help  show this help message and exitpython demo1.py aaaa"""</span></code></pre><p>使用过程3：因为 <a href="https://docs.python.org/zh-cn/3/library/argparse.html#module-argparse" target="_blank" rel="noopener"><code>argparse</code></a> 会把我们传递给它的选项视作为字符串 ,增加类型信息</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> argparseparser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 增加 add_argument() 方法，该方法用于指定程序能够接受哪些命令行选项</span>parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"echo"</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"echo the string you use here"</span><span class="token punctuation">,</span> type<span class="token operator">=</span>int<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 得到终端的参数信息</span>args <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 通过args.(add_argument增加的参数)可直接进行显示</span><span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>echo<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""python demo1.py 24"""</span></code></pre><h4 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h4><p>如果使用可选参数，后面必须要加参数</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> argparseparsers <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span><span class="token punctuation">)</span>parsers<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"--version"</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">" version Info"</span><span class="token punctuation">)</span>args <span class="token operator">=</span> parsers<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> args<span class="token punctuation">.</span>version<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"version"</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">""">python demo1.py --versionusage: demo1.py [-h] [--version VERSION]demo1.py: error: argument --version: expected one argument>python demo1.py --version 1version"""</span></code></pre><h4 id="短选项"><a href="#短选项" class="headerlink" title="短选项"></a>短选项</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> argparseparsers <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span><span class="token punctuation">)</span>parsers<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"-v"</span> <span class="token punctuation">,</span><span class="token string">"--version"</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">" version Info"</span><span class="token punctuation">)</span>args <span class="token operator">=</span> parsers<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token triple-quoted-string string">""">python demo1.py --v 1Namespace(version='1')"""</span></code></pre><h4 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> argparseparsers <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span><span class="token punctuation">)</span>parsers<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"-v"</span> <span class="token punctuation">,</span><span class="token string">"--version"</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">"1"</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">" version Info"</span><span class="token punctuation">)</span>args <span class="token operator">=</span> parsers<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token triple-quoted-string string">""">python demo1.py Namespace(version='1')"""</span></code></pre><h3 id="判断设备"><a href="#判断设备" class="headerlink" title="判断设备"></a>判断设备</h3><pre class=" language-python"><code class="language-python">device <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">"cuda"</span> <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">"cpu"</span><span class="token punctuation">)</span></code></pre><h3 id="前馈网络的简化写法"><a href="#前馈网络的简化写法" class="headerlink" title="前馈网络的简化写法"></a>前馈网络的简化写法</h3><p>每一层的输出直接作为下一层的输入，这种网络称之为前馈神经网络<code>feedforward neural network</code>。</p><p>对于此类的网络如果每次都写复杂的<code>forward</code>函数会特别麻烦，再次就有两种简化方法：</p><ul><li><code>nn.ModuleList()</code>：</li><li><code>nn.Sequential()</code>：这是一个特殊的<code>module</code>，它可以包含几个子<code>module</code>,可以像<code>list</code>一样使用他，但不能直接把输入传入到<code>ModuleList</code></li></ul><h4 id="nn-Sequential-对象"><a href="#nn-Sequential-对象" class="headerlink" title="nn.Sequential()对象"></a>nn.Sequential()对象</h4><blockquote><p><code>nn.Sequential()</code>对象是类似<code>keras</code>的前馈模型的对象，可以为之添加层实现前馈神经网络。</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""nn.Sequential()的用法"""</span><span class="token keyword">import</span>  torch<span class="token keyword">import</span>  torchvision<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F<span class="token comment" spellcheck="true"># 第一种方法</span>net1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token punctuation">)</span>net1<span class="token punctuation">.</span>add_module<span class="token punctuation">(</span><span class="token string">'conv1'</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>net1<span class="token punctuation">.</span>add_module<span class="token punctuation">(</span><span class="token string">'batchnorm'</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>net1<span class="token punctuation">.</span>add_module<span class="token punctuation">(</span><span class="token string">'activate_layer'</span><span class="token punctuation">,</span>nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>net1<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""Sequential(  (conv1): Conv2d(3, 3, kernel_size=(3, 3), stride=(1, 1))  (batchnorm): BatchNorm2d(3, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  (activate_layer): ReLU())"""</span><span class="token comment" spellcheck="true"># 第二种方法</span>net2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>    nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>net2<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""Sequential(  (0): Conv2d(3, 3, kernel_size=(3, 3), stride=(1, 1))  (1): BatchNorm2d(3, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  (2): ReLU())"""</span><span class="token comment" spellcheck="true"># 第三种方法</span><span class="token keyword">from</span> collections <span class="token keyword">import</span> OrderedDictnet3 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>    OrderedDict<span class="token punctuation">(</span>        <span class="token punctuation">[</span>            <span class="token punctuation">(</span><span class="token string">'conv'</span><span class="token punctuation">,</span>nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span><span class="token string">'batchnorm'</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span><span class="token string">'activate'</span><span class="token punctuation">,</span>nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">]</span>    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print 对象即可</span><span class="token keyword">print</span><span class="token punctuation">(</span>net3<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""Sequential(  (conv): Conv2d(3, 3, kernel_size=(3, 3), stride=(1, 1))  (batchnorm): BatchNorm2d(3, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  (activate): ReLU())"""</span><span class="token comment" spellcheck="true"># 提取Module对象</span><span class="token comment" spellcheck="true"># 可以根据名字或者序号取出子module</span><span class="token keyword">print</span><span class="token punctuation">(</span>net1<span class="token punctuation">.</span>conv1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>net2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>net3<span class="token punctuation">.</span>conv<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""Conv2d(3, 3, kernel_size=(3, 3), stride=(1, 1))Conv2d(3, 3, kernel_size=(3, 3), stride=(1, 1))Conv2d(3, 3, kernel_size=(3, 3), stride=(1, 1))"""</span><span class="token comment" spellcheck="true"># 调用模型</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'----------输入参数--------'</span><span class="token punctuation">)</span>input <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'----------输出参数--------'</span><span class="token punctuation">)</span>output <span class="token operator">=</span> net1<span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span></code></pre><h4 id="nn-ModuleList-对象"><a href="#nn-ModuleList-对象" class="headerlink" title="nn.ModuleList()对象"></a>nn.ModuleList()对象</h4><blockquote><p><code>ModuleList</code>是<code>Module</code>的子类，当在<code>Module</code>中使用它的时候，就能自动识别为子module。</p><p>和普通<code>list</code>不一样，它和<code>torch</code>的其他机制结合紧密，继承了<code>nn.Module</code>的网络模型<code>class</code>可以使用<code>nn.ModuleList</code>并识别其中的<code>parameters</code>，当然这只是个<code>list</code>，不会自动实现<code>forward</code>方法， </p></blockquote><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""nn.ModuleList()对象"""</span><span class="token keyword">import</span>  torch<span class="token keyword">import</span>  torchvision<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> FmodelList <span class="token operator">=</span> nn<span class="token punctuation">.</span>ModuleList<span class="token punctuation">(</span>    <span class="token punctuation">[</span>        nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span>input <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">for</span> model <span class="token keyword">in</span> modelList<span class="token punctuation">:</span>    input <span class="token operator">=</span> model<span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token comment" spellcheck="true">## error,因为modelList未实现forward方法</span><span class="token comment" spellcheck="true">#output = modelList(input)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MyModel</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>MyModel<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">## 普通的list</span>        self<span class="token punctuation">.</span>list <span class="token operator">=</span> <span class="token punctuation">[</span>nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">## ModuleList</span>        self<span class="token punctuation">.</span>modules_list <span class="token operator">=</span> nn<span class="token punctuation">.</span>ModuleList<span class="token punctuation">(</span><span class="token punctuation">[</span>nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>model <span class="token operator">=</span> MyModel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""MyModel(  (modules_list): ModuleList(    (0): Conv2d(3, 3, kernel_size=(3, 3), stride=(1, 1))    (1): ReLU()  ))"""</span><span class="token keyword">for</span> name<span class="token punctuation">,</span> param <span class="token keyword">in</span> model<span class="token punctuation">.</span>named_parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token string">" "</span> <span class="token punctuation">,</span>param<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""modules_list.0.weight   torch.Size([3, 3, 3, 3])modules_list.0.bias   torch.Size([3])"""</span></code></pre><p>可见，<code>list</code>的字module并不能被主module所识别，而ModuleList中的字module能够被主module所识别！</p><p>这意味着如果用list保存子module，将无法调整其参数，因其未加入到主module的参数中。 </p><p>除ModuleList之外还有ParameterList，其是一个可以包含多个parameter的类list对象。在实际应用中，使用方式与ModuleList类似。如果在构造函数<code>__init__</code>中用到list、tuple、dict等对象时，一定要思考是否应该用ModuleList或ParameterList代替。 </p><h3 id="关于bath-normalization"><a href="#关于bath-normalization" class="headerlink" title="关于bath normalization"></a>关于bath normalization</h3><blockquote><p> 有偏置b的卷积层不适合和batch normalization层一起出现</p></blockquote><p>偏置b在网络中的目的是使得当某一层layer的输入分布不是0为中心时给予偏置补偿（比如简单来看，要拟合y=wx+b，b=100， 那么用没有偏置的单层网络y=wx是怎么都无法拟合的！）</p><p>但是，当该层layer的输入经过归一化，也就是0为中心时，不要偏置也可以拟合（对应上述的例子，就是把所有数据移到原点附近，这时候y=wx就能拟合，拟合方向就行）</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> 目标检测 </tag>
            
            <tag> YOLO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02-pytorch-线性回归</title>
      <link href="/2020/04/13/20200413-150000/"/>
      <url>/2020/04/13/20200413-150000/</url>
      
        <content type="html"><![CDATA[<h2 id="第二章：线性回归"><a href="#第二章：线性回归" class="headerlink" title="第二章：线性回归"></a>第二章：线性回归</h2><blockquote><p>深度学习就是梯度下降来支撑起来的</p></blockquote><h3 id="Gradient-Descent"><a href="#Gradient-Descent" class="headerlink" title="Gradient Descent"></a>Gradient Descent</h3><p>求解函数的极值，就是对函数进行求导，然后不断进行迭代！</p><ul><li><p>梯度下降的直观演示</p><ul><li>找到下降方法</li><li>求一次导</li><li>走一步： $x^* = x - \bigtriangleup x$</li></ul></li><li><p>不同学习速率$learning~rate$的区别</p></li><li><p>不同求解器的梯度下降</p></li></ul><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200414111212.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200414112908.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/dsdasdd.gif" alt=""></p><h3 id="如何得到一个线性方程"><a href="#如何得到一个线性方程" class="headerlink" title="如何得到一个线性方程"></a>如何得到一个线性方程</h3><ul><li>变量消元法</li></ul><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200414111430.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200414113426.png" alt=""></p><p>点数据在检测或者处理的时候，会出现高斯噪声的现象$ \epsilon \cdot N(0.01,1)$</p><p>处理大量数据样本，得到整体表现较好时的参数：使得$loss$最小</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200414111719.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200414113546.png" alt=""></p><h3 id="一个线性回归的例子"><a href="#一个线性回归的例子" class="headerlink" title="一个线性回归的例子"></a>一个线性回归的例子</h3><p>真实数据：如图红色点</p><p>真实方程：$y = 1.477 \times x + 0.089 + \epsilon$</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200414113652.png" alt=""></p><p>求解参数$w,b$实质得到一条表现较好的线性方程</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200414113713.png" alt=""></p><p>我们在进行线性回归的时候需要优化参数：这个参数就是损失函数</p><p>损失函数使用平方和损失</p><p>就是：</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200414112041.png" alt=""></p><p>我们的神经网络是如何进行优化的：</p><p>处于最凹处或者局部最凹处</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200414112216.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200414113952.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/assdsa.gif" alt=""></p><p>线性回归<code>Linear Regression</code>：</p><p>取值为<strong>无穷</strong></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200414114242.png" alt=""></p><p>逻辑回归<code>Logistic Regression</code></p><p>在<code>Linear Regression</code>基础上添加了激活函数<code>sigmode</code>函数</p><p>取值范围在[0,1]</p><h3 id="使用numpy手动梯度下降"><a href="#使用numpy手动梯度下降" class="headerlink" title="使用numpy手动梯度下降"></a>使用numpy手动梯度下降</h3><p>一组数据拟合为线性函数  </p><p>$y = wx + b$  </p><p>$loss = \sum_i^n(y-(wx+b))^2$  </p><p>$\frac{\partial loss}{\partial w_i} = - \frac{2\times x}{n}(y-(wx+b)) $  </p><p>$\frac{\partial loss}{\partial b_i} = - \frac{2}{n}(y-(wx+b)) $  </p><hr><p>思路:</p><ol><li>加载数据</li><li>定义变量，赋初值</li><li>计算MSE</li><li>梯度下降函数</li><li>迭代</li><li>编写主函数</li></ol><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200421154043.png" alt=""></p><h4 id="自己实现"><a href="#自己实现" class="headerlink" title="自己实现"></a>自己实现</h4><blockquote><p>使用coLab</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1. 加载数据集</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">def</span> <span class="token function">load_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  points <span class="token operator">=</span> np<span class="token punctuation">.</span>genfromtxt<span class="token punctuation">(</span><span class="token string">'/content/drive/My Drive/data.csv'</span><span class="token punctuation">,</span>delimiter<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> points<span class="token keyword">print</span><span class="token punctuation">(</span>points<span class="token punctuation">.</span>shape<span class="token punctuation">)</span></code></pre><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200421153156.png" alt=""></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 梯度下降</span><span class="token keyword">def</span> <span class="token function">gradient_desent</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> w<span class="token punctuation">,</span> b<span class="token punctuation">,</span> lr<span class="token punctuation">)</span><span class="token punctuation">:</span>  gradient_w <span class="token operator">=</span> <span class="token number">0.0</span>  gradient_b <span class="token operator">=</span> <span class="token number">0.0</span>  n <span class="token operator">=</span> float<span class="token punctuation">(</span>len<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    x1 <span class="token operator">=</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    y1 <span class="token operator">=</span> y<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    gradient_w <span class="token operator">+=</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>x1<span class="token operator">/</span>n<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>y1 <span class="token operator">-</span> <span class="token punctuation">(</span>w<span class="token operator">*</span>x1 <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span>    gradient_b <span class="token operator">+=</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">/</span>n<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>y1 <span class="token operator">-</span> <span class="token punctuation">(</span>w<span class="token operator">*</span>x1 <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span>  new_w <span class="token operator">=</span> w <span class="token operator">-</span> lr<span class="token operator">*</span>gradient_w  new_b <span class="token operator">=</span> b <span class="token operator">-</span> lr<span class="token operator">*</span>gradient_b  <span class="token keyword">return</span> <span class="token punctuation">[</span>new_w<span class="token punctuation">,</span> new_b<span class="token punctuation">]</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># MSE</span><span class="token keyword">def</span> <span class="token function">mse</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> w<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>  total_loss <span class="token operator">=</span> <span class="token number">0.0</span>  <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    x1 <span class="token operator">=</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    y1 <span class="token operator">=</span> y<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    total_loss <span class="token operator">+=</span> <span class="token punctuation">(</span>y1 <span class="token operator">-</span> <span class="token punctuation">(</span>w<span class="token operator">*</span>x1 <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span>  <span class="token keyword">return</span> total_loss<span class="token operator">/</span>float<span class="token punctuation">(</span>len<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 2. 定义函数</span><span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token triple-quoted-string string">"""定义运行函数"""</span>  <span class="token comment" spellcheck="true"># 加载数据集</span>  points <span class="token operator">=</span> load_data<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 参数初始化</span>  initial_w <span class="token operator">=</span> <span class="token number">0.0</span>  initial_b <span class="token operator">=</span> <span class="token number">0.0</span>  x <span class="token operator">=</span> points<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span>  y <span class="token operator">=</span> points<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># print(x.dtype,x.shape, y.shape)</span>  learning_rate <span class="token operator">=</span> <span class="token number">0.0001</span>  num_iterator <span class="token operator">=</span> <span class="token number">1000</span>  <span class="token comment" spellcheck="true"># 迭代</span>  w <span class="token operator">=</span> initial_w  b <span class="token operator">=</span> initial_b  <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>num_iterator<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">[</span>w<span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token operator">=</span> gradient_desent<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> w<span class="token punctuation">,</span> b<span class="token punctuation">,</span> learning_rate<span class="token punctuation">)</span>    total_loss <span class="token operator">=</span> mse<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> w<span class="token punctuation">,</span> b<span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'current loss:'</span><span class="token punctuation">,</span>total_loss<span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span>b<span class="token punctuation">)</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200421153336.png" alt=""></p><h4 id="课程实现"><a href="#课程实现" class="headerlink" title="课程实现"></a>课程实现</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">def</span> <span class="token function">computer_error</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>w<span class="token punctuation">,</span>points<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    计算当前的b和w所造成的的平均误差    :param b:    :param w:    :param points:    :return:    """</span>    totalErr <span class="token operator">=</span> <span class="token number">0.0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>points<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> points<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>        y <span class="token operator">=</span> points<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>        totalErr <span class="token operator">+=</span> <span class="token punctuation">(</span>y <span class="token operator">-</span><span class="token punctuation">(</span>w<span class="token operator">*</span>x <span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span>    <span class="token keyword">return</span> totalErr <span class="token operator">/</span> float<span class="token punctuation">(</span>len<span class="token punctuation">(</span>points<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">step_gradient</span><span class="token punctuation">(</span>b_current<span class="token punctuation">,</span> w_current<span class="token punctuation">,</span> points<span class="token punctuation">,</span> learningRate<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    进行梯度下降    :param b_current:    :param w_current:    :param points:    :param learningRate:    :return:    """</span>    b_gradient <span class="token operator">=</span> <span class="token number">0.0</span>    w_gradient <span class="token operator">=</span> <span class="token number">0.0</span>    N <span class="token operator">=</span> float<span class="token punctuation">(</span>len<span class="token punctuation">(</span>points<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>points<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> points<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>        y <span class="token operator">=</span> points<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>        b_gradient <span class="token operator">+=</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">/</span>N<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>y <span class="token operator">-</span><span class="token punctuation">(</span>w_current <span class="token operator">*</span> x <span class="token operator">+</span> b_current<span class="token punctuation">)</span><span class="token punctuation">)</span>        w_gradient <span class="token operator">+=</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">/</span>N<span class="token punctuation">)</span> <span class="token operator">*</span> x <span class="token operator">*</span> <span class="token punctuation">(</span>y <span class="token operator">-</span> <span class="token punctuation">(</span>w_current <span class="token operator">*</span> x <span class="token operator">+</span> b_current<span class="token punctuation">)</span><span class="token punctuation">)</span>    new_b <span class="token operator">=</span> b_current <span class="token operator">-</span> <span class="token punctuation">(</span>learningRate <span class="token operator">*</span> b_gradient<span class="token punctuation">)</span>    new_w <span class="token operator">=</span> w_current <span class="token operator">-</span> <span class="token punctuation">(</span>learningRate <span class="token operator">*</span> w_gradient<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>new_b<span class="token punctuation">,</span> new_w<span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">gradient_desent_running</span><span class="token punctuation">(</span>points<span class="token punctuation">,</span> starting_b<span class="token punctuation">,</span> starting_w<span class="token punctuation">,</span> learning_rate<span class="token punctuation">,</span> num_iterator<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    实现num_iterator次梯度下降    :param points:    :param starting_b:    :param starting_w:    :param learning_rate:    :param num_iterator:    :return:    """</span>    b <span class="token operator">=</span> starting_b    w <span class="token operator">=</span> starting_w    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>num_iterator<span class="token punctuation">)</span><span class="token punctuation">:</span>        b<span class="token punctuation">,</span> w <span class="token operator">=</span> step_gradient<span class="token punctuation">(</span>b<span class="token punctuation">,</span> w<span class="token punctuation">,</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>points<span class="token punctuation">)</span><span class="token punctuation">,</span> learning_rate<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>b<span class="token punctuation">,</span>w<span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    执行代码    :return:    """</span>    <span class="token comment" spellcheck="true"># 加载数据集</span>    points <span class="token operator">=</span> np<span class="token punctuation">.</span>genfromtxt<span class="token punctuation">(</span><span class="token string">"data.csv"</span><span class="token punctuation">,</span> delimiter<span class="token operator">=</span><span class="token string">","</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#print(points.shape)</span>    <span class="token comment" spellcheck="true"># 参数初始化</span>    learning_rate <span class="token operator">=</span> <span class="token number">0.0001</span>    initial_b <span class="token operator">=</span> <span class="token number">0.0</span>    initial_w <span class="token operator">=</span> <span class="token number">0.0</span>    num_iterator <span class="token operator">=</span> <span class="token number">1000</span>    <span class="token comment" spellcheck="true"># 格式化输出信息</span>    <span class="token comment" spellcheck="true">## 开始的平均误差损失</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Starting gradient descent at b = {0} w = {1} error = {2}"</span><span class="token punctuation">.</span>          format<span class="token punctuation">(</span>initial_b<span class="token punctuation">,</span>initial_w<span class="token punctuation">,</span>computer_error<span class="token punctuation">(</span>initial_b<span class="token punctuation">,</span>initial_w<span class="token punctuation">,</span>points<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"running...."</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 进行梯度下降，迭代1000次</span>    <span class="token punctuation">[</span>b<span class="token punctuation">,</span> w<span class="token punctuation">]</span> <span class="token operator">=</span> gradient_desent_running<span class="token punctuation">(</span>points<span class="token punctuation">,</span> initial_b<span class="token punctuation">,</span>initial_w<span class="token punctuation">,</span>learning_rate<span class="token punctuation">,</span>num_iterator<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"After {0} iterations b = {1}, w = {2}, error = {3}"</span><span class="token punctuation">.</span>          format<span class="token punctuation">(</span>num_iterator<span class="token punctuation">,</span> b<span class="token punctuation">,</span> w<span class="token punctuation">,</span>                 computer_error<span class="token punctuation">(</span>b<span class="token punctuation">,</span> w<span class="token punctuation">,</span> points<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    run<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""Starting gradient descent at b = 0.0 w = 0.0 error = 5565.107834483211running....After 1000 iterations b = 0.08893651993741346, w = 1.4777440851894448, error = 112.61481011613473"""</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> pytorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01-pytorch-初见pytorch</title>
      <link href="/2020/04/13/20200413-141505/"/>
      <url>/2020/04/13/20200413-141505/</url>
      
        <content type="html"><![CDATA[<h2 id="第一章：初见pytorch"><a href="#第一章：初见pytorch" class="headerlink" title="第一章：初见pytorch"></a>第一章：初见pytorch</h2><blockquote><p>学习资料：龙良曲 深度学习与pytorch入门实战</p></blockquote><h3 id="pytorch的发展"><a href="#pytorch的发展" class="headerlink" title="pytorch的发展"></a>pytorch的发展</h3><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200413142203.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200413142356.png" alt=""></p><h3 id="同类框架"><a href="#同类框架" class="headerlink" title="同类框架"></a>同类框架</h3><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200413142518.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200422112542.png" alt=""></p><h3 id="动态图与静态图"><a href="#动态图与静态图" class="headerlink" title="动态图与静态图"></a>动态图与静态图</h3><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200413142621.png" alt=""></p><p>动态图：直观，容易理解，一步一步计算</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200413142717.png" alt=""></p><p>静态图：先创建一个公式模型，然后在运行时<code>feed</code>参数,不好调试！</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200413142756.png" alt=""></p><p>这两种语言的综合评价：</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200413142927.png" alt=""></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>这两种框架都要进行学习，因为公司写东西的话不确定使用哪种框架。初学的话推荐使用pytorch，简单易用，调试方便，可以将精力放在算法的研究上去。</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200413143031.png" alt=""></p><p>pytorch的生态：需要注逐一学习</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200421111357.png" alt=""></p><h3 id="pytorch的举例"><a href="#pytorch的举例" class="headerlink" title="pytorch的举例"></a>pytorch的举例</h3><blockquote><p>使用平台 coLab</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 深度学习pytorch</span><span class="token comment" spellcheck="true">## example</span><span class="token comment" spellcheck="true">### GPU加速</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 查看版本</span><span class="token comment" spellcheck="true"># 判断GPU是否可用</span><span class="token keyword">import</span> torch <span class="token keyword">import</span> torchvision<span class="token keyword">import</span> time<span class="token keyword">print</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>__version__<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200421120023.png" alt=""></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># ---测试CPU的运行时间---</span><span class="token comment" spellcheck="true">## [0,1)</span>a <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">)</span>b <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> b<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>to <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>c <span class="token operator">=</span> torch<span class="token punctuation">.</span>matmul<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>t1 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>device<span class="token punctuation">,</span>t1<span class="token operator">-</span>to<span class="token punctuation">)</span></code></pre><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200421120052.png" alt=""></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># ---测试CPU的运行时间---</span><span class="token comment" spellcheck="true">## [0,1)</span>a <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">)</span>b <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  a <span class="token operator">=</span> a<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>  b <span class="token operator">=</span> b<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>to <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>c <span class="token operator">=</span> torch<span class="token punctuation">.</span>matmul<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>t1 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>device<span class="token punctuation">,</span>t1<span class="token operator">-</span>to<span class="token punctuation">)</span></code></pre><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200421120137.png" alt=""></p><p>目标函数为： $y = a^2 \times x + b \times x + c$</p><p>在程序中:</p><ul><li><p>$x$的初值为$1.0$</p></li><li><p>$a$的初值为$1.0$</p></li><li><p>$b$的初值为$2.0$</p></li><li><p>$c$的初值为$3.0$</p></li></ul><p>$\frac{\partial y}{\partial a} = 2ax = 2.0 $</p><p>$\frac{\partial y}{\partial b} = x = 1.0$</p><p>$\frac{\partial y}{\partial c} = 1 = 1$</p><hr><p>注意：</p><p>Tensor变量的requires_grad的属性默认为False,</p><p>若一个节点requires_grad被设置为True，那么所有依赖它的节点的requires_grad都为True</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># ---自动求导---</span><span class="token comment" spellcheck="true">## 1. 设置被求导数的标志位</span><span class="token comment" spellcheck="true">## 2. 求导函数 autograd.grad(y,[a,b,c])</span><span class="token comment" spellcheck="true">## 3. 导数的值组成梯度，梯度值在autograd.grad(y,[a,b,c])的返回值中</span><span class="token keyword">from</span> torch <span class="token keyword">import</span> autogradx <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">## 默认requires_grad = False</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>requires_grad<span class="token punctuation">)</span>a <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> requires_grad<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>b <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">,</span> requires_grad<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>c <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">.</span><span class="token punctuation">,</span> requires_grad<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>y <span class="token operator">=</span> a<span class="token operator">**</span><span class="token number">2</span> <span class="token operator">*</span> x <span class="token operator">+</span> b <span class="token operator">*</span> x <span class="token operator">+</span> c<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'before:'</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>grad<span class="token punctuation">,</span> b<span class="token punctuation">.</span>grad<span class="token punctuation">,</span> c<span class="token punctuation">.</span>grad<span class="token punctuation">)</span>grads <span class="token operator">=</span> autograd<span class="token punctuation">.</span>grad<span class="token punctuation">(</span>y<span class="token punctuation">,</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'after:'</span><span class="token punctuation">,</span> grads<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> grads<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> grads<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200421120247.png" alt=""></p><h4 id="常用的网络层"><a href="#常用的网络层" class="headerlink" title="常用的网络层"></a>常用的网络层</h4><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200413145810.png" alt=""></p><h2 id="pytorch的开发环境"><a href="#pytorch的开发环境" class="headerlink" title="pytorch的开发环境"></a>pytorch的开发环境</h2><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200413144023.png" alt=""></p><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      <categories>
          
          <category> pytorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>08-数据结构Java版-双向链表</title>
      <link href="/2020/04/13/20200413-114027/"/>
      <url>/2020/04/13/20200413-114027/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/homewyk/cloudimg/raw/master/images.jpg" alt=""></p><h2 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h2><p>单向链表只能实现一个方向的遍历操作，双向链表可以实现双向遍历</p><p>单向链表不能实现自我删除，需要靠辅助节点，双向链表可以实现自我删除</p><h3 id="双向链表的节点定义"><a href="#双向链表的节点定义" class="headerlink" title="双向链表的节点定义"></a>双向链表的节点定义</h3><p>对比与单链表多了一个指针域</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Dnode</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//默认初始化为0</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//默认初始化为null</span>    <span class="token keyword">private</span> String data<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//默认初始化为null</span>    <span class="token keyword">private</span> Dnode next<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//默认初始化为null</span>    <span class="token keyword">private</span> Dnode pre<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="双向链表的基本操作"><a href="#双向链表的基本操作" class="headerlink" title="双向链表的基本操作"></a>双向链表的基本操作</h3><blockquote><p>较难理解的是按照顺序添加节点和删除某一个节点</p></blockquote><h4 id="添加节点"><a href="#添加节点" class="headerlink" title="添加节点"></a>添加节点</h4><ul><li>从尾部添加节点</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * 在尾部插入节点信息     * @param node     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>Dnode node<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Dnode temp <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        temp<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        node<span class="token punctuation">.</span><span class="token function">setPre</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><ul><li>按照顺序添加节点</li></ul><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200414092256.png" alt=""></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * 按照顺序添加节点信息     * 费了很长的时间！！      * 还是要画图能够准确的描述问题     * 分为2个部分：     *     - 在尾部插入 2条语句     *  - 在中间插入需要4条语句     * @param node     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addById</span><span class="token punctuation">(</span>Dnode node<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Dnode temp <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//插入到temp节点的后面</span>            <span class="token comment" spellcheck="true">// 画图一目了然！！</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> node<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                node<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                node<span class="token punctuation">.</span><span class="token function">setPre</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>                temp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setPre</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>                temp<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> node<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"id为%d的节点已经存在~~\n"</span><span class="token punctuation">,</span>node<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        temp<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        node<span class="token punctuation">.</span><span class="token function">setPre</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="更新节点信息"><a href="#更新节点信息" class="headerlink" title="更新节点信息"></a>更新节点信息</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * 通过id更新节点信息     * @param node     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>Dnode node<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"链表为空~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Dnode temp <span class="token operator">=</span> head<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> node<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>            temp<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"未找见id = %d 的节点\n"</span><span class="token punctuation">,</span>node<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h4><blockquote><p>画图</p></blockquote><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200414092415.png" alt=""></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * 通过id删除节点     * @param id     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"链表为空~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Dnode temp <span class="token operator">=</span> head<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>                flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>            temp<span class="token punctuation">.</span><span class="token function">getPre</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            temp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setPre</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">getPre</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"未找到id为%d的节点\n"</span><span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="查找节点"><a href="#查找节点" class="headerlink" title="查找节点"></a>查找节点</h3><blockquote><p>简单操作</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * 通过id寻找节点     * @param id     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">findById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"链表为空~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Dnode temp <span class="token operator">=</span> head<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>                flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d:%s\n"</span><span class="token punctuation">,</span>temp<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>temp<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"未找到id为%d的节点\n"</span><span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="整体的测试代码实现"><a href="#整体的测试代码实现" class="headerlink" title="整体的测试代码实现"></a>整体的测试代码实现</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>homewyk<span class="token punctuation">.</span>linked<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DoubleLinkedListDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"双向链表的测试程序实现"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DoubleLinkedList d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DoubleLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> key <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> loop <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>loop<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a(add): 添加节点至链表尾部"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"l(listAll): 显示所有的链表节点"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"r(listReverseAll): d倒序显示所有的链表节点"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A(addById): 按照id顺序添加至链表的相应位置"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"d(delById): 按照id顺序删除链表的相应位置"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"u(update): 按照id更新链表的相应数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"f(findById): 按照id查找链表的相应数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"e(exit): 退出测试程序"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            key <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token string">'a'</span><span class="token operator">:</span>                d<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dnode</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                d<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dnode</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                d<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dnode</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                d<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dnode</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                d<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dnode</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"5"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'l'</span><span class="token operator">:</span>                d<span class="token punctuation">.</span><span class="token function">listAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'A'</span><span class="token operator">:</span>                d<span class="token punctuation">.</span><span class="token function">addById</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dnode</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">"6"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                d<span class="token punctuation">.</span><span class="token function">addById</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dnode</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                d<span class="token punctuation">.</span><span class="token function">addById</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dnode</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                d<span class="token punctuation">.</span><span class="token function">addById</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dnode</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                d<span class="token punctuation">.</span><span class="token function">addById</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dnode</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'r'</span><span class="token operator">:</span>                d<span class="token punctuation">.</span><span class="token function">ListReverseAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'d'</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入要删除的id："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> id <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                d<span class="token punctuation">.</span><span class="token function">delById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'u'</span><span class="token operator">:</span>                d<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dnode</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">"66"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'f'</span><span class="token operator">:</span>                d<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'e'</span><span class="token operator">:</span>                loop <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>         scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"程序已经退出~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">DoubleLinkedList</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//新建头结点</span>    <span class="token keyword">private</span> Dnode head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dnode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 在尾部插入节点信息     * @param node     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>Dnode node<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Dnode temp <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        temp<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        node<span class="token punctuation">.</span><span class="token function">setPre</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 从头部列出节点     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Dnode temp <span class="token operator">=</span> head<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获得头结点     * @return     */</span>    <span class="token keyword">public</span> Dnode <span class="token function">getHeadNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获得尾结点     * @return     */</span>    <span class="token keyword">public</span> Dnode <span class="token function">getTailNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Dnode temp <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 逆序打印节点     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ListReverseAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Dnode temp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getTailNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">getPre</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span><span class="token function">getPre</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 按照顺序添加节点信息     * 费了很长的时间！！      * 还是要画图能够准确的描述问题     * 分为2个部分：     *     - 在尾部插入 2条语句     *  - 在中间插入需要4条语句     * @param node     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addById</span><span class="token punctuation">(</span>Dnode node<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Dnode temp <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//插入到temp节点的后面</span>            <span class="token comment" spellcheck="true">// 画图一目了然！！</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> node<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                node<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                node<span class="token punctuation">.</span><span class="token function">setPre</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>                temp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setPre</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>                temp<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> node<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"id为%d的节点已经存在~~\n"</span><span class="token punctuation">,</span>node<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        temp<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        node<span class="token punctuation">.</span><span class="token function">setPre</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 通过id删除节点     * @param id     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"链表为空~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Dnode temp <span class="token operator">=</span> head<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>                flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>            temp<span class="token punctuation">.</span><span class="token function">getPre</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            temp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setPre</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">getPre</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"未找到id为%d的节点\n"</span><span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 通过id更新节点信息     * @param node     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>Dnode node<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"链表为空~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Dnode temp <span class="token operator">=</span> head<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> node<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>            temp<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"未找见id = %d 的节点\n"</span><span class="token punctuation">,</span>node<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 通过id寻找节点     * @param id     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">findById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"链表为空~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Dnode temp <span class="token operator">=</span> head<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>                flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d:%s\n"</span><span class="token punctuation">,</span>temp<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>temp<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"未找到id为%d的节点\n"</span><span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*** * 双向链表节点定义 * @author asdw1 * */</span><span class="token keyword">class</span> <span class="token class-name">Dnode</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//默认初始化为0</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//默认初始化为null</span>    <span class="token keyword">private</span> String data<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//默认初始化为null</span>    <span class="token keyword">private</span> Dnode next<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//默认初始化为null</span>    <span class="token keyword">private</span> Dnode pre<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Dnode</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> String data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setData</span><span class="token punctuation">(</span>String data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Dnode <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNext</span><span class="token punctuation">(</span>Dnode next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Dnode <span class="token function">getPre</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> pre<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPre</span><span class="token punctuation">(</span>Dnode pre<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pre <span class="token operator">=</span> pre<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Dnode [id="</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">", data="</span> <span class="token operator">+</span> data <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>07-数据结构Java版-单向链表题目</title>
      <link href="/2020/04/12/20200412-120227/"/>
      <url>/2020/04/12/20200412-120227/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/homewyk/cloudimg/raw/master/images.jpg" alt=""></p><h2 id="单链表题目"><a href="#单链表题目" class="headerlink" title="单链表题目"></a>单链表题目</h2><ol><li>实现菜单操作（主函数部分）</li><li>实现单链表的增删改查操作&amp;按顺序增加操作</li><li>实现计算单链表的大小</li><li>实现单链表的逆序输出</li><li>实现查找倒数第K个节点</li><li>实现单链表结构不变，逆序打印</li></ol><h3 id="部分题目主要思路"><a href="#部分题目主要思路" class="headerlink" title="部分题目主要思路"></a>部分题目主要思路</h3><ol><li>计算单链表的大小：与单链表的显示操作一致<ul><li>判断单链表是否为空</li><li>定义指针变量进行变量</li><li>定义计数器</li><li>返回值为计数器的值</li></ul></li></ol><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 得到链表的size     * @param head     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span>Node head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"链表为空~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Node temp <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            count <span class="token operator">++</span><span class="token punctuation">;</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><ol start="2"><li><p>实现单链表的逆序输出:</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200412120147.png" alt=""></p></li></ol><ul><li>单链表为空或者只有一个元素时，无需逆序</li><li>定义新的链表节点</li><li>不断的取出原链表的第一个链表节点，头结点要不断的链接到原链表的第二个节点</li><li>新取出的节点链接到新头结点的第一个节点位置</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * 反转单链表:     * 1. 当链表为空或者只有一个节点时，无需反抓     * 2. 思路：     *         2.1 取出原链表的第一个节点，然后将head.next指向第二个节点，这样进行前进     *         2.2 将出的节点接在新节点的第一个位置     *         2.3 将新节点在重新赋值给head     * @param head     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reverseLinkedList</span><span class="token punctuation">(</span>Node head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>next <span class="token operator">==</span> null <span class="token operator">||</span>head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"链表为空或者只有一个节点~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Node newHead <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//第一个节点</span>        Node temp <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//原链表节点取出，指向下一个</span>            Node node <span class="token operator">=</span> temp<span class="token punctuation">;</span>            head<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            System.out.println("原："+node);</span>            <span class="token comment" spellcheck="true">//原链表节点连接到新链表的第一个位置</span>            node<span class="token punctuation">.</span>next <span class="token operator">=</span> newHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            newHead<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            System.out.println("后：" + newHead.next);</span>            <span class="token comment" spellcheck="true">//变量不断的指向下一个head.next</span>            temp <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        head<span class="token punctuation">.</span>next <span class="token operator">=</span> newHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><ol start="3"><li>实现查找倒数第K个节点<ul><li>遍历链表得到单链表的大小</li><li>使用<code>size-k</code>得到相应的位置信息</li><li>使用<code>for</code>循环</li></ul></li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * 得到单链表的倒数第k个节点     *  1 2 3 4 5   k = 1     *  size = 5    k = 1     *   5-1 = 4     * @param head     * @return     */</span>    <span class="token keyword">public</span> Node <span class="token function">findLastIndex</span><span class="token punctuation">(</span>Node head<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> k <span class="token operator">></span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"k输入错误~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Node temp <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size <span class="token operator">-</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><ol start="4"><li>单链表的逆序打印<ul><li>方式1： 先将单链表进行反转操作，然后再遍历即可，这样的做的问题是会破坏原来的单链表的结构，不建议</li><li>方式2：可以利用栈这个数据结构，将各个节点压入到栈中，然后利用栈的先进后出的特点，就实现了逆序打印的效果.</li></ul></li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * 逆序打印：     * 使用stack     * @param head     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>Node head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"链表为空~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Stack<span class="token operator">&lt;</span>Node<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span>Node<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Node temp <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            stack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="整体的代码实现"><a href="#整体的代码实现" class="headerlink" title="整体的代码实现"></a>整体的代码实现</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>homewyk<span class="token punctuation">.</span>linked<span class="token punctuation">.</span>review<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Stack<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinkedListReview</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"单链表测试程序"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LinkedListt l <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedListt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> loop <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> key <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">;</span>        Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>loop<span class="token punctuation">)</span> <span class="token punctuation">{</span>            key <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token string">'a'</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"在单链表尾部添加"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                l<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                l<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                l<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                l<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                l<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"5"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'b'</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"按照顺序添加节点至单链表"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                l<span class="token punctuation">.</span><span class="token function">addById</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"5"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                l<span class="token punctuation">.</span><span class="token function">addById</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                l<span class="token punctuation">.</span><span class="token function">addById</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                l<span class="token punctuation">.</span><span class="token function">addById</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                l<span class="token punctuation">.</span><span class="token function">addById</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                l<span class="token punctuation">.</span><span class="token function">addById</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'d'</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除指定的节点"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> index <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                l<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'u'</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"更新指定的节点"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                l<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"20"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'f'</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查找相应的元素"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                l<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'l'</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"列出所有的节点"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                l<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'s'</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"得到链表的长度"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"链表的长度为："</span> <span class="token operator">+</span> l<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span><span class="token function">getHeadNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'k'</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查找倒数第K个节点"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> k <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第"</span> <span class="token operator">+</span> k <span class="token operator">+</span><span class="token string">"个节点为："</span> <span class="token operator">+</span>l<span class="token punctuation">.</span><span class="token function">findLastIndex</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span><span class="token function">getHeadNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'r'</span><span class="token operator">:</span>                l<span class="token punctuation">.</span><span class="token function">reverseLinkedList</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span><span class="token function">getHeadNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'t'</span><span class="token operator">:</span>                l<span class="token punctuation">.</span><span class="token function">reverseList</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span><span class="token function">getHeadNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'e'</span><span class="token operator">:</span>                loop <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入无效，请重新输入~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>         scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"程序退出~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">LinkedListt</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//头结点</span>    <span class="token keyword">private</span> Node head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/***     * 将节点添加至尾部     * @param node     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node temp <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        temp<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/***     *  列出所有的元素     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"链表为空~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Node temp <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"链表遍历完毕~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 按照顺序添加节点至单链表     * @param node     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addById</span><span class="token punctuation">(</span>Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node temp <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> node<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> node<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d的数据已经被出入到单链表中~~"</span><span class="token punctuation">,</span>node<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        node<span class="token punctuation">.</span>next <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        temp<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 删除一个节点     * @param id     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">del</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"单链表为空~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Node temp <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>                flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>            temp<span class="token punctuation">.</span>next <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"未找见%d的id"</span><span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 更新一个节点     * @param node     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"单链表为空~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Node temp <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> node<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>            temp<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"未找见%d的id"</span><span class="token punctuation">,</span>node<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 查找一个节点     * @param id     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"单链表为空~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Node temp <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>                flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Node: "</span><span class="token operator">+</span> temp<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> temp<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"未找见%d的id"</span><span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 得到头结点     * @return     */</span>    <span class="token keyword">public</span> Node <span class="token function">getHeadNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 得到链表的size     * @param head     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span>Node head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"链表为空~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Node temp <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            count <span class="token operator">++</span><span class="token punctuation">;</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 得到单链表的倒数第k个节点     *  1 2 3 4 5   k = 1     *  size = 5    k = 1     *   5-1 = 4     * @param head     * @return     */</span>    <span class="token keyword">public</span> Node <span class="token function">findLastIndex</span><span class="token punctuation">(</span>Node head<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> k <span class="token operator">></span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"k输入错误~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Node temp <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size <span class="token operator">-</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 反转单链表:     * 1. 当链表为空或者只有一个节点时，无需反抓     * 2. 思路：     *         2.1 取出原链表的第一个节点，然后将head.next指向第二个节点，这样进行前进     *         2.2 将出的节点接在新节点的第一个位置     *         2.3 将新节点在重新赋值给head     * @param head     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reverseLinkedList</span><span class="token punctuation">(</span>Node head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>next <span class="token operator">==</span> null <span class="token operator">||</span>head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"链表为空或者只有一个节点~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Node newHead <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//第一个节点</span>        Node temp <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//原链表节点取出，指向下一个</span>            Node node <span class="token operator">=</span> temp<span class="token punctuation">;</span>            head<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            System.out.println("原："+node);</span>            <span class="token comment" spellcheck="true">//原链表节点连接到新链表的第一个位置</span>            node<span class="token punctuation">.</span>next <span class="token operator">=</span> newHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            newHead<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            System.out.println("后：" + newHead.next);</span>            <span class="token comment" spellcheck="true">//变量不断的指向下一个head.next</span>            temp <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        head<span class="token punctuation">.</span>next <span class="token operator">=</span> newHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 逆序打印：     * 使用stack     * @param head     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>Node head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"链表为空~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Stack<span class="token operator">&lt;</span>Node<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span>Node<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Node temp <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            stack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String data<span class="token punctuation">;</span>    <span class="token keyword">public</span> Node next <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> String data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setData</span><span class="token punctuation">(</span>String data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Node [id="</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">", data="</span> <span class="token operator">+</span> data <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03-pyTorch-ResNet</title>
      <link href="/2020/04/11/20200411-150055/"/>
      <url>/2020/04/11/20200411-150055/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200409155327.png" alt=""></p><h2 id="ResNet网络"><a href="#ResNet网络" class="headerlink" title="ResNet网络"></a>ResNet网络</h2><blockquote><p>掌握ResNet的原理和实现</p><p>了解ResNet的系列模型</p></blockquote><p>深度残差网络（Deep residual network, ResNet）的提出是CNN图像史上的一件里程碑事件 。</p><p>那么ResNet为什么会有如此优异的表现呢？其实ResNet是解决了深度CNN模型难训练的问题，从图2中可以看到14年的VGG才19层，而15年的ResNet多达152层，这在网络深度完全不是一个量级上，所以如果是第一眼看这个图的话，肯定会觉得ResNet是靠深度取胜。 </p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200411145915.png" alt=""></p><h3 id="深度网络的退化问题"><a href="#深度网络的退化问题" class="headerlink" title="深度网络的退化问题"></a>深度网络的退化问题</h3><p>从经验来看，网络的深度对模型的性能至关重要，当增加网络层数后，网络可以进行更加复杂的特征模式的提取，所以当模型更深时理论上可以取得更好的结果，图中也可以看出网络越深而效果越好的一个实践证据。</p><p>但是更深的网络其性能一定会更好吗？实验发现深度网络出现了退化问题（<code>Degradation problem</code>）：网络深度增加时，网络准确度出现饱和，甚至出现下降。这个现象可以在图中直观看出来：56层的网络比20层网络效果还要差。</p><p>这不是过拟合问题，因为56层网络的训练误差同样高。</p><p>我们知道深层网络存在着梯度消失或者爆炸的问题，</p><p>这使得深度学习模型很难训练。但是现在已经存在一些技术手段如BatchNorm来缓解这个问题。</p><p>因此，出现深度网络的退化问题是非常令人诧异的。 </p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200411150236.png" alt=""></p><h3 id="残差学习"><a href="#残差学习" class="headerlink" title="残差学习"></a>残差学习</h3><p>深度网络的退化问题至少说明深度网络不容易训练。</p><p>但是我们考虑这样一个事实：现在你有一个浅层网络，你想通过向上堆积新层来建立深层网络，一个极端情况是这些增加的层什么也不学习，仅仅复制浅层网络的特征，即这样新层是恒等映射（Identity mapping）。</p><p>在这种情况下，深层网络应该至少和浅层网络性能一样，也不应该出现退化现象。</p><p>好吧，你不得不承认肯定是目前的训练方法有问题，才使得深层网络很难去找到一个好的参数。</p><p>这个有趣的假设让何博士灵感爆发，他提出了残差学习来解决退化问题。</p><p>对于一个堆积层结构（几层堆积而成）当输入为 $X$ 时其学习到的特征记为$H(X)$现在我们希望其可以学习到残差 $F(X) = H(X)-X$，这样其实原始的学习特征是 $F(X)+X$ 。之所以这样是因为残差学习相比原始特征直接学习更容易。</p><p>当残差为0时，此时堆积层仅仅做了恒等映射，至少网络性能不会下降，实际上残差不会为0，这也会使得堆积层在输入特征基础上学习到新的特征，从而拥有更好的性能。残差学习的结构如图4所示。这有点类似与电路中的“短路”，所以是一种短路连接（<code>shortcut connection</code>）。</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200411150617.png" alt=""></p><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/c5e8c8002f7caffbd84d28a0b41834f.jpg" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/d47f039de6df3a4514f9acf5e45a73a.jpg" alt=""></p><p>网络实现：</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200411150617.png" alt=""></p><p>恒等映射：</p><h3 id="ResNet网络-1"><a href="#ResNet网络-1" class="headerlink" title="ResNet网络"></a>ResNet网络</h3><p>在不同的网络之中添加跨接层：</p><p>虚线为非恒等映射，因为特征图大小发生变化</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200411151931.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200411152040.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200411152208.png" alt=""></p><p>这样分开的原因是在代码实现的时候实现可拓展的程序</p><p>使用了最大平均池化（<code>Global Average Pooling</code>）的操作：</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200411152349.png" alt=""></p><p>可以实现替代全连接层，实现更少的参数，更少的出现过拟合</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200411152524.png" alt=""></p><p><strong>Tensorflow和PyTorch都要学习！！</strong></p><ul><li>公司应聘</li><li>Github代码实现</li></ul><p>50层以上的和50层以下的ResNet有什么不同？</p><p><code>Bottle Neck</code>(瓶颈)</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200411152911.png" alt=""></p><p>从256到64，从64再到256维！！（由于参数量太大）</p><hr><h2 id="ResNet的实现"><a href="#ResNet的实现" class="headerlink" title="ResNet的实现"></a>ResNet的实现</h2><p><a href="https://github.com/pytorch/vision/blob/master/torchvision/models/resnet.py" target="_blank" rel="noopener">官方实现</a></p><p>待续….</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> pyTorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>06-数据结构Java版-单向链表</title>
      <link href="/2020/04/11/20200411-100227/"/>
      <url>/2020/04/11/20200411-100227/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/homewyk/cloudimg/raw/master/images.jpg" alt=""></p><h2 id="单向链表结构"><a href="#单向链表结构" class="headerlink" title="单向链表结构"></a>单向链表结构</h2><h3 id="实际内存结构"><a href="#实际内存结构" class="headerlink" title="实际内存结构"></a>实际内存结构</h3><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200411101904.png" alt=""></p><ul><li>链表是以节点的方法来存储的，属于链式结构</li><li>每一个节点包含data域和next域，且next域指向下一个节点</li><li>链表的各个节点不一定是连续存储的</li><li>链表分为由头节点的和没有头结点的链表，需要根据实际需求进行确定</li><li>单链表的逻辑结构示意图：</li></ul><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200411101917.png" alt=""></p><h3 id="单链表的应用实例"><a href="#单链表的应用实例" class="headerlink" title="单链表的应用实例"></a>单链表的应用实例</h3><p>场景：</p><p>客户端将某人的在线用户返回给后端，后端不能操作数据库，直接在内存中进行操作，将排好序的在线用户返回给客户端，以供使用！</p><h3 id="单链表基本操作"><a href="#单链表基本操作" class="headerlink" title="单链表基本操作"></a>单链表基本操作</h3><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200411102046.png" alt=""></p><h4 id="单链表分析"><a href="#单链表分析" class="headerlink" title="单链表分析"></a>单链表分析</h4><p>所需要的变量定义：</p><ul><li>创建一个节点类<code>Node</code><ul><li><code>data</code>域 <code>private</code></li><li><code>next</code> 域 <code>public</code>，赋初值为<code>next = null</code></li><li>构造函数，接收<code>data</code>域的数据,无需接收<code>next</code>域的数据</li></ul></li><li>创建链表管理类：<ul><li>需要一个头结点对象</li><li>在进行遍历操作是都需要使用一个指针变量(<code>Node</code>)来标记本次循环的位置信息<ul><li>增删改查的实现中都会用到</li></ul></li><li>判断到了链表的尾部：<ul><li><code>temp.next== null</code></li></ul></li><li>判断链表是否为空：<ul><li><code>headNode.next == null</code></li></ul></li><li>因为链表的结构，无需判断链表是否满</li></ul></li></ul><h4 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h4><ul><li><p>单链表的尾部创建（从头开始创建）：</p><ul><li><p>创建节点类<code>Node</code>，表示相应的节点信息</p></li><li><p>创建一个链表管理类</p></li><li><p>链表管理类创建头结点，表示单链表的头部，此节点信息不可动</p></li><li><p>新建辅助节点<code>temp</code>进行遍历操作，因为头结点不可动</p></li><li><p>此temp相当于指针，记录当前处于整个链表的什么位置</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200411102535.png" alt=""></p></li><li><p>进行节点遍历，判定最后节点的条件：<code>Node.next = null</code></p></li><li><p>将最后一个节点的<code>Node.next = newNode</code></p></li></ul></li><li><p>显示链表信息</p><ul><li>判断链表是否为空</li><li>创建临时变量指向头结点后的第一个元素</li><li>判断此节点<code>next</code>域是否为<code>null</code></li><li>打印节点信息</li><li>临时变量向后指</li></ul></li></ul><p><strong>注意：这里的临时变量的定义有些区别！！！</strong></p><p>代码实现：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">LinkedList</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//新建头结点</span>    <span class="token keyword">private</span> UserNode headNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//添加节点操作</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>UserNode node<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建指针,指向头部</span>        UserNode temp <span class="token operator">=</span> headNode<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//当指向链表尾部时的判定条件</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//向前一步</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//直接链接在最后</span>        temp<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//显示链表节点信息</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//判断链表是否为空</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>headNode<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"链表为空~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        UserNode temp <span class="token operator">=</span> headNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp <span class="token operator">==</span> null<span class="token punctuation">)</span>                 <span class="token keyword">break</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*** * 1. 节点信息 * @author asdw1 * */</span><span class="token keyword">class</span>  <span class="token class-name">UserNode</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// data 域</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//next域</span>    <span class="token keyword">public</span> UserNode next <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">UserNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"UserNode [id="</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">", name="</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li><p>单链表按顺序创建：当id一致时要有提示信息</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200411115441.png" alt=""></p><ul><li>创建临时变量<code>temp</code>指向头结点</li><li>进行循环遍历到最后</li><li><code>new Node</code>的<code>data</code>域和每一个<code>temp</code>的data域进行比较</li><li>当符合条件时：（顺序不可改变！！）<ul><li><code>new node.next = temp.next</code></li><li><code>temp.next = new node</code></li></ul></li></ul></li></ul><p>代码实现：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addById</span><span class="token punctuation">(</span>UserNode node<span class="token punctuation">)</span> <span class="token punctuation">{</span>        UserNode temp <span class="token operator">=</span> headNode<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//判断是否存在相同的id</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//插在最后面</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//按顺序插入</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> node<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 存在插入冲突</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> node<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d 已经插入到链表中~~"</span><span class="token punctuation">,</span>node<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            node<span class="token punctuation">.</span>next <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            temp<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><ul><li>单链表的修改操作：<ul><li>需要输入待修改的<code>id</code></li><li>定义<code>temp</code>作为指针，定义<code>flag</code>作为是否找到此<code>id</code></li><li><code>temp</code>向后进行遍历，找到以后置<code>flag = true</code>，跳出</li><li>在跳出循环后进行判断和进行修改操作</li></ul></li></ul><p>代码实现：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * 1. 根据id找见要修改的节点     * 2. 有两个条件退出循环，使用flag来判断到底是哪个条件退出循环     * @param node     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateById</span><span class="token punctuation">(</span>UserNode node<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>headNode<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"链表为空~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        UserNode temp <span class="token operator">=</span> headNode<span class="token punctuation">;</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> node<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>            temp<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"未找到%s的用户\n"</span><span class="token punctuation">,</span>node<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><ul><li><p>单链表的删除操作：</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200412092158.png" alt=""></p><ul><li>需要先找到 要删除节点的前一个节点<code>temp</code></li><li>进行操作：<code>temp.next = temp.next.next</code></li><li>被删除的节点将不会有其他的引用，会被垃圾回收机制回收</li></ul></li></ul><p>代码实现：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>headNode<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"链表为空~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        UserNode temp <span class="token operator">=</span> headNode<span class="token punctuation">;</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>                flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>            temp<span class="token punctuation">.</span>next <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"未找见id=%d的用户\n"</span><span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="单链表的完整测试代码"><a href="#单链表的完整测试代码" class="headerlink" title="单链表的完整测试代码"></a>单链表的完整测试代码</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>homewyk<span class="token punctuation">.</span>linked<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinkedListDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> argc<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LinkedList link <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> key <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">;</span>        Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> loop <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"欢迎使用单链表测试程序"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>loop<span class="token punctuation">)</span> <span class="token punctuation">{</span>            key <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token string">'a'</span><span class="token operator">:</span>                link<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserNode</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"w1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                link<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserNode</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"w2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                link<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserNode</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"w3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                link<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserNode</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"w4"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                link<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserNode</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"w5"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"在链表尾部添加节点完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'i'</span><span class="token operator">:</span>                link<span class="token punctuation">.</span><span class="token function">addById</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserNode</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"w3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                link<span class="token punctuation">.</span><span class="token function">addById</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserNode</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"w4"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                link<span class="token punctuation">.</span><span class="token function">addById</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserNode</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"w5"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                link<span class="token punctuation">.</span><span class="token function">addById</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserNode</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"w1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                link<span class="token punctuation">.</span><span class="token function">addById</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserNode</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"w2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"按照顺序插入链表节点完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'u'</span><span class="token operator">:</span>                link<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserNode</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"ww1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'d'</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入要删除的id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> id <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                link<span class="token punctuation">.</span><span class="token function">delById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'s'</span><span class="token operator">:</span>                link<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'e'</span><span class="token operator">:</span>                loop <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"退出程序~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">LinkedList</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//新建头结点</span>    <span class="token keyword">private</span> UserNode headNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//添加节点操作</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>UserNode node<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建指针,指向头部</span>        UserNode temp <span class="token operator">=</span> headNode<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//当指向链表尾部时的判定条件</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//向前一步</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//直接链接在最后</span>        temp<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//显示链表节点信息</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//判断链表是否为空</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>headNode<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"链表为空~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        UserNode temp <span class="token operator">=</span> headNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp <span class="token operator">==</span> null<span class="token punctuation">)</span>                 <span class="token keyword">break</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/***     * 1. 按照id顺序添加节点     * @param node     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addById</span><span class="token punctuation">(</span>UserNode node<span class="token punctuation">)</span> <span class="token punctuation">{</span>        UserNode temp <span class="token operator">=</span> headNode<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//判断是否存在相同的id</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//插在最后面</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//按顺序插入</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> node<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 存在插入冲突</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> node<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d 已经插入到链表中~~"</span><span class="token punctuation">,</span>node<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            node<span class="token punctuation">.</span>next <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            temp<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 1. 根据id找见要修改的节点     * 2. 有两个条件退出循环，使用flag来判断到底是哪个条件退出循环     * @param node     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateById</span><span class="token punctuation">(</span>UserNode node<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>headNode<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"链表为空~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        UserNode temp <span class="token operator">=</span> headNode<span class="token punctuation">;</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> node<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>            temp<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"未找到%s的用户\n"</span><span class="token punctuation">,</span>node<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>headNode<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"链表为空~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        UserNode temp <span class="token operator">=</span> headNode<span class="token punctuation">;</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>                flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>            temp<span class="token punctuation">.</span>next <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"未找见id=%d的用户\n"</span><span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*** * 1. 节点信息 * @author asdw1 * */</span><span class="token keyword">class</span>  <span class="token class-name">UserNode</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// data 域</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//next域</span>    <span class="token keyword">public</span> UserNode next <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">UserNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"UserNode [id="</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">", name="</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02-pyTorch快速入门</title>
      <link href="/2020/04/09/20200409-174055/"/>
      <url>/2020/04/09/20200409-174055/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200409155327.png" alt=""></p><h2 id="PyTorch快速入门-60min"><a href="#PyTorch快速入门-60min" class="headerlink" title="PyTorch快速入门(60min)"></a>PyTorch快速入门(60min)</h2><p><a href="https://github.com/zergtant/pytorch-handbook" target="_blank" rel="noopener">学习资料Github</a></p><p><a href="https://pytorch-cn.readthedocs.io/zh/latest/" target="_blank" rel="noopener">PyTorch中文文档</a></p><p><a href="https://heary.cn/posts/PyTorch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/" target="_blank" rel="noopener">快速入门</a></p><h3 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h3><p>基于Python的科学计算包，服务于以下两种场景: </p><ul><li>作为NumPy的替代品，可以使用GPU的强大计算能力</li><li>提供最大的灵活性和高速的深度学习研究平台</li></ul><h3 id="Tensor-张量"><a href="#Tensor-张量" class="headerlink" title="Tensor(张量)"></a>Tensor(张量)</h3><ul><li>Tensors与Numpy中的 ndarrays类似，是专门针对在GPU上来进行设计的</li><li>但是在PyTorch中 Tensors 可以使用GPU进行计算 </li></ul><h4 id="构建张量"><a href="#构建张量" class="headerlink" title="构建张量"></a>构建张量</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true">### 官方文档</span><span class="token comment" spellcheck="true">## 创建一个矩阵</span><span class="token comment" spellcheck="true"># 接近于0，并不是0</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"创建一个空矩阵"</span><span class="token punctuation">)</span>X <span class="token operator">=</span> torch<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""创建一个空矩阵tensor(1.00000e-16 *       [[ 0.0000,  0.0000,  0.0000],        [ 0.0000,  0.0000,  0.0000],        [ 0.0000,  0.0000,  0.0000],        [ 0.0000,  0.0000,  0.0000],        [ 3.6048,  0.0000,  0.0000]])"""</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"创建一个随机初始化的矩阵"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">## 创建一个随机初始化矩阵,在[0,1]之间</span>X <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""创建一个随机初始化的矩阵tensor([[ 0.5730,  0.5438,  0.5188],        [ 0.1300,  0.0704,  0.3905],        [ 0.1025,  0.7708,  0.7785],        [ 0.5807,  0.0245,  0.3801],        [ 0.4569,  0.5199,  0.5575]])"""</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"创建一个0填充的矩阵,数据类型为long"</span><span class="token punctuation">)</span>X <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>long<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""创建一个0填充的矩阵,数据类型为longtensor([[ 0,  0,  0],        [ 0,  0,  0],        [ 0,  0,  0],        [ 0,  0,  0],        [ 0,  0,  0]])"""</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"创建tensor并且使用现有数据初始化"</span><span class="token punctuation">)</span>X <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5.5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""创建tensor并且使用现有数据初始化tensor([ 5.5000,  3.0000])"""</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"使用new_*方法来创建对象"</span><span class="token punctuation">)</span>X <span class="token operator">=</span> X<span class="token punctuation">.</span>new_ones<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>double<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""使用new_*方法来创建对象tensor([[ 1.,  1.,  1.],        [ 1.,  1.,  1.],        [ 1.,  1.,  1.],        [ 1.,  1.,  1.],        [ 1.,  1.,  1.]], dtype=torch.float64)"""</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"覆盖dtype,值和类型发生变化，size不变"</span><span class="token punctuation">)</span>X <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn_like<span class="token punctuation">(</span>X<span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>float<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""覆盖dtype,值和类型发生变化，size不变tensor([[-0.3182,  1.1321, -0.6895],        [-0.4711, -0.3894, -0.4595],        [ 0.1142, -0.2833, -0.1681],        [-0.1614, -1.0004,  0.7979],        [-1.4090,  1.0507, -1.2734]])"""</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"获取size,结果为tuple类型"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>X<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""获取size,结果为tuple类型torch.Size([5, 3])"""</span></code></pre><h4 id="基本运算"><a href="#基本运算" class="headerlink" title="基本运算"></a>基本运算</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'==============基本运算==================='</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'加法操作'</span><span class="token punctuation">)</span>X <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>Y <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>X <span class="token operator">+</span> Y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>X<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""加法操作tensor([[ 1.5574,  1.2313,  1.0615],        [ 1.4728,  0.4043,  1.6184],        [ 1.1121,  1.4346,  1.2046],        [ 0.9990,  0.8252,  1.3891],        [ 0.5389,  1.2413,  0.4068]])tensor([[ 1.5574,  1.2313,  1.0615],        [ 1.4728,  0.4043,  1.6184],        [ 1.1121,  1.4346,  1.2046],        [ 0.9990,  0.8252,  1.3891],        [ 0.5389,  1.2413,  0.4068]])"""</span>result <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>torch<span class="token punctuation">.</span>add<span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">,</span>out<span class="token operator">=</span>result<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""tensor([[ 1.5574,  1.2313,  1.0615],        [ 1.4728,  0.4043,  1.6184],        [ 1.1121,  1.4346,  1.2046],        [ 0.9990,  0.8252,  1.3891],        [ 0.5389,  1.2413,  0.4068]])"""</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'==============切片==================='</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""tensor([ 0.5156,  0.4005,  0.4451,  0.0043,  0.2938])"""</span><span class="token comment" spellcheck="true"># torch.size(4,4)</span>X <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># torch.size([16])</span>Y <span class="token operator">=</span> X<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>Y<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""tensor([[-1.6180,  2.0583, -0.1757, -0.9380],        [ 0.6852, -1.7199, -0.2240,  1.0473],        [-1.4828,  1.0972, -1.2176,  0.6093],        [ 0.4131,  0.7587, -0.6124, -1.4680]])tensor([-1.6180,  2.0583, -0.1757, -0.9380,  0.6852, -1.7199, -0.2240,         1.0473, -1.4828,  1.0972, -1.2176,  0.6093,  0.4131,  0.7587,        -0.6124, -1.4680])"""</span><span class="token comment" spellcheck="true"># -1 从其他维度进行推算</span>Y <span class="token operator">=</span> Y<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>Y<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""tensor([[-1.6180,  2.0583, -0.1757, -0.9380],        [ 0.6852, -1.7199, -0.2240,  1.0473],        [-1.4828,  1.0972, -1.2176,  0.6093],        [ 0.4131,  0.7587, -0.6124, -1.4680]])"""</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'只有一个元素，可以铜鼓.item来获得Python数据类型的数值'</span><span class="token punctuation">)</span>x <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""tensor([-0.6825])-0.6825268864631653"""</span></code></pre><h4 id="常用初始化操作"><a href="#常用初始化操作" class="headerlink" title="常用初始化操作"></a>常用初始化操作</h4><ul><li><code>torch.empty(size)</code>返回形状为size的空tensor</li><li><code>torch.zeros(size)</code>全部是0的tensor</li><li><code>torch.zeros_like(input)</code>返回跟input的tensor一个size的全零tensor</li><li><code>torch.ones(size)</code>全部是1的tensor</li><li><code>torch.ones_like(input)</code>返回跟input的tensor一个size的全一tensor</li><li><code>torch.arange(start=0, end, step=1)</code>返回一个从start到end的序列，可以只输入一个end参数，就跟python的range()一样了。实际上PyTorch也有range()，但是这个要被废掉了，替换成arange了</li><li><code>torch.full(size, fill_value)</code>这个有时候比较方便，把fill_value这个数字变成size形状的张量</li></ul><h4 id="随机抽样"><a href="#随机抽样" class="headerlink" title="随机抽样"></a>随机抽样</h4><ul><li><code>torch.rand(size)</code> [0,1)内的均匀分布随机数</li><li><code>torch.rand_like(input)</code>返回跟input的tensor一样size的0-1随机数</li><li><code>torch.randn(size)</code>返回标准正太分布N(0,1)的随机数</li><li><code>torch.normal(mean, std, out=None)</code>正态分布。这里注意，mean和std都是tensor，返回的形状由mean和std的形状决定，一般要求两者形状一样。如果，mean缺失，则默认为均值0，如果std缺失，则默认标准差为1.</li></ul><h3 id="Numpy转换"><a href="#Numpy转换" class="headerlink" title="Numpy转换"></a>Numpy转换</h3><h4 id="Tensor-gt-Numpy"><a href="#Tensor-gt-Numpy" class="headerlink" title="Tensor -&gt; Numpy"></a>Tensor -&gt; Numpy</h4><p>直接用<code>.numpy()</code>即可。但是注意，转换后，<strong>numpy的变量和原来的tensor会共用底层内存地址</strong>，所以如果原来的tensor改变了，numpy变量也会随之改变。</p><h4 id="Numpy-gt-Tensor"><a href="#Numpy-gt-Tensor" class="headerlink" title="Numpy -&gt; Tensor"></a>Numpy -&gt; Tensor</h4><p>用<code>torch.from_numpy()</code>来转换 </p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"torch -> Numpy"</span><span class="token punctuation">)</span>a <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""tensor([ 1.,  1.,  1.,  1.,  1.])"""</span>b <span class="token operator">=</span> a<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""[1. 1. 1. 1. 1.]"""</span><span class="token comment" spellcheck="true"># 任何以"_"结尾的操作都会使用结果替代原变量</span><span class="token comment" spellcheck="true"># Torch Tensor 与Numpy共享底层内存地址，</span><span class="token comment" spellcheck="true"># 修改一个会导致另一个的变化</span>a<span class="token punctuation">.</span>add_<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""tensor([ 2.,  2.,  2.,  2.,  2.])[2. 2. 2. 2. 2.]"""</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'======================='</span><span class="token punctuation">)</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>b <span class="token operator">=</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>a<span class="token punctuation">)</span>np<span class="token punctuation">.</span>add<span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>out<span class="token operator">=</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""[2. 2. 2. 2. 2.]tensor([ 2.,  2.,  2.,  2.,  2.], dtype=torch.float64)"""</span></code></pre><h3 id="CUDA-Tensor"><a href="#CUDA-Tensor" class="headerlink" title="CUDA Tensor"></a>CUDA Tensor</h3><p>在支持CUDA的NVIDIA GPU设备上，可以在GPU上建立Tensor进行运算。 </p><p>一般情况下可以使用<code>.cuda</code>方法将tensor移动到GPU，这步操作需要CUDA设备支持。</p><p>使用<code>.cpu</code>方法可以把tensor移动到CPU。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"CUDA张量"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 判断是否有cuda可以使用</span><span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># cuda 设备对象</span>    device <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">"cuda"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 直接从GPU中创建张量</span>    y <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones_like<span class="token punctuation">(</span>x<span class="token punctuation">,</span>device<span class="token operator">=</span>device<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 将Tensor移动到cuda中</span>    x <span class="token operator">=</span> x<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>    z <span class="token operator">=</span> x <span class="token operator">+</span> y    <span class="token keyword">print</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Tensor移动到cpu中</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>z<span class="token punctuation">.</span>to<span class="token punctuation">(</span><span class="token string">"cpu"</span><span class="token punctuation">,</span> torch<span class="token punctuation">.</span>double<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="AutoGrad-自动求导机制"><a href="#AutoGrad-自动求导机制" class="headerlink" title="AutoGrad: 自动求导机制"></a>AutoGrad: 自动求导机制</h3><p>构建深度学习模型的基本流程就是：</p><ol><li>搭建计算图，求得损失函数，</li><li>然后计算损失函数对模型参数的导数，</li><li>再利用梯度下降法等方法来更新参数。 </li></ol><ul><li>搭建计算图的过程，称为“正向传播”，这个是需要我们自己动手的，因为我们需要设计我们模型的结构。</li><li>由损失函数求导的过程，称为“反向传播”，求导是件辛苦事儿，所以自动求导基本上是各种深度学习框架的基本功能和最重要的功能之一，PyTorch也不例外。 </li></ul><p>PyTorch 中所有神经网络的核心是 <code>autograd</code> 包。 我们先简单介绍一下这个包，然后训练第一个简单的神经网络。</p><p><code>autograd</code>包为张量上的所有操作提供了自动求导。 它是一个在运行时定义的框架，这意味着反向传播是根据你的代码来确定如何运行，并且每次迭代可以是不同的。</p><h4 id="张量"><a href="#张量" class="headerlink" title="张量"></a>张量</h4><p><code>torch.Tensor</code>是这个包的核心类,所有的tensor都有<code>.requires_grad</code>这个属性，都可以设置为自动求导</p><ul><li>如果设置 <code>.requires_grad</code> 为 <code>True</code>，那么将会追踪所有对于该张量的操作。</li><li>当完成计算后通过调用 <code>.backward()</code>，自动计算所有的梯度， </li><li>这个张量的所有梯度将会自动积累到 <code>.grad</code> 属性。</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token comment" spellcheck="true"># 创建一个Tensor并设置为requires_grad=True</span>x <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span> requires_grad<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> x<span class="token punctuation">.</span>requires_grad<span class="token punctuation">)</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token boolean">True</span></code></pre><p>只要这样设置了之后，后面由x经过运算得到的其他tensor，就都有<code>equires_grad=True</code>属性了。 可以通过<code>x.requires_grad</code>来查看这个属性。 </p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 对此张量进行操作,经由x运算的其他Tensor都会有requires_grad =True</span>y <span class="token operator">=</span> x <span class="token operator">+</span>  <span class="token number">2</span><span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> y<span class="token punctuation">.</span>requires_grad<span class="token punctuation">)</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">3</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span> <span class="token number">3</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token boolean">True</span></code></pre><p>如果想改变这个属性，就调用<code>tensor.requires_grad_()</code>方法： </p><blockquote><p>这里只能修改x，不能修改y</p></blockquote><pre class=" language-python"><code class="language-python">x<span class="token punctuation">.</span>requires_grad_<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>requires_grad<span class="token punctuation">)</span><span class="token boolean">False</span></code></pre><p>这里，<strong>注意区别</strong><code>tensor.requires_grad</code>和<code>tensor.requires_grad_()</code>：</p><ul><li><code>tensor.requires_grad</code>是属性</li><li><code>tensor.requires_grad_()</code>是用函数，来改变属性。 </li></ul><h4 id="求导操作"><a href="#求导操作" class="headerlink" title="求导操作"></a>求导操作</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span>  torch<span class="token comment" spellcheck="true"># 支持求导，必须让x为浮点类型</span>x <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>requires_grad<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>y <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>z <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>y<span class="token operator">*</span>y<span class="token keyword">print</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span>j <span class="token operator">=</span> torch<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span> <span class="token number">5</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span>  <span class="token number">8</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">18</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">32</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span> <span class="token number">50</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">72</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">98</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>tensor<span class="token punctuation">(</span><span class="token number">46.3333</span><span class="token punctuation">)</span></code></pre><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200410093614.png" alt=""></p><p>上述例子要注意的地方：</p><ul><li>x、y、z都是tensor，size为（2,3）</li><li>J是对z的每一个元素加起来求平均，所以J是标量</li><li><strong>求导，只能是【标量】对标量，或者【标量】对向量/矩阵求导</strong> </li></ul><p>所以，上图中，只能J对x、y、z求导，而z则不能对x求导: </p><ul><li>PyTorch里面，求导是调用<strong>.backward()</strong>方法。<strong>直接调用backward()方法，会计算对计算图叶节点的导数。</strong></li><li>获取求得的导数，用<strong>.grad</strong>方法。</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 求导操作</span><span class="token comment" spellcheck="true">## j要求导</span>j<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">## 得到j</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>grad<span class="token punctuation">)</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">1.3333</span><span class="token punctuation">,</span>  <span class="token number">2.0000</span><span class="token punctuation">,</span>  <span class="token number">2.6667</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span> <span class="token number">3.3333</span><span class="token punctuation">,</span>  <span class="token number">4.0000</span><span class="token punctuation">,</span>  <span class="token number">4.6667</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200410100331.png" alt=""></p><p>总结一下，构建计算图（正向传播，Forward Propagation）和求导（反向传播，Backward Propagation）的过程就是： </p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200410100428.png" alt=""></p><h4 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h4><ol><li>是不是只能对标量求导？</li></ol><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200410100836.png" alt=""></p><p>从说明中我们可以了解到：</p><ul><li>如果你要求导的是一个<strong>标量</strong>，那么<strong>gradients默认为None</strong>，所以前面可以直接调用<code>J.backward()</code>就行了</li><li>如果你要求导的是一个<strong>张</strong>量，那么<strong>gradients应该传入一个Tensor</strong>。</li></ul><p>一般来说，我是对标量求导，比如在神经网络里面，我们的<code>loss</code>会是一个标量，那么我们让<code>loss</code>对神经网络的参数<code>w</code>求导，直接通过<code>loss.backward()</code>即可。</p><p>但是，有时候我们可能会有多个输出值，比如loss=[loss1,loss2,loss3]，那么我们可以<strong>让loss的各个分量分别对x求导</strong>，这个时候就采用：<br><code>loss.backward(torch.tensor([[1.0,1.0,1.0,1.0]]))</code></p><p>如果你想<strong>让不同的分量有不同的权重</strong>，那么就赋予gradients不一样的值即可，比如：<br><code>loss.backward(torch.tensor([[0.1,1.0,10.0,0.001]]))</code></p><p>这样，我们使用起来就更加灵活了，虽然也许多数时候，我们都是直接使用<code>.backward()</code>就完事儿了。</p><ol start="2"><li>一个计算图只能<code>backwoard</code>一次</li></ol><p><strong>一个计算图在进行反向求导之后，为了节省内存，这个计算图就销毁了。</strong> 如果你想再次求导，就会报错。 </p><p>比如你定义了计算图： <img src="https://gitee.com/homewyk/cloudimg/raw/master/20200410101124.png" alt=""></p><p>你先求p求导，那么这个过程就是反向的p对y求导，y对x求导。 求导完毕之后，这三个节点构成的计算子图就会被释放： <img src="https://gitee.com/homewyk/cloudimg/raw/master/20200410101144.png" alt=""></p><p>那么计算图就只剩下z、q了，已经不完整，无法求导了。 <strong>所以这个时候，无论你是想再次运行p.backward()还是q.backward()，都无法进行</strong>，报错如下： </p><pre class=" language-python"><code class="language-python">RuntimeError<span class="token punctuation">:</span> Trying to backward through the graph a second time<span class="token punctuation">,</span> but the buffers have already been freed<span class="token punctuation">.</span> Specify retain_graph<span class="token operator">=</span><span class="token boolean">True</span> when calling backward the first time<span class="token punctuation">.</span></code></pre><p>解决方法：</p><ul><li><strong>你的实际计算，确实需要保留计算图，不让子图释放。</strong> </li></ul><p>那么，就更改你的backward函数，添加参数<code>retain_graph=True</code>，重新进行backward，这个时候你的计算图就被保留了，不会报错。 但是这样会<strong>吃内存！</strong>，尤其是，你在大量迭代进行参数更新的时候，很快就会内存不足，memory out了。 </p><ul><li><strong>你实际根本没必要对一个计算图backward多次，而你不小心多跑了一次backward函数。</strong> </li></ul><ol start="3"><li><p>禁用autograd</p><p>如果<code>.requires_grad=True</code>但是你又不希望进行autograd的计算， 那么可以将变量包裹在 <code>with torch.no_grad()</code>中: </p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>requires_grad<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>requires_grad<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># True</span><span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>requires_grad<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># False</span></code></pre></li></ol><h2 id="搭建网络"><a href="#搭建网络" class="headerlink" title="搭建网络"></a>搭建网络</h2><p>PyTorch的<strong>torch.nn</strong>中包含了各种神经网络层、激活函数、损失函数等等的类。我们通过<code>torch.nn</code>来创建对象，搭建网络。 </p><p>PyTorch中还有<strong>torch.nn.functional</strong>，让我们可以通过调用函数的方式，来直接搭建网络，而不用像<code>torch.nn</code>一样要先创建对象。 </p><p>我们可以按照自己的习惯，结合上面两种方法，来搭建网络。 </p><ul><li>一般情况下，对于像Conv层这种需要定义多个参数的时候，我们采用<code>torch.nn</code>的方式比较方便，</li><li>而对于参数比较少的，或者不用设置参数的，尤其是一些函数，我们就可以采用<code>torch.nn.functional</code>来定义。</li></ul><p>一般我们<code>import torch.nn.functional as F</code>，这样后面写起来方便一些。 </p><blockquote><p><strong>torch.nn.Module</strong>是所有神经网络模型的<strong>基本类</strong>（basic class），所有的模型都应该是它的子类。 </p></blockquote><h3 id="定义模型的方法"><a href="#定义模型的方法" class="headerlink" title="定义模型的方法"></a>定义模型的方法</h3><blockquote><p>主要是使用的函数定义的方法</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 神经网络模型包：</span><span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token comment" spellcheck="true"># 神经网络中的各种函数包：</span><span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F<span class="token comment" spellcheck="true"># 继承nn.Module</span><span class="token keyword">class</span> <span class="token class-name">Net</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 调用nn.Module的初始化方法</span>        super<span class="token punctuation">(</span>Net<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 1 input image channel, 6 output channels, 5x5 square convolution</span>        <span class="token comment" spellcheck="true"># kernel</span>        <span class="token comment" spellcheck="true"># 后面关于卷积层的定义：</span>        self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># an affine operation: y = Wx + b</span>        <span class="token comment" spellcheck="true"># 16个卷积核，每一个卷积核为5*5</span>        self<span class="token punctuation">.</span>fc1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">*</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">84</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc3 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 定义神经网络的前向传播细节</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># Max pooling over a (2, 2) window</span>        x <span class="token operator">=</span> F<span class="token punctuation">.</span>max_pool2d<span class="token punctuation">(</span>F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># If the size is a square you can only specify a single number</span>        x <span class="token operator">=</span> F<span class="token punctuation">.</span>max_pool2d<span class="token punctuation">(</span>F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv2<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> x<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>num_flat_features<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fc1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fc2<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>fc3<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> x    <span class="token keyword">def</span> <span class="token function">num_flat_features</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        size <span class="token operator">=</span> x<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># all dimensions except the batch dimension</span>        num_features <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">for</span> s <span class="token keyword">in</span> size<span class="token punctuation">:</span>            num_features <span class="token operator">*=</span> s        <span class="token keyword">return</span> num_featuresnet <span class="token operator">=</span> Net<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>net<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Net(</span><span class="token comment" spellcheck="true">#   (conv1): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))</span><span class="token comment" spellcheck="true">#   (conv2): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))</span><span class="token comment" spellcheck="true">#   (fc1): Linear(in_features=400, out_features=120, bias=True)</span><span class="token comment" spellcheck="true">#   (fc2): Linear(in_features=120, out_features=84, bias=True)</span><span class="token comment" spellcheck="true">#   (fc3): Linear(in_features=84, out_features=10, bias=True)</span><span class="token comment" spellcheck="true"># )</span></code></pre><p>在模型中必须要定义 <code>forward</code> 函数，<code>backward</code> 函数（用来计算梯度）会被<code>autograd</code>自动创建。 可以在 <code>forward</code> 函数中使用任何针对 Tensor 的操作。</p><p><code>net.parameters()</code>返回可被学习的参数（权重）列表和值 </p><pre class=" language-python"><code class="language-python">params <span class="token operator">=</span> list<span class="token punctuation">(</span>net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># conv1's .weight</span></code></pre><p>试随机输入32×32。 注：这个网络（LeNet）期望的输入大小是32×32，如果使用MNIST数据集来训练这个网络，请把图片大小重新调整到32×32。 </p><pre class=" language-python"><code class="language-python">input <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># samples, channels, height, width</span>out <span class="token operator">=</span> net<span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># tensor([[-0.0204, -0.0268, -0.0829,  0.1420, -0.0192,  0.1848,  0.0723, -0.0393,</span><span class="token comment" spellcheck="true">#          -0.0275,  0.0867]], grad_fn=&lt;ThAddmmBackward>)</span></code></pre><p>将所有参数的梯度缓存清零，然后进行随机梯度的的反向传播： </p><pre class=" language-python"><code class="language-python">net<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 否则梯度(.grad)会累加到已存在的梯度上</span>out<span class="token punctuation">.</span>backward<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 此处还未定义损失函数，仅用out反向传播作为示例</span></code></pre><p><strong>注意：torch.nn 只支持mini-batch输入</strong></p><p><strong>torch.nn 只支持小批量输入。</strong>整个 <code>torch.nn</code> 包都只支持小批量样本，而不支持单个样本。 例如，<code>nn.Conv2d</code> 接受一个4维的张量， <code>每一维分别是sSamples * nChannels * Height * Width（样本数*通道数*高*宽）</code>。 如果你有单个样本，只需使用 <code>input.unsqueeze(0)</code> 来添加其它的维数。</p><h3 id="常用的神经网络层"><a href="#常用的神经网络层" class="headerlink" title="常用的神经网络层"></a>常用的神经网络层</h3><p>一定要注意：上一层的输入为下一次的输出！！</p><h4 id="卷积层："><a href="#卷积层：" class="headerlink" title="卷积层："></a>卷积层：</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Conv2d</span><span class="token punctuation">(</span>_ConvNd<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> in_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">,</span> kernel_size<span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>                 padding<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> dilation<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> groups<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span></code></pre><ul><li>注意是个类，要创建对象后再使用。</li><li>参数中的<code>kernel_size</code>, <code>stride</code>, <code>padding</code>, <code>dilation</code>的值，可以为int，也可以为tuple。是int的时候，就代表长宽相等。</li><li>Input size为<strong>(N,C_in,H,W)</strong>；<br>Output size为<strong>(N,C_out,H_out,W_out)</strong>.<br>其中，N为batch size，即样本数，C为channel数，H为height，W为width。</li></ul><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token comment" spellcheck="true"># With square kernels and equal stride</span><span class="token operator">>></span><span class="token operator">></span> m <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token comment" spellcheck="true"># non-square kernels and unequal stride and with padding</span><span class="token operator">>></span><span class="token operator">></span> m <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token comment" spellcheck="true"># non-square kernels and unequal stride and with padding and dilation</span><span class="token operator">>></span><span class="token operator">></span> m <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dilation<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> input <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> output <span class="token operator">=</span> m<span class="token punctuation">(</span>input<span class="token punctuation">)</span></code></pre><h4 id="全连接层"><a href="#全连接层" class="headerlink" title="全连接层"></a>全连接层</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Linear</span><span class="token punctuation">(</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> in_features<span class="token punctuation">,</span> out_features<span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> m <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> input <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> output <span class="token operator">=</span> m<span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h4 id="Pooling层"><a href="#Pooling层" class="headerlink" title="Pooling层"></a>Pooling层</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">max_pool2d</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> kernel_size<span class="token punctuation">,</span> stride<span class="token operator">=</span>None<span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> dilation<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>               ceil_mode<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> return_indices<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 最大池化层</span><span class="token comment" spellcheck="true">## 一般kernel大小和stride相等</span><span class="token comment" spellcheck="true">## 在这里将输入尺寸减半</span>maxpooling <span class="token operator">=</span> nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span></code></pre><h4 id="Droupout-层"><a href="#Droupout-层" class="headerlink" title="Droupout 层"></a>Droupout 层</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> 方法torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span>p<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">class</span> 方法torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Dropout2d<span class="token punctuation">(</span>p<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span></code></pre><ul><li>前者通常接受来自nn.Linear的数据</li><li>后者通常接受来自nn.Conv2d的数据</li></ul><pre class=" language-python"><code class="language-python">dp <span class="token operator">=</span> nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span>p<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span></code></pre><h4 id="Bath-Norm-层"><a href="#Bath-Norm-层" class="headerlink" title="Bath Norm 层"></a>Bath Norm 层</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> 方法：torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>num_features<span class="token punctuation">,</span> eps<span class="token operator">=</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">05</span><span class="token punctuation">,</span> momentum<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">,</span> affine<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> track_running_stats<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><p>BN层的主要作用是，通过对数据进行标准化，来加速神经网络的训练。 唯一必须设置的参数<code>num_features</code> 要等于输入数据(N,C,H,W)中的C，就是Channel数。 </p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 3通道输入 16通道输出，kernel为3*3 步长为2</span>conv1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 上一次的输出为下一次的输入</span>bn <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span>out <span class="token operator">=</span> bn<span class="token punctuation">(</span>conv1<span class="token punctuation">)</span></code></pre><h3 id="常用的激活函数"><a href="#常用的激活函数" class="headerlink" title="常用的激活函数"></a>常用的激活函数</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">torch</span><span class="token punctuation">.</span>nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">torch</span><span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Sigmoid<span class="token keyword">class</span> <span class="token class-name">torch</span><span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Tanh<span class="token keyword">class</span> <span class="token class-name">torch</span><span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Softmax<span class="token punctuation">(</span>dim<span class="token operator">=</span>None<span class="token punctuation">)</span></code></pre><h3 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h3><p>一个损失函数接受一对 (output, target) 作为输入，计算一个值来估计网络的输出和目标值相差多少 (<strong>output为网络的输出，target为实际值</strong> )</p><p><code>nn.MSELoss</code>是一个比较简单的损失函数，它计算输出和目标间的<strong>均方误差</strong> </p><pre class=" language-python"><code class="language-python">output <span class="token operator">=</span> net<span class="token punctuation">(</span>input<span class="token punctuation">)</span>target <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 随机值作为样例</span>target <span class="token operator">=</span> target<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 使target和output的shape相同</span><span class="token comment" spellcheck="true"># 这里采用了函数的方法</span>criterion <span class="token operator">=</span> nn<span class="token punctuation">.</span>MSELoss<span class="token punctuation">(</span><span class="token punctuation">)</span>loss <span class="token operator">=</span> criterion<span class="token punctuation">(</span>output<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>loss<span class="token punctuation">)</span></code></pre><p>当反向传播计算<code>loss</code>时，读取<code>.grad_fn</code>属性，就可以看到一个图（graph）： </p><pre class=" language-python"><code class="language-python">input <span class="token operator">-</span><span class="token operator">></span> conv2d <span class="token operator">-</span><span class="token operator">></span> relu <span class="token operator">-</span><span class="token operator">></span> maxpool2d <span class="token operator">-</span><span class="token operator">></span> conv2d <span class="token operator">-</span><span class="token operator">></span> relu <span class="token operator">-</span><span class="token operator">></span> maxpool2d      <span class="token operator">-</span><span class="token operator">></span> view <span class="token operator">-</span><span class="token operator">></span> linear <span class="token operator">-</span><span class="token operator">></span> relu <span class="token operator">-</span><span class="token operator">></span> linear <span class="token operator">-</span><span class="token operator">></span> relu <span class="token operator">-</span><span class="token operator">></span> linear      <span class="token operator">-</span><span class="token operator">></span> MSELoss      <span class="token operator">-</span><span class="token operator">></span> loss</code></pre><p>此时，如果调用<code>loss.backward()</code>函数，整个图都会去求<code>loss</code>的微分，图中属性<code>requires_grad=True</code>的张量的<code>.grad</code>属性会累计梯度。</p><p>反向几步查看这几步的函数：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>loss<span class="token punctuation">.</span>grad_fn<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># MSELoss</span><span class="token keyword">print</span><span class="token punctuation">(</span>loss<span class="token punctuation">.</span>grad_fn<span class="token punctuation">.</span>next_functions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Linear</span><span class="token keyword">print</span><span class="token punctuation">(</span>loss<span class="token punctuation">.</span>grad_fn<span class="token punctuation">.</span>next_functions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>next_functions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ReLU</span></code></pre><h3 id="反向传播"><a href="#反向传播" class="headerlink" title="反向传播"></a>反向传播</h3><p>调用<code>loss.backward()</code>获得反向传播的误差。</p><p>但是在调用前需要清除已存在的梯度，否则梯度将被累加到已存在的梯度。</p><p>现在，我们将调用<code>loss.backward()</code>，并查看<code>conv1</code>层的偏差（bias）项在反向传播前后的梯度。</p><pre class=" language-python"><code class="language-python">net<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 清除梯度</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'conv1.bias.grad before backward'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>net<span class="token punctuation">.</span>conv1<span class="token punctuation">.</span>bias<span class="token punctuation">.</span>grad<span class="token punctuation">)</span>loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'conv1.bias.grad after backward'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>net<span class="token punctuation">.</span>conv1<span class="token punctuation">.</span>bias<span class="token punctuation">.</span>grad<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># conv1.bias.grad before backward</span><span class="token comment" spellcheck="true"># tensor([0., 0., 0., 0., 0., 0.])        反向传播前梯度为0</span><span class="token comment" spellcheck="true"># conv1.bias.grad after backward</span><span class="token comment" spellcheck="true"># tensor([ 0.0074, -0.0249, -0.0107,  0.0326, -0.0017, -0.0059])    反向传播后各bias参数出现了梯度值</span></code></pre><h3 id="更新权重"><a href="#更新权重" class="headerlink" title="更新权重"></a>更新权重</h3><p>在实践中最简单的权重更新规则是随机梯度下降（SGD） </p><pre class=" language-python"><code class="language-python">weight <span class="token operator">=</span> weight <span class="token operator">-</span> learning_rate <span class="token operator">*</span> gradient</code></pre><p>我们可以使用简单的Python代码实现这个规则： </p><pre class=" language-python"><code class="language-python">learning_rate <span class="token operator">=</span> <span class="token number">0.01</span><span class="token keyword">for</span> f <span class="token keyword">in</span> net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># 遍历net对象中的所有参数进行更新</span>    f<span class="token punctuation">.</span>data<span class="token punctuation">.</span>sub_<span class="token punctuation">(</span>f<span class="token punctuation">.</span>grad<span class="token punctuation">.</span>data <span class="token operator">*</span> learning_rate<span class="token punctuation">)</span></code></pre><p>但是当使用神经网络是想要使用各种不同的更新规则时，比如SGD、Nesterov-SGD、Adam、RMSProp等，PyTorch中构建了一个包<code>torch.optim</code>实现了所有的这些规则。 使用它们非常简单： </p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token punctuation">.</span>optim <span class="token keyword">as</span> optim<span class="token comment" spellcheck="true"># create your optimizer</span>optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 以SGD为例</span><span class="token keyword">for</span> input <span class="token keyword">in</span> input_batches<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># in your training loop:</span>    optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 清空累加的梯度值，和net.zero_grad()效果一致</span>    output <span class="token operator">=</span> net<span class="token punctuation">(</span>input<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 每次一个mini-batch的数据</span>    loss <span class="token operator">=</span> criterion<span class="token punctuation">(</span>output<span class="token punctuation">,</span> target<span class="token punctuation">)</span>    loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>    optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Does the update</span></code></pre><h2 id="训练一个分类器"><a href="#训练一个分类器" class="headerlink" title="训练一个分类器"></a>训练一个分类器</h2><p>基于CIFAR10数据集，实现一个图像分类器实例。</p><p>训练一个典型的图像分类分类器依次按照下列顺序进行：</p><ol><li>使用<code>torchvision</code>加载和归一化CIFAR10训练集和测试集</li><li>定义一个卷积神经网络</li><li>定义损失函数</li><li>在训练集上训练网络</li><li>在测试集上测试网络</li></ol><h3 id="处理数据"><a href="#处理数据" class="headerlink" title="处理数据"></a>处理数据</h3><p>一般情况下处理图像、文本、音频和视频数据时，可以使用标准的Python包来加载数据到一个numpy数组中。 然后把这个数组转换成 <code>torch.*Tensor</code>。</p><ul><li>图像可以使用 Pillow, OpenCV</li><li>音频可以使用 scipy, librosa</li><li>文本可以使用原始Python和Cython来加载，或者使用 NLTK或 SpaCy 处理</li></ul><p>特别的，对于图像任务，我们创建了一个包 <code>torchvision</code>，它包含了处理一些基本图像数据集的方法。这些数据集包括 Imagenet, CIFAR10, MNIST 等。除了数据加载以外，<code>torchvision</code> 还包含了图像转换器， <code>torchvision.datasets</code> 和 <code>torch.utils.data.DataLoader</code>。</p><p><code>torchvision</code>包不仅提供了巨大的便利，也避免了代码的重复。</p><p>在这个教程中，我们使用CIFAR10数据集，它有如下10个类别 ：‘airplane’, ‘automobile’, ‘bird’, ‘cat’, ‘deer’, ‘dog’, ‘frog’, ‘horse’, ‘ship’, ‘truck’。CIFAR-10的图像都是 3x32x32大小的，即，3颜色通道，32x32像素。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> torchvision<span class="token keyword">import</span>  torchvision<span class="token punctuation">.</span>transforms <span class="token keyword">as</span> transforms<span class="token comment" spellcheck="true"># 模块提供了一般的图像转换操作类，用作数据的处理和增广</span>transform <span class="token operator">=</span> transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token comment" spellcheck="true"># 将一个PIL图像转换为tensor</span><span class="token comment" spellcheck="true">## (H*W*C)范围在[0,255]的PIL图像转换为 (C*H*W)范围在[0,1]的torch.tensor</span>    <span class="token punctuation">[</span> transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true"># RGB每channel进行归一化用到的均值和方差</span><span class="token comment" spellcheck="true">## 归一化到[-1,1]</span>      transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 配置CIFAR10训练集</span><span class="token comment" spellcheck="true">## 加载目录</span><span class="token comment" spellcheck="true">## 用于是否加载训练集</span><span class="token comment" spellcheck="true">## 是否自动下载</span><span class="token comment" spellcheck="true">## 对数据进行预处理</span>trainset <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>CIFAR10<span class="token punctuation">(</span><span class="token string">'./data'</span><span class="token punctuation">,</span>train<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> transform<span class="token operator">=</span>transform<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 数据加载器</span><span class="token comment" spellcheck="true">## 加载哪一个数据集</span><span class="token comment" spellcheck="true">## batch_size=4,每一次传入4张图片</span><span class="token comment" spellcheck="true">## 是否需要洗牌，每训练完一轮需要洗牌</span><span class="token comment" spellcheck="true">## 使用一个线程来执行</span>trainloader <span class="token operator">=</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>trainset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 配置CIFAR10测试集</span>testset <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>CIFAR10<span class="token punctuation">(</span>root<span class="token operator">=</span><span class="token string">'./data'</span><span class="token punctuation">,</span> train<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> transform<span class="token operator">=</span>transform<span class="token punctuation">)</span>testloader <span class="token operator">=</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>testset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>classes <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'plane'</span><span class="token punctuation">,</span> <span class="token string">'car'</span><span class="token punctuation">,</span> <span class="token string">'bird'</span><span class="token punctuation">,</span> <span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'deer'</span><span class="token punctuation">,</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token string">'frog'</span><span class="token punctuation">,</span> <span class="token string">'horse'</span><span class="token punctuation">,</span> <span class="token string">'ship'</span><span class="token punctuation">,</span> <span class="token string">'truck'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 共10分类</span></code></pre><p>可以通过<code>matplotlib</code>库来绘图查看数据集中的图片 :</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 随机查看一个batch_size</span><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">def</span> <span class="token function">imshow</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">:</span>    img <span class="token operator">=</span> img<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">+</span><span class="token number">0.5</span>    npimg <span class="token operator">=</span> img<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>np<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>npimg<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 配置迭代器从数据加载器中读取数据</span>dataiter <span class="token operator">=</span> iter<span class="token punctuation">(</span>trainloader<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 读取下一项数据</span>images<span class="token punctuation">,</span> labels <span class="token operator">=</span> dataiter<span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span>imshow<span class="token punctuation">(</span>torchvision<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>make_grid<span class="token punctuation">(</span>images<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="定义卷积神经网络模型"><a href="#定义卷积神经网络模型" class="headerlink" title="定义卷积神经网络模型"></a>定义卷积神经网络模型</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F<span class="token keyword">class</span> <span class="token class-name">Net</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>Net<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 3通道（彩色图片），6个5×5的卷积核</span>        self<span class="token punctuation">.</span>pool <span class="token operator">=</span> nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">*</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">84</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc3 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>pool<span class="token punctuation">(</span>F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>pool<span class="token punctuation">(</span>F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv2<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> x<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">16</span> <span class="token operator">*</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fc1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fc2<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>fc3<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> xnet <span class="token operator">=</span> Net<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="定义损失函数与优化器"><a href="#定义损失函数与优化器" class="headerlink" title="定义损失函数与优化器"></a>定义损失函数与优化器</h3><p>我们使用交叉熵作为损失函数，使用带动量的随机梯度下降。 </p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token punctuation">.</span>optim <span class="token keyword">as</span> optimcriterion <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 交叉熵损失函数</span>optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">,</span> momentum<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">)</span></code></pre><h3 id="训练神经网络模型"><a href="#训练神经网络模型" class="headerlink" title="训练神经网络模型"></a>训练神经网络模型</h3><pre class=" language-python"><code class="language-python"><span class="token operator">or</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 多轮（epoch）训练</span>    running_loss <span class="token operator">=</span> <span class="token number">0.0</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> data <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>trainloader<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 多mini-batch循环</span>        <span class="token comment" spellcheck="true"># 获取输入</span>        inputs<span class="token punctuation">,</span> labels <span class="token operator">=</span> data        <span class="token comment" spellcheck="true"># 梯度置0（清空累加grad）</span>        optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 正向传播，反向传播，优化</span>        outputs <span class="token operator">=</span> net<span class="token punctuation">(</span>inputs<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 模型正向传播，inputs=>outputs</span>        loss <span class="token operator">=</span> criterion<span class="token punctuation">(</span>outputs<span class="token punctuation">,</span> labels<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 调用交叉熵损失</span>        loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true"># 对损失进行反向传播</span>        optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true"># 对参数梯度下降一步</span>        <span class="token comment" spellcheck="true"># 打印状态信息</span>        running_loss <span class="token operator">+=</span> loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">2000</span> <span class="token operator">==</span> <span class="token number">1999</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 每2000批次打印一次</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[%d, %5d] loss: %.3f'</span> <span class="token operator">%</span>                  <span class="token punctuation">(</span>epoch <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> running_loss <span class="token operator">/</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            running_loss <span class="token operator">=</span> <span class="token number">0.0</span>    <span class="token comment" spellcheck="true"># running_loss是2000个batch的loss和</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Finished Training'</span><span class="token punctuation">)</span></code></pre><h3 id="测试神经网络模型"><a href="#测试神经网络模型" class="headerlink" title="测试神经网络模型"></a>测试神经网络模型</h3><p>我们在整个训练集上进行了2轮（epoch）训练，但是我们需要检查网络是否从数据集中学习到有用的东西。 通过预测神经网络输出的类别标签与实际情况标签进行对比来进行检测。 如果预测正确，我们把该样本添加到正确预测列表。 第一步，显示测试集中的图片并熟悉图片内容。 </p><pre class=" language-python"><code class="language-python">dataiter <span class="token operator">=</span> iter<span class="token punctuation">(</span>testloader<span class="token punctuation">)</span>images<span class="token punctuation">,</span> labels <span class="token operator">=</span> dataiter<span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 显示图片</span>imshow<span class="token punctuation">(</span>torchvision<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>make_grid<span class="token punctuation">(</span>images<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'GroundTruth: '</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'%5s'</span> <span class="token operator">%</span> classes<span class="token punctuation">[</span>labels<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 对模型输入图片</span>outputs <span class="token operator">=</span> net<span class="token punctuation">(</span>images<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输出是10个标签的分值。</span><span class="token comment" spellcheck="true"># 一个类别的分值越大，神经网络越认为它是这个类别。所以让我们得到最高能量的标签。</span>_<span class="token punctuation">,</span> predicted <span class="token operator">=</span> torch<span class="token punctuation">.</span>max<span class="token punctuation">(</span>outputs<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Predicted: '</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'%5s'</span> <span class="token operator">%</span> classes<span class="token punctuation">[</span>predicted<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 列表推导式</span><span class="token comment" spellcheck="true"># 统计模型在整个测试集上的测试结果</span>correct <span class="token operator">=</span> <span class="token number">0</span>total <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 禁用梯度计算</span>    <span class="token keyword">for</span> data <span class="token keyword">in</span> testloader<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 加载测试数据</span>        images<span class="token punctuation">,</span> labels <span class="token operator">=</span> data        outputs <span class="token operator">=</span> net<span class="token punctuation">(</span>images<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 正向传播</span>        _<span class="token punctuation">,</span> predicted <span class="token operator">=</span> torch<span class="token punctuation">.</span>max<span class="token punctuation">(</span>outputs<span class="token punctuation">.</span>data<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 计算mini-batch的预测结果</span>        total <span class="token operator">+=</span> labels<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 统计已测试图片个数</span>        correct <span class="token operator">+=</span> <span class="token punctuation">(</span>predicted <span class="token operator">==</span> labels<span class="token punctuation">)</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 统计预测正确的个数</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Accuracy of the network on the 10000 test images: %d %%'</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">*</span> correct <span class="token operator">/</span> total<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Accuracy of the network on the 10000 test images: 9 %</span></code></pre><p>结果看起来不错，至少比随机选择要好，随机选择的正确率为10%。 似乎网络学习到了一些东西。</p><p>在识别哪一个类的时候好，哪一个不好呢？</p><pre class=" language-python"><code class="language-python">class_correct <span class="token operator">=</span> list<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">.</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>class_total <span class="token operator">=</span> list<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">.</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> data <span class="token keyword">in</span> testloader<span class="token punctuation">:</span>        images<span class="token punctuation">,</span> labels <span class="token operator">=</span> data        outputs <span class="token operator">=</span> net<span class="token punctuation">(</span>images<span class="token punctuation">)</span>        _<span class="token punctuation">,</span> predicted <span class="token operator">=</span> torch<span class="token punctuation">.</span>max<span class="token punctuation">(</span>outputs<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        c <span class="token operator">=</span> <span class="token punctuation">(</span>predicted <span class="token operator">==</span> labels<span class="token punctuation">)</span><span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            label <span class="token operator">=</span> labels<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            class_correct<span class="token punctuation">[</span>label<span class="token punctuation">]</span> <span class="token operator">+=</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 统计每类的正确数</span>            class_total<span class="token punctuation">[</span>label<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>                    <span class="token comment" spellcheck="true"># 统计每类的预测总数</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Accuracy of %5s : %2d %%'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>        classes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">100</span> <span class="token operator">*</span> class_correct<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> class_total<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Accuracy of plane : 99 %</span><span class="token comment" spellcheck="true"># Accuracy of   car :  0 %</span><span class="token comment" spellcheck="true"># Accuracy of  bird :  0 %</span><span class="token comment" spellcheck="true"># Accuracy of   cat :  0 %</span><span class="token comment" spellcheck="true"># Accuracy of  deer :  0 %</span><span class="token comment" spellcheck="true"># Accuracy of   dog :  0 %</span><span class="token comment" spellcheck="true"># Accuracy of  frog :  0 %</span><span class="token comment" spellcheck="true"># Accuracy of horse :  0 %</span><span class="token comment" spellcheck="true"># Accuracy of  ship :  0 %</span><span class="token comment" spellcheck="true"># Accuracy of truck :  0 %</span></code></pre><h3 id="在GPU上训练"><a href="#在GPU上训练" class="headerlink" title="在GPU上训练"></a>在GPU上训练</h3><h4 id="检查GPU支持"><a href="#检查GPU支持" class="headerlink" title="检查GPU支持"></a>检查GPU支持</h4><pre class=" language-python"><code class="language-python">device <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">"cuda:0"</span> <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">"cpu"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 确认我们的电脑支持CUDA，然后显示CUDA信息：</span><span class="token keyword">print</span><span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># device(type='cuda', index=0)</span></code></pre><p>本节的其余部分假定<code>device</code>是CUDA设备。 </p><h4 id="神经网络模型载入CUDA"><a href="#神经网络模型载入CUDA" class="headerlink" title="神经网络模型载入CUDA"></a>神经网络模型载入CUDA</h4><p><code>torch.nn.Module.to</code>将递归遍历所有模块并将模块的参数和缓冲区转换成CUDA张量： </p><pre class=" language-python"><code class="language-python">net<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 把神经网络模型载入CUDA</span></code></pre><h4 id="输入数据载入CUDA"><a href="#输入数据载入CUDA" class="headerlink" title="输入数据载入CUDA"></a>输入数据载入CUDA</h4><pre class=" language-python"><code class="language-python">inputs<span class="token punctuation">,</span> labels <span class="token operator">=</span> inputs<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">,</span> labels<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span></code></pre><p>为什么我们没注意到GPU的速度提升很多？那是因为网络非常的小。</p><p><strong>实践:</strong> 尝试增加你的网络的宽度（第一个<code>nn.Conv2d</code>的第2个参数，第二个<code>nn.Conv2d</code>的第一个参数，它们需要是相同的数字），看看你得到了什么样的加速。</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> pyTorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01-pyTorch安装测试</title>
      <link href="/2020/04/09/20200409-154755/"/>
      <url>/2020/04/09/20200409-154755/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200409155327.png" alt=""></p><p>本次安装的环境配置：</p><ul><li>win10</li><li>Anaconda</li><li>pyTorch0.4</li><li>IDE: pycharm</li></ul><ol><li><p>新建虚拟环境</p><pre class=" language-bash"><code class="language-bash">conda create -n pytorch python<span class="token operator">=</span>3.5</code></pre></li><li><p>激活新建的虚拟环境</p><pre class=" language-bash"><code class="language-bash">activate pytorch</code></pre></li><li><p>更新pip</p><pre class=" language-bash"><code class="language-bash">python -m pip <span class="token function">install</span> --upgrade pip</code></pre></li></ol><ol start="4"><li><p>下载需要的文件包</p><p><a href="https://pytorch.org/get-started/previous-versions/#via-conda" target="_blank" rel="noopener">https://pytorch.org/get-started/previous-versions/#via-conda</a> </p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200409163337.png" alt=""></p></li></ol><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200409163403.png" alt=""></p><ol start="4"><li><p>进行目录跳转，安装文件</p><p><strong>注意：</strong></p><p>不能直接跳转到E盘，需要先跳到当前盘符的根目录，在进行盘符跳转</p><p>经过一番查证之后，发现Anaconda Prompt只能在根目录下进行切换盘符<br>cd ../ 直接切换到c:<br>然后直接：D：<br>进入D盘<br>然后在进行文件切换</p><pre class=" language-bash"><code class="language-bash">pip <span class="token function">install</span> <span class="token punctuation">[</span>filename<span class="token punctuation">]</span></code></pre><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200409163609.png" alt=""></p></li></ol><ol start="5"><li><p>验证安装</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">print</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>__version__<span class="token punctuation">)</span></code></pre></li></ol><p>   <img src="https://gitee.com/homewyk/cloudimg/raw/master/20200409164717.png" alt=""></p><ol start="6"><li><p>安装<code>torchvision==0.0.2</code></p><pre class=" language-bash"><code class="language-bash">pip <span class="token function">install</span> torchvision<span class="token operator">==</span>0.0.2</code></pre><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200409164841.png" alt=""></p></li><li><p>验证安装</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> torchvision<span class="token keyword">print</span><span class="token punctuation">(</span>torchvision<span class="token punctuation">.</span>__version__<span class="token punctuation">)</span></code></pre></li></ol><p>   <img src="https://gitee.com/homewyk/cloudimg/raw/master/20200409164929.png" alt=""></p><ol start="8"><li><p>安装opencv</p><pre class=" language-bash"><code class="language-bash">pip <span class="token function">install</span> opencv-python</code></pre></li></ol><ol start="9"><li><p>IDE环境测试</p><p>切换虚拟环境</p><p><code>setting -&gt; conda Env -&gt; exist env -&gt; 选择虚拟环境的python.exe</code></p></li></ol><p>Anaconda的相关命令</p><ol><li>介绍：<br>包含了数据常用包，而且便于安装pip install<br>使用虚拟的python环境，便于针对于不同版本的python</li><li>使用：<br>使用pycharm作为编辑器<br>使用anaconda的虚拟环境作为pycharm的编译器<br>在pycharm的setting =&gt;conda ENV =&gt; 选择虚拟环境下的python.exe</li><li>配置anaconda在cmd中使用：<br>添加环境变量：<br>   D:\Anaconda3<br>   D:\Anaconda3\Scripts<br>   D:\Anaconda3\Library\bin</li><li>cmd相关命令的使用：<br>创建虚拟环境：<br>   conda create –name <a href="环境名称">python36</a> python=3.6<br>查看创建的虚拟环境：<br>   conda env list<br>删除虚拟环境：<br>   conda remove –name [python36] -all<br>使用虚拟环境：<br>   activate python36<br>确认python版本：<br>   python –version<br>在新创建的环境下安装anaconda默认的所有第三方库：<br>   conda install anaconda</li><li>anaconda在cmd切换盘符时的问题：<br>必须cd到盘符根目录下，才可以进入其他盘符！！！</li></ol><p>参考资料：</p><p><a href="https://blog.csdn.net/weixin_39450145/article/details/103793651" target="_blank" rel="noopener">https://blog.csdn.net/weixin_39450145/article/details/103793651</a> </p><p>学习资料</p><p><a href="https://github.com/zergtant/pytorch-handbook/blob/master/chapter1/1.3-deep-learning-with-pytorch-60-minute-blitz.md" target="_blank" rel="noopener">https://github.com/zergtant/pytorch-handbook/blob/master/chapter1/1.3-deep-learning-with-pytorch-60-minute-blitz.md</a> </p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> pyTorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>05-数据结构Java版-环形队列</title>
      <link href="/2020/04/09/20200409-113227/"/>
      <url>/2020/04/09/20200409-113227/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/homewyk/cloudimg/raw/master/images.jpg" alt=""></p><h2 id="环形队列结构"><a href="#环形队列结构" class="headerlink" title="环形队列结构"></a>环形队列结构</h2><blockquote><p>对数组模拟队列的不足点进行改造</p></blockquote><p>将数组看作是一个环形的（可以通过取模的方法实现）</p><h3 id="环形队列分析"><a href="#环形队列分析" class="headerlink" title="环形队列分析"></a>环形队列分析</h3><p>所需要的变量定义：</p><ul><li>一个数组<code>int[] arr</code></li><li>最大容量：<code>int[] arr = new int[maxsize]</code></li><li>一个指针指向队列头部，（包含） <code>int front = 0</code></li><li>一个指针指向队列尾部的下一个 （不包含）<code>int rear = 0</code></li></ul><p>注意：</p><p>上述的两个指针的含义发生了很大的变化！！</p><p>发生变化的原因是通过使用队列尾部的下一个元素,空出一个空间出来，作为约定</p><h3 id="环形思路分析"><a href="#环形思路分析" class="headerlink" title="环形思路分析"></a>环形思路分析</h3><ol><li><p>创建一个<code>class</code>，并实现上述变量的定义以及初始化</p></li><li><p>实现2个判断：</p><ul><li><p><code>isFull</code>   -&gt; <code>（rear +1）% maxsize = front</code> </p></li><li><p>因为添加元素是<code>rear</code>在动作，此时<code>front</code>处于队列头部</p></li><li><p>又因为是环形的，当满的时候<code>rear+1 = front</code></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200409143943.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200409144109.png" alt=""></p><p>兼顾上述两种情况，统一使用取模来计算</p></li><li><p><code>isEmpty</code> -&gt; <code>front == rear</code></p><ul><li><p>一个数据未添加时空<code>front = 0, rear = 0;</code>  -&gt; <code>front == rear</code></p></li><li><p>当取出数据空： <code>rear = front</code></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200409144332.png" alt=""></p></li></ul></li></ul></li><li><p>添加数据：</p><ul><li>判断是否满</li><li>添加操作</li><li>指针变化</li></ul></li><li><p>取出数据：</p><ul><li>判断是否空</li><li>取出数据</li><li>指针变化</li></ul></li><li><p>得到队列头部数据：</p><ul><li>判断是否为空</li><li>使用<code>front</code>来获得队列头部数据</li></ul></li><li><p>获得队列容量</p><ul><li><p><code>(rear+maxsize -front)%maxsize</code></p><p>我们一般计算容量都是<strong>结尾坐标减去开始坐标</strong>；</p><ul><li>比如下面的常规情况：</li><li>针对于：<code>rear</code>在<code>front</code>之后的情况，其实可以直接计算：<code>rear - front</code></li></ul><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200409150922.png" alt=""></p><ul><li>非常规情况：</li><li>针对于：<code>rear</code>在<code>front</code>之前的情况，计算容量其实也是<strong>结束坐标减去开始坐标</strong>，但是这里的结尾坐标是加上一个容量，变为一个大数，最后在取余</li></ul><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200409150735.png" alt=""></p></li></ul></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>homewyk<span class="token punctuation">.</span>queue<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CircleQueue</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        MyCircleQueue queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyCircleQueue</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> key <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">;</span>        Scanner in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> loop <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>loop<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s: 显示队列"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"e: 退出程序"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a: 添加数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"g: 取出数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"h: 查看数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//接收字符串的第一个字符</span>            key <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token string">'s'</span><span class="token operator">:</span>                queue<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'e'</span><span class="token operator">:</span>                in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                loop <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'a'</span><span class="token operator">:</span>                <span class="token keyword">int</span> item <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'g'</span><span class="token operator">:</span>                queue<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'h'</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"队列头部元素为："</span> <span class="token operator">+</span> queue<span class="token punctuation">.</span><span class="token function">head</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"程序退出~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MyCircleQueue</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> maxsize <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//注意此时的含义变了</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> front<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> rear<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/***     * 构造函数，定义时确定队列容量     * @param maxsize 队列容量     */</span>    <span class="token keyword">public</span> <span class="token function">MyCircleQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxsize<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>maxsize <span class="token operator">=</span> maxsize<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>maxsize<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指向当前元素</span>        front <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指向队列的最后一个元素的后一个位置，留一个空位置</span>        rear <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/***     * 判断队列是否满     * 3 x 1 2     * front:2     * rear:1     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>rear<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>maxsize <span class="token operator">==</span> front<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/***     * 判断队列是否空     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> rear <span class="token operator">==</span> front<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/***     * 添加队列     * @param item     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"队列容量已满~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        arr<span class="token punctuation">[</span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">;</span>        rear <span class="token operator">=</span> <span class="token punctuation">(</span>rear<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>maxsize<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 取出队列元素     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"队列空，不能取数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>        front <span class="token operator">=</span> <span class="token punctuation">(</span>front<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>maxsize<span class="token punctuation">;</span>        <span class="token keyword">return</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/***     * 显示队列元素     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"队列空，没有数据~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> front<span class="token punctuation">;</span> i <span class="token operator">&lt;</span>front <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"arr[%d] = %d\n"</span><span class="token punctuation">,</span> i<span class="token operator">%</span>maxsize<span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token operator">%</span>maxsize<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>rear <span class="token operator">+</span> maxsize <span class="token operator">-</span> front<span class="token punctuation">)</span> <span class="token operator">%</span> maxsize<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/***     * 显示队列头部，非取出     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">head</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"队列空，没有数据~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> arr<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04-数据结构Java版-顺序队列</title>
      <link href="/2020/04/09/20200409-103227/"/>
      <url>/2020/04/09/20200409-103227/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/homewyk/cloudimg/raw/master/images.jpg" alt=""></p><h2 id="顺序队列结构"><a href="#顺序队列结构" class="headerlink" title="顺序队列结构"></a>顺序队列结构</h2><h3 id="队列介绍"><a href="#队列介绍" class="headerlink" title="队列介绍"></a>队列介绍</h3><ul><li><p>有序队列</p><ul><li>数组实现- 顺序结构</li><li>链表实现 - 链式结构</li></ul></li><li><p>先进先出</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200409105223.png" alt=""></p></li></ul><h3 id="数组模拟队列"><a href="#数组模拟队列" class="headerlink" title="数组模拟队列"></a>数组模拟队列</h3><p>所需要的变量定义：</p><ul><li>一个数组 <code>int[]</code></li><li>一个最大容量<code>int[] arr = new nt[maxsize]</code></li><li>一个指针指向队列头的前一个,初始值为-1，（不包括）<code>int front = -1</code></li><li>一个指针指向队列尾初始值为-1，(包括) <code>int rear = -1</code></li></ul><p>如图所示：</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200409105621.png" alt=""></p><h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><ol><li><p>创建一个<code>class</code>，并实现上述变量的定义以及初始化</p></li><li><p>实现2个判断：</p><ul><li><code>isFull</code>   -&gt; <code>rear == maxsize-1</code> </li><li><code>isEmpty</code> -&gt; <code>front == rear</code><ul><li>队列中无数据时：<code>front = -1, rear = -1;</code>  -&gt; <code>front == rear</code></li><li>队列中有数据，当取出数据空： <code>rear = maxsize -1, front = maxsize -1</code>  -&gt; <code>front == rear</code></li></ul></li></ul></li><li><p>添加数据：</p><ul><li>判断是否满</li><li>添加操作</li><li>指针变化</li></ul></li><li><p>取出数据：</p><ul><li>判断是否空</li><li>取出数据</li><li>指针变化</li></ul></li><li><p>得到队列头部数据：</p><ul><li><p>判断是否为空</p></li><li><p>使用<code>front</code>来获得队列头部数据</p></li></ul></li></ol><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>homewyk<span class="token punctuation">.</span>queue<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">arraryQueue</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ArrayQueue queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayQueue</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> key <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">;</span>        Scanner in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> loop <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>loop<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s: 显示队列"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"e: 退出程序"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a: 添加数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"g: 取出数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"h: 查看数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//接收字符串的第一个字符</span>            key <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token string">'s'</span><span class="token operator">:</span>                queue<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'e'</span><span class="token operator">:</span>                in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                loop <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'a'</span><span class="token operator">:</span>                <span class="token keyword">int</span> item <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'g'</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"get data:"</span> <span class="token operator">+</span>queue<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'h'</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"队列头部元素为："</span> <span class="token operator">+</span> queue<span class="token punctuation">.</span><span class="token function">head</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"程序退出~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ArrayQueue</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> maxsize <span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> front<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> rear<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/***     * 构造函数，定义时确定队列容量     * @param maxsize 队列容量     */</span>    <span class="token keyword">public</span> <span class="token function">ArrayQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxsize<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>maxsize <span class="token operator">=</span> maxsize<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>maxsize<span class="token punctuation">]</span><span class="token punctuation">;</span>        front <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        rear <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/***     * 判断队列是否满     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> rear <span class="token operator">==</span> maxsize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/***     * 判断队列是否空     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> rear <span class="token operator">==</span> front<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/***     * 添加队列     * @param item     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"队列容量已满~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        rear <span class="token operator">++</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 取出队列元素     *       * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"队列空，不能取数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        front <span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> arr<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/***     * 显示队列元素     * error     */</span><span class="token comment" spellcheck="true">//    public void show() {</span><span class="token comment" spellcheck="true">//        if (isEmpty()) {</span><span class="token comment" spellcheck="true">//            System.out.println("队列空，没有数据~~");</span><span class="token comment" spellcheck="true">//            return;</span><span class="token comment" spellcheck="true">//        }</span><span class="token comment" spellcheck="true">//        for (int i = 0; i &lt; maxsize; i++) {</span><span class="token comment" spellcheck="true">//            System.out.printf("arr[%d] = %d\n", i, arr[i]);</span><span class="token comment" spellcheck="true">//        }</span><span class="token comment" spellcheck="true">//    }</span>    <span class="token comment" spellcheck="true">/***     * 显示队列元素     * 修改过：从 front + 1 到rear才是真正的     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"队列空，没有数据~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> front<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> rear<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"arr[%d] = %d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/***     * 显示队列头部，非取出     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">head</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"队列空，没有数据~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> arr<span class="token punctuation">[</span>front <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="上述思路的不足之处"><a href="#上述思路的不足之处" class="headerlink" title="上述思路的不足之处"></a>上述思路的不足之处</h3><ul><li>数组只能使用一次，无法进行复用</li><li>可以将通过这个数组，然后改为一个环形队列，需要使用<code>%</code>来实现</li><li>从上面的实现上，可以很清楚看出来，存在这种问题</li></ul><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200409114302.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于socket的简单编程</title>
      <link href="/2020/04/08/20200408-232750/"/>
      <url>/2020/04/08/20200408-232750/</url>
      
        <content type="html"><![CDATA[<blockquote><p>只是实现相应的要求，未经过程序改良：</p><p>改良方向：</p><ul><li>实现单服务器多客户端聊天</li><li>实现并发池</li><li>实现功能向qq的功能实现靠近</li></ul></blockquote><p><strong>client：</strong></p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//客户端程序</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span>  </span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span>  </span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string.h></span>  </span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;errno.h></span>  </span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;sys/types.h></span>  </span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;sys/socket.h></span>  </span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;netinet/in.h></span>  </span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;arpa/inet.h></span>  </span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;fcntl.h></span>  </span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;unistd.h></span>  </span><span class="token operator">/</span>缓冲区大小<span class="token operator">/</span>  <span class="token macro property">#<span class="token directive keyword">define</span> MAXLINE 4096  </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> n<span class="token punctuation">,</span>rec_len<span class="token punctuation">;</span>      <span class="token keyword">char</span> recvline<span class="token punctuation">[</span><span class="token number">4096</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sendline<span class="token punctuation">[</span><span class="token number">4096</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> buf<span class="token punctuation">[</span>MAXLINE<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">struct</span> sockaddr_in servaddr<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> argc <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"usage: ./client &lt;ipaddress> &lt;port>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>sockfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"create socket error: %s(errno: %d)\n"</span><span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">,</span>errno<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>servaddr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>servaddr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        servaddr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>        servaddr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span><span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//inet_pton是Linux下IP地址转换函数，将IP地址在“点分十进制”和“整数”之间转换  </span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">inet_pton</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>servaddr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"inet_pton error for %s\n"</span><span class="token punctuation">,</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">connect</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>servaddr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>servaddr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"connect error: %s(errno: %d)\n"</span><span class="token punctuation">,</span><span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">,</span>errno<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"send msg to server: \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">fgets</span><span class="token punctuation">(</span>sendline<span class="token punctuation">,</span> <span class="token number">4096</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">send</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> sendline<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>sendline<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"send msg error: %s(errno: %d)\n"</span><span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">,</span> errno<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rec_len <span class="token operator">=</span> <span class="token function">recv</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> MAXLINE<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"recv error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            buf<span class="token punctuation">[</span>rec_len<span class="token punctuation">]</span>  <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>           <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Received : %s\n"</span><span class="token punctuation">,</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span><span class="token string">"quit"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>              <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token function">close</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  </code></pre><p><strong>server:</strong></p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//服务器程序</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;errno.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;sys/types.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;sys/socket.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;netinet/in.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;arpa/inet.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;fcntl.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> DEFAULT_PORT 8000</span><span class="token macro property">#<span class="token directive keyword">define</span> MAXLINE 4096</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> socket_fd<span class="token punctuation">,</span> connect_fd<span class="token punctuation">;</span>    <span class="token keyword">struct</span> sockaddr_in servaddr<span class="token punctuation">;</span>    <span class="token keyword">char</span> buff<span class="token punctuation">[</span><span class="token number">4096</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//初始化Socket</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>socket_fd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"create socket error: %s(errno: %d)\n"</span><span class="token punctuation">,</span><span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">,</span>errno<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//初始化</span>    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>servaddr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>servaddr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    servaddr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>    servaddr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">htonl</span><span class="token punctuation">(</span>INADDR_ANY<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//IP地址设置成INADDR_ANY,让系统自动获取本机的IP地址。</span>    servaddr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span>DEFAULT_PORT<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置的端口为DEFAULT_PORT</span>    <span class="token comment" spellcheck="true">//将本地地址绑定到所创建的套接字上  </span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">bind</span><span class="token punctuation">(</span>socket_fd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>servaddr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>servaddr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"bind socket error: %s(errno: %d)\n"</span><span class="token punctuation">,</span><span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">,</span>errno<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//开始监听是否有客户端连接  </span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">listen</span><span class="token punctuation">(</span>socket_fd<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"listen socket error: %s(errno: %d)\n"</span><span class="token punctuation">,</span><span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">,</span>errno<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"======waiting for client's request======\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//阻塞直到有客户端连接，不然多浪费CPU资源。  </span>        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>connect_fd <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>socket_fd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr<span class="token operator">*</span><span class="token punctuation">)</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"accept socket error: %s(errno: %d)"</span><span class="token punctuation">,</span><span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">,</span>errno<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">continue</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//接受客户端传过来的数据  </span>            n <span class="token operator">=</span> <span class="token function">recv</span><span class="token punctuation">(</span>connect_fd<span class="token punctuation">,</span> buff<span class="token punctuation">,</span> MAXLINE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"client close\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">close</span><span class="token punctuation">(</span>connect_fd<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                buff<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">send</span><span class="token punctuation">(</span>connect_fd<span class="token punctuation">,</span> buff<span class="token punctuation">,</span> n<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>                      <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"send error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"recv msg from client: %s\n"</span><span class="token punctuation">,</span> buff<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token function">close</span><span class="token punctuation">(</span>connect_fd<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token function">close</span><span class="token punctuation">(</span>socket_fd<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>效果：</p><ul><li><p>只能够实现单工</p></li><li><p>实现自收发的功能</p><ul><li>client发送到server的消息会由server进行转发会client</li><li>其实也是单工过程</li></ul></li><li><p>如果使用TCP Lib作为服务器的话，需要严格执行单工流程</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200408233336.png" alt=""></p></li></ul><p>总结：</p><p>好长时间没搞这东西了，手生了！！</p><p>以后搞还是不搞，哎呀，不管了，先把眼前的事情顾好吧！！</p><blockquote><p>忽然有了个想法：</p><ul><li>情感分析+聊天怎么样？<ul><li>好写</li><li>实现方法：QT+SOCKET+DL</li><li>我觉得不错哎！！！</li></ul></li><li>其实有个折叠功能还是不错的！</li><li>等自己学到node.js这，看能不能搞一下下！</li></ul></blockquote><p><a href="http://cighao.com/2016/07/12/c-linux-socket/#8-%E4%BE%8B%E5%AD%90" target="_blank" rel="noopener">client参考程序(本程序经过修改发布)</a></p><p><a href="https://zhuanlan.zhihu.com/p/32360506" target="_blank" rel="noopener">server参考程序(本程序经过修改发布)</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> socket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03-数据结构Java版-稀疏数组</title>
      <link href="/2020/04/08/20200408-093605/"/>
      <url>/2020/04/08/20200408-093605/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/homewyk/cloudimg/raw/master/images.jpg" alt=""></p><h2 id="二维数组和稀疏数组的相互转化"><a href="#二维数组和稀疏数组的相互转化" class="headerlink" title="二维数组和稀疏数组的相互转化"></a>二维数组和稀疏数组的相互转化</h2><h3 id="实际情况"><a href="#实际情况" class="headerlink" title="实际情况"></a>实际情况</h3><blockquote><p>实际需求：</p><p>五子棋程序的存盘和复盘操作</p></blockquote><p>棋盘大小：$11\times 11$</p><p>棋盘黑子：用$1$表示</p><p>棋盘白子：用$2$表示</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200408094852.png" alt=""></p><p>使用二维数组直接来保存棋盘数据：</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200408095031.png" alt=""></p><p><strong>问题：该二维数组的很多只都是默认为0的，因此记录了很多的无意义数据</strong></p><p>可以使用稀疏数组进行解决</p><h3 id="稀疏数组"><a href="#稀疏数组" class="headerlink" title="稀疏数组"></a>稀疏数组</h3><p>当一个数组中的元素大部分为0或者相同值很多的时候，可以使用稀疏数组来保存该数组</p><h4 id="二维数组-gt-稀疏数组"><a href="#二维数组-gt-稀疏数组" class="headerlink" title="二维数组 -&gt; 稀疏数组"></a>二维数组 -&gt; 稀疏数组</h4><table><thead><tr><th align="center">row</th><th align="center">col</th><th align="center">val</th></tr></thead><tbody><tr><td align="center">二维数组的行数</td><td align="center">二维数组的列数</td><td align="center">有几个不相同的值</td></tr><tr><td align="center">第1个不同值的row</td><td align="center">第1个不同值的col</td><td align="center">第1个不同值的val</td></tr><tr><td align="center">…</td><td align="center">…</td><td align="center">…</td></tr><tr><td align="center">第n个不同值的row</td><td align="center">第n个不同值的col</td><td align="center">第n个不同值的val</td></tr></tbody></table><ul><li>记录两大类信息：<ul><li>二维数组一共有几行几列，有多少个不同的值</li><li>具体不同的值的行列值</li></ul></li><li>缩小了程序的规模</li></ul><h4 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h4><p>二维数组：</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200408095852.png" alt=""></p><p>相应的稀疏数组表示：</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200408095921.png" alt=""></p><h3 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h3><ol><li>使用稀疏数组，来保存棋盘信息</li><li>把稀疏数组存盘，并且可以恢复为原来的二维数组</li><li>整体思路分析：</li></ol><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200409102829.png" alt=""></p><p>二维数组 转 稀疏数组的思路</p><ol><li>遍历  原始的二维数组，得到有效数据的个数 sum</li><li>根据sum 就可以创建 稀疏数组 sparseArr  <code>int[sum + 1][3]</code></li><li>将二维数组的有效数据数据存入到 稀疏数组</li></ol><p>稀疏数组转原始的二维数组的思路</p><ol><li>先读取稀疏数组的第一行，根据第一行的数据，创建原始的二维数组，比如上面的  <code>chessArr2 = int [11][11]</code></li><li>在读取稀疏数组后几行的数据，并赋给 原始的二维数组 即可.</li></ol><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ol><li>稀疏数组的第一行代表的含义</li><li>对于二维数组来说，稀疏数组只有3列</li><li>在编程是特别要注意对于第一行的处理</li><li>在使用<code>eclipse</code>做编码的时候，最好也不要出现警告！</li></ol><h4 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>homewyk<span class="token punctuation">.</span>sparsearray<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*** * 1. 棋盘的保存和复盘 * 二维数组 -> 稀疏数组 -> 二维数组 * @author asdw1 * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SparseArray</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSparse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*          * 1. 新建棋盘11*11，并设置2个黑白棋子          */</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chessArray1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        chessArray1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        chessArray1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输出原始棋盘布局"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rows <span class="token operator">:</span> chessArray1<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> item <span class="token operator">:</span> rows<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*         * 2. 转换为稀疏数组         */</span>        <span class="token comment" spellcheck="true">//需要先得到稀疏数组的大小</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rows <span class="token operator">:</span> chessArray1<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> item <span class="token operator">:</span> rows<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>item <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>                    sum <span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 创建稀疏数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sparseArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>sum<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//稀疏数组第一行赋值</span>        sparseArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> chessArray1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        sparseArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> chessArray1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        sparseArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//稀疏数组后续元素的赋值操作</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> chessArray1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> chessArray1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>chessArray1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    count <span class="token operator">++</span><span class="token punctuation">;</span>                    sparseArr<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>                    sparseArr<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>                    sparseArr<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> chessArray1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"二维数组转换成的稀疏数组"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rows <span class="token operator">:</span> sparseArr<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> item <span class="token operator">:</span> rows<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*         * 3. 稀疏数组转换为棋盘         */</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chessArray2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>sparseArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>sparseArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//注意要从1开始</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sparseArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            chessArray2<span class="token punctuation">[</span>sparseArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>sparseArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> sparseArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"稀疏数组转换成的二维数组"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rows <span class="token operator">:</span> chessArray2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> item <span class="token operator">:</span> rows<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="保存和读取棋盘数据"><a href="#保存和读取棋盘数据" class="headerlink" title="保存和读取棋盘数据"></a>保存和读取棋盘数据</h4><ul><li>存盘操作使用<code>bufferedWriter</code></li><li>读取操作使用<code>bufferedReader</code></li><li>字符串转换为整形<code>Integer.parseInt(String)</code></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>homewyk<span class="token punctuation">.</span>sparsearray<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedWriter<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileWriter<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*** * 1. 棋盘的保存和复盘 * 二维数组 -> 稀疏数组 -> 二维数组 * 加入了从文件读取和保存到文件的操作 * @author asdw1 * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SaveAndLoad</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSparse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*          * 1. 新建棋盘11*11，并设置2个黑白棋子          */</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chessArray1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        chessArray1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        chessArray1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输出原始棋盘布局"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rows <span class="token operator">:</span> chessArray1<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> item <span class="token operator">:</span> rows<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*         * 2. 转换为稀疏数组         */</span>        <span class="token comment" spellcheck="true">//需要先得到稀疏数组的大小</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rows <span class="token operator">:</span> chessArray1<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> item <span class="token operator">:</span> rows<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>item <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>                    sum <span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 创建稀疏数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sparseArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>sum<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//稀疏数组第一行赋值</span>        sparseArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> chessArray1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        sparseArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> chessArray1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        sparseArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//稀疏数组后续元素的赋值操作</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> chessArray1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> chessArray1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>chessArray1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    count <span class="token operator">++</span><span class="token punctuation">;</span>                    sparseArr<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>                    sparseArr<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>                    sparseArr<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> chessArray1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"二维数组转换成的稀疏数组"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rows <span class="token operator">:</span> sparseArr<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> item <span class="token operator">:</span> rows<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*         * 存盘操作         */</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"map.dat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            file<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        BufferedWriter bw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rows <span class="token operator">:</span> sparseArr<span class="token punctuation">)</span> <span class="token punctuation">{</span>            bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>rows<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"\t"</span> <span class="token operator">+</span> rows<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"\t"</span><span class="token operator">+</span>rows<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bw<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        bw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*         * 3. 稀疏数组转换为棋盘         * 从文件中得到稀疏数组         */</span>        BufferedReader br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String str <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sparseArr2 <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>str <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cnt <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//要注意这一步！！！arr[2]得到的是不同数据的个数，未算第0行</span>                sparseArr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sparseArr2<span class="token punctuation">.</span>length<span class="token operator">+</span>sparseArr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            sparseArr2<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sparseArr2<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sparseArr2<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cnt <span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"从文件中解析的稀疏数组"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rows <span class="token operator">:</span> sparseArr2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> item <span class="token operator">:</span> rows<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chessArray2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>sparseArr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>sparseArr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//注意要从1开始</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sparseArr2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            chessArray2<span class="token punctuation">[</span>sparseArr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>sparseArr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> sparseArr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"稀疏数组转换成的二维数组"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rows <span class="token operator">:</span> chessArray2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> item <span class="token operator">:</span> rows<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02-数据结构Java版-概述</title>
      <link href="/2020/04/08/20200408-082903/"/>
      <url>/2020/04/08/20200408-082903/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/homewyk/cloudimg/raw/master/images.jpg" alt=""></p><h2 id="数据结构与算法的概述"><a href="#数据结构与算法的概述" class="headerlink" title="数据结构与算法的概述"></a>数据结构与算法的概述</h2><ol><li>数据结构是一门研究组织数据方式的学科，有了编程语言便有了数据结构，学好数据结构可以编写出比较高效率的代码</li><li>要学好数据结构，需要考虑如何用之解决实际问题</li><li>程序 = 数据结构+算法</li><li>数据结构是算法的基础</li></ol><h3 id="实际的编程案例"><a href="#实际的编程案例" class="headerlink" title="实际的编程案例"></a>实际的编程案例</h3><ol><li><p>字符串替换问题：</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200408091337.png" alt=""></p><p>需要使用单链表</p></li><li><p>一个五子棋程序</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200408091406.png" alt=""></p><p>如何判断游戏的输赢，并且完成存盘和继续上一局的操作：</p><ul><li>棋盘  -&gt; 二维数组 -&gt; 稀疏数组 -&gt; 写入文件 【存档】</li><li>读取文件 -&gt; 稀疏数组 -&gt; 二维数组 -&gt;棋盘 【继续上一局】</li></ul></li><li><p>约瑟夫问题</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200408091446.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200408091501.png" alt=""></p><ul><li>思路：使用单向环形链表</li></ul></li><li><p>其他常见的算法问题</p><ul><li>修路问题：最小生成树(数据结构) + 普利姆算法</li><li>最短路径问题：图+弗洛伊德算法</li><li>汉诺塔：分支算法</li><li>八皇后问题：回溯法</li></ul></li></ol><h3 id="线性结构和非线性结构"><a href="#线性结构和非线性结构" class="headerlink" title="线性结构和非线性结构"></a>线性结构和非线性结构</h3><h4 id="线性结构"><a href="#线性结构" class="headerlink" title="线性结构"></a>线性结构</h4><ol><li>线性结构作为最常用的数据结构，其特点是数据元素之间存在一对一的线性关系</li><li>线性结构有两种不同的存储结构，即顺序存储结构和链式存储结构。顺序存储的线性表称为顺序表，顺序表中的存储元素是连续的</li><li>链式存储的线性表称为链表，链表中的存储元素不一定是连续的，元素节点中存放数据元素以及相邻元素的地址信息</li><li>线性结构常见的有：数组、队列、链表和栈，后面我们会详细讲解.</li></ol><h4 id="非线性结构"><a href="#非线性结构" class="headerlink" title="非线性结构"></a>非线性结构</h4><p>非线性结构包括：二维数组，多维数组，广义表，<strong>树结构</strong>，<strong>图结构</strong> </p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Yolov1算法举例</title>
      <link href="/2020/04/07/20200407-194135/"/>
      <url>/2020/04/07/20200407-194135/</url>
      
        <content type="html"><![CDATA[<h2 id="一个例子"><a href="#一个例子" class="headerlink" title="一个例子"></a><a href="https://medium.com/@jonathan_hui/real-time-object-detection-with-yolo-yolov2-28b1b93e2088" target="_blank" rel="noopener">一个例子</a></h2><p>Let’s start with our own testing image below. </p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200407194616.png" alt=""></p><p>The objects detected by YOLO: </p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200407194644.png" alt=""></p><h2 id="Grid-cell"><a href="#Grid-cell" class="headerlink" title="Grid cell"></a><strong>Grid cell</strong></h2><p>For our discussion, we crop our original photo. YOLO divides the input image into an <strong>S</strong>×<strong>S</strong> grid. Each grid cell predicts only <strong>one</strong> object. For example, the yellow grid cell below tries to predict the “person” object whose center (the blue dot) falls inside the grid cell. </p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200407193259.png" alt=""></p><p>Each grid cell predicts a fixed number of boundary boxes. In this example, the yellow grid cell makes two boundary box predictions (blue boxes) to locate where the person is. </p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200407193528.png" alt=""></p><p>However, the one-object rule limits how close detected objects can be. For that, YOLO does have some limitations on how close objects can be. For the picture below, there are 9 Santas in the lower left corner but YOLO can detect 5 only. </p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200407193635.png" alt=""></p><p>For each grid cell,</p><ul><li>it predicts <strong>B</strong> boundary boxes and each box has one <strong>box confidence score</strong>,</li><li>it detects <strong>one</strong> object only regardless of the number of boxes B,</li><li>it predicts <strong>C</strong> <strong>conditional class probabilities</strong> (one per class for the likeliness of the object class).</li></ul><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200407193739.png" alt=""></p><p>Let’s get into more details. Each boundary box contains 5 elements: (<em>x, y, w, h</em>) and a <strong>box confidence score</strong>. The confidence score reflects how likely the box contains an object (<strong>objectness</strong>) and how accurate is the boundary box. We normalize the bounding box width <em>w</em> and height <em>h</em> by the image width and height. <em>x</em> and <em>y</em> are offsets to the corresponding cell. Hence, <em>x, y, w</em> and <em>h</em> are all between 0 and 1. Each cell has 20 conditional class probabilities. The <strong>conditional class probability</strong> is the probability that the detected object belongs to a particular class (one probability per category for each cell). So, YOLO’s prediction has a shape of (S, S, B×5 + C) = (7, 7, 2×5 + 20) = (7, 7, 30). </p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200407194754.png" alt=""></p><p>The major concept of YOLO is to build a CNN network to predict a (7, 7, 30) tensor. It uses a CNN network to reduce the spatial dimension to 7×7 with 1024 output channels at each location. YOLO performs a linear regression using two fully connected layers to make 7×7×2 boundary box predictions (the middle picture below). To make a final prediction, we keep those with high box confidence scores (greater than 0.25) as our final predictions (the right picture). </p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200407194923.png" alt=""></p><p>The <strong>class confidence score</strong> for each prediction box is computed as: </p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200407194947.png" alt=""></p><p>It measures the confidence on both the classification and the <strong>localization</strong> (where an object is located). </p><p>We may mix up those scoring and probability terms easily. Here are the mathematical definitions for your future reference. </p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200407195044.png" alt=""></p><h2 id="Network-design"><a href="#Network-design" class="headerlink" title="Network design"></a><strong>Network design</strong></h2><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200407195248.png" alt=""></p><p>YOLO has 24 convolutional layers followed by 2 fully connected layers (FC). Some convolution layers use 1 × 1 reduction layers alternatively to reduce the depth of the features maps. For the last convolution layer, it outputs a tensor with shape (7, 7, 1024). The tensor is then flattened. Using 2 fully connected layers as a form of linear regression, it outputs 7×7×30 parameters and then reshapes to (7, 7, 30), i.e. 2 boundary box predictions per location.</p><p>A faster but less accurate version of YOLO, called Fast YOLO, uses only 9 convolutional layers with shallower feature maps.</p><h2 id="Loss-function"><a href="#Loss-function" class="headerlink" title="Loss function"></a><strong>Loss function</strong></h2><p>YOLO predicts multiple bounding boxes per grid cell. To compute the loss for the true positive, we only want one of them to be <strong>responsible</strong> for the object. For this purpose, we select the one with the highest IoU (intersection over union) with the ground truth. This strategy leads to specialization among the bounding box predictions. Each prediction gets better at predicting certain sizes and aspect ratios. </p><p>YOLO uses sum-squared error between the predictions and the ground truth to calculate loss. The loss function composes of:</p><ul><li>the <strong>classification loss</strong>.</li><li>the <strong>localization loss</strong> (errors between the predicted boundary box and the ground truth).</li><li>the <strong>confidence loss</strong> (the objectness of the box).</li></ul><h3 id="Classification-loss"><a href="#Classification-loss" class="headerlink" title="Classification loss"></a><strong>Classification loss</strong></h3><p>f <em>an object is detected</em>, the classification loss at each cell is the squared error of the class conditional probabilities for each class: </p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200407200151.png" alt=""></p><h3 id="Localization-loss"><a href="#Localization-loss" class="headerlink" title="Localization loss"></a><strong>Localization loss</strong></h3><p>The localization loss measures the errors in the predicted boundary box locations and sizes. We only count the box responsible for detecting the object.</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200407200232.png" alt=""></p><p>We do not want to weight absolute errors in large boxes and small boxes equally. i.e. a 2-pixel error in a large box is the same for a small box. To partially address this, YOLO predicts the square root of the bounding box width and height instead of the width and height. In addition, to put more emphasis on the boundary box accuracy, we multiply the loss by λ<em>coord</em> (default: 5). </p><h3 id="Confidence-loss"><a href="#Confidence-loss" class="headerlink" title="Confidence loss"></a><strong>Confidence loss</strong></h3><p>If <em>an object is detected in the box</em>, the confidence loss (measuring the objectness of the box) is:</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200407200331.png" alt=""></p><p>If <em>an object is not detected in the box</em>, the confidence loss is:</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200407200356.png" alt=""></p><p>Most boxes do not contain any objects. This causes a class imbalance problem, i.e. we train the model to detect background more frequently than detecting objects. To remedy this, we weight this loss down by a factor λ<em>noobj</em> (default: 0.5). </p><h3 id="Loss"><a href="#Loss" class="headerlink" title="Loss"></a><strong>Loss</strong></h3><p>The final loss adds localization, confidence and classification losses together.</p><p> <img src="https://gitee.com/homewyk/cloudimg/raw/master/20200407200518.png" alt=""></p><h3 id="Inference-Non-maximal-suppression"><a href="#Inference-Non-maximal-suppression" class="headerlink" title="Inference: Non-maximal suppression"></a>Inference: Non-maximal suppression</h3><p>YOLO can make duplicate detections for the same object. To fix this, YOLO applies non-maximal suppression to remove duplications with lower confidence. Non-maximal suppression adds 2- 3% in mAP. </p><p>Here is one of the possible non-maximal suppression implementation:</p><ol><li>Sort the predictions by the confidence scores.</li><li>Start from the top scores, ignore any current prediction if we find any previous predictions that have the same class and IoU &gt; 0.5 with the current prediction.</li><li>Repeat step 2 until all predictions are checked.</li></ol><h1 id="Benefits-of-YOLO"><a href="#Benefits-of-YOLO" class="headerlink" title="Benefits of YOLO"></a><strong>Benefits of YOLO</strong></h1><ul><li>Fast. Good for real-time processing.</li><li>Predictions (object locations and classes) are made from one single network. Can be trained end-to-end to improve accuracy.</li><li>YOLO is more generalized. It outperforms other methods when generalizing from natural images to other domains like artwork.</li></ul><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200407200655.png" alt=""></p><ul><li>Region proposal methods limit the classifier to the specific region. YOLO accesses to the whole image in predicting boundaries. With the additional context, YOLO demonstrates fewer false positives in background areas.</li><li>YOLO detects one object per grid cell. It enforces spatial diversity in making predictions.</li></ul>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Yolov1 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> 目标检测 </tag>
            
            <tag> 论文解读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01-数据结构Java版—导言</title>
      <link href="/2020/04/07/20200407-093105/"/>
      <url>/2020/04/07/20200407-093105/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/homewyk/cloudimg/raw/master/images.jpg" alt=""></p><h2 id="第一章：导言"><a href="#第一章：导言" class="headerlink" title="第一章：导言"></a>第一章：导言</h2><blockquote><p>跟着文档写一遍又如何！</p></blockquote><h3 id="内容介绍"><a href="#内容介绍" class="headerlink" title="内容介绍"></a>内容介绍</h3><h4 id="经典算法题目"><a href="#经典算法题目" class="headerlink" title="经典算法题目"></a>经典算法题目</h4><ol><li><p>字符串匹配的问题：</p><ol><li>有一个字符串： <code>str1 = &quot;qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM&quot;</code>,和一个子串：<code>str2 = &quot;yui&quot;</code></li><li>现在是要判断<code>str1</code>中是否包括<code>str2</code>,如果存在，就返回第一次出现的位置，否则返回-1</li><li>要求最快速度进行匹配</li><li>思路：<ul><li>暴力匹配[简单，但是效率低]</li><li>KMP算法[部分匹配表]</li></ul></li></ol></li><li><p>汉诺塔游戏：</p><ol><li><p>将某一个塔的圆盘原样的移到别的塔中，每次只能移动一次，只能大盘上放小盘</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200407105112.png" alt=""></p></li></ol></li><li><p>八皇后的问题：</p><p>八皇后问题，是一个古老的问题，是回溯苏算法的典型案例。在$8\times8$的国际棋盘上，摆放8个皇后，使其不能互相攻击</p><ul><li>不能处于同一行</li><li>不能在同一列</li><li>不能同一斜线</li></ul><p>有多少种写法？ $92$</p><ul><li><a href="http://www.17yy.com/f/play/141256.html" target="_blank" rel="noopener">游戏演示</a>值得一试！</li><li>思路：分治算法</li></ul><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200408091144.png" alt=""></p></li><li><p>马踏棋盘算法(骑士周游游戏):</p><ul><li><p>棋盘大小： $8\times8$</p></li><li><p>马走日字，每一个方格只能走一次，走遍棋盘上的全部64个方格</p></li><li><p><a href="http://www.4399.com/flash/146267_2.htm" target="_blank" rel="noopener">游戏演示</a>值得一试！</p></li><li><p>思路：图的深度优化遍历算法（DFS）+ 贪心算法的优化</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200407134428.png" alt=""></p></li></ul></li></ol><h3 id="数据结构和算法的重要性"><a href="#数据结构和算法的重要性" class="headerlink" title="数据结构和算法的重要性"></a>数据结构和算法的重要性</h3><ul><li><strong>算法是程序的灵魂</strong>，优秀的程序员在进行海量计算时，依然可以保持高速计算。</li><li>一般来讲，程序使用了内存计算框架（比如Spark）和缓存技术（比如Radis）来优化程序</li><li>如果不想成为代码工人，那就花时间来研究数据结构与算法</li></ul><h2 id="章节目录"><a href="#章节目录" class="headerlink" title="章节目录"></a>章节目录</h2><p><a href="待续">02-数据结构Java版-数据结构与算法概述</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Servlet-Filter</title>
      <link href="/2020/04/06/20200406-190747/"/>
      <url>/2020/04/06/20200406-190747/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/homewyk/cloudimg/raw/master/cover.png" alt=""></p><h2 id="过滤器Fliter"><a href="#过滤器Fliter" class="headerlink" title="过滤器Fliter"></a>过滤器Fliter</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul><li><p>运行在服务器端的程序，先于与之先关的servlet和jsp之前运行，当对客户端进行访问时，对请求进行过滤：</p><ul><li>符合条件的，放行</li><li>不符合条件的，不放行</li><li>并且可以对目标资源访问前后进行逻辑处理</li></ul><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200406210358.png" alt=""></p></li></ul><blockquote><p>刚开始不明白没什么，当快速入门以后，在针对不会的进行处理</p></blockquote><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ol><li>编写一个过滤器的类实现Filter接口<ul><li>规范都是通过接口实现的</li></ul></li><li>实现接口中尚未实现的方法(着重实现doFilter方法)</li><li>在web.xml中进行配置(主要是配置要对哪些目标资源进行过滤)</li></ol><h4 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h4><ol><li><p>先模仿一个目标资源：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>homwyk<span class="token punctuation">.</span>servlet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Servlet1</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span>            <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Servlet1 running...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Servlet1 running...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span>            <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>编写过滤器：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//和servletContext的生命周期一致</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"destroy...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest request<span class="token punctuation">,</span> ServletResponse response<span class="token punctuation">,</span> FilterChain chain<span class="token punctuation">)</span>            <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MyFilter running ...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//程序运行到这，就相当于一块封闭的门，访问不到任何资源</span>        <span class="token comment" spellcheck="true">//这一步就变成了筛子</span>        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>FilterConfig filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"init...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>在web.xml中进行配置</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>MyFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>com.homwyk.filter.MyFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>MyFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span></code></pre></li></ol><h3 id="Filter的访问流程"><a href="#Filter的访问流程" class="headerlink" title="Filter的访问流程"></a>Filter的访问流程</h3><ul><li>多个Filter 可以称之为：Filter链</li><li>有的目标资源不会被拦截</li></ul><p>图片和上面相符合！！</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200406194732.png" alt=""></p><h3 id="Filter可以做的事情"><a href="#Filter可以做的事情" class="headerlink" title="Filter可以做的事情"></a>Filter可以做的事情</h3><ol><li>在Filter中进行相关设置，目标资源可以获得<ul><li>公共代码的提取</li><li>对request和response进行增强<ul><li>继承</li><li>装饰者模式</li><li>动态代理</li></ul></li></ul></li><li>可以使用1来全局编码<ul><li>在第一个Filter中设置编码格式，后面的都可以使用</li></ul></li><li>权限管理：<ul><li>管理员能够访问全部资源</li><li>用户能够获得部分资源</li></ul></li></ol><h3 id="Filter的API介绍"><a href="#Filter的API介绍" class="headerlink" title="Filter的API介绍"></a>Filter的API介绍</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//和servletContext的生命周期一致</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 2. 关闭服务器的时候     * Filter 销毁时执行     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"destroy...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest request<span class="token punctuation">,</span> ServletResponse response<span class="token punctuation">,</span> FilterChain chain<span class="token punctuation">)</span>            <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MyFilter running ...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//程序运行到这，就相当于一块封闭的门，访问不到任何资源</span>        <span class="token comment" spellcheck="true">//这一步就变成了筛子</span>        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 1. 服务器启动的时候就启动了     * Filter创建时执行     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>FilterConfig filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"init...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="doFilter方法"><a href="#doFilter方法" class="headerlink" title="doFilter方法"></a>doFilter方法</h4><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200406205455.png" alt=""></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * request:内部封装的是客户端http请求的信息     * response：代表响应     * r上述两个参数可以进行强转     * chain:Filter链     * FileChain知道Filter的顺序     * Filter的执行顺序和xml的文件一致，和filr-mapping的顺序一致     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest request<span class="token punctuation">,</span> ServletResponse response<span class="token punctuation">,</span> FilterChain chain<span class="token punctuation">)</span>            <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MyFilter running ...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//程序运行到这，就相当于一块封闭的门，访问不到任何资源</span>        <span class="token comment" spellcheck="true">//这一步就变成了筛子</span>        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="Filter的生命周期"><a href="#Filter的生命周期" class="headerlink" title="Filter的生命周期"></a>Filter的生命周期</h3><ul><li>在服务器启动的时候创建</li><li>在服务器销毁的时候销毁</li><li>每次有请求时会调用<code>doFilter</code>方法</li></ul><h3 id="Filter的xml的配置"><a href="#Filter的xml的配置" class="headerlink" title="Filter的xml的配置"></a>Filter的xml的配置</h3><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>MyFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>com.homwyk.filter.MyFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>MyFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>servlet1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span></code></pre><p><code>url-pattern</code>的匹配方法：</p><ul><li>完全匹配 <code>/servlet1</code></li><li>文件名匹配 <code>/aaa/*</code></li><li>扩展名匹配 <code>*.jsp</code></li><li><strong>注意</strong>文件名匹配和扩展名匹配不能混用<code>/aa/*.jsp errrrrr</code></li></ul><p>注意：url-pattern可以使用servlet-name替代，也可以混用 </p><h4 id="dispatcher：访问的方式"><a href="#dispatcher：访问的方式" class="headerlink" title="dispatcher：访问的方式"></a>dispatcher：访问的方式</h4><p><code>REQUEST</code>:默认值，代表直接访问某个资源时执行filter </p><ul><li>转发不叫直接访问</li><li>重定向才叫直接访问</li></ul><p><code>FORWARD</code>:转发时才执行filter，转发的时候才执行 </p><p><code>INCLUDE</code>：包含资源时执行filter e</p><p><code>ERROR</code>：发生错误时 进行跳转是执行filter </p><h2 id="案例一：实现自动登录"><a href="#案例一：实现自动登录" class="headerlink" title="案例一：实现自动登录"></a>案例一：实现自动登录</h2><p>流程：</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200406213710.png" alt=""></p><p>步骤一： 实现基本的登录操作</p><p>web主要逻辑：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Login</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span>            <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        HttpSession session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1.获得网页端的参数</span>        String username <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String userpassword <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"userpassword"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Service service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Service</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            user <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span>userpassword<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>user <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//登录成功，将对象存在Session中</span>            session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//重定向，会修改浏览器中显示的地址,重定向到index.jsp</span>            response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//登录失败，向request域中存放错误信息</span>            request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"loginInfo"</span><span class="token punctuation">,</span> <span class="token string">"用户名或者密码错误!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//转发，不改变浏览器中显示的地址</span>            request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/login.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span>            <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>步骤二：实现自动登录</p><p>web:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Login</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span>            <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        HttpSession session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1.获得网页端的参数</span>        String username <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String userpassword <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"userpassword"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2. 是否自动登录</span>        String autoLogin <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"autoLogin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Service service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Service</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            user <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span>userpassword<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>user <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//自动登录的实现</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>autoLogin <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Cookie cookie_username <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Cookie cookie_userpassword <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"userpassword"</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getUserpassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//设置持久化时间</span>                cookie_username<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                cookie_userpassword<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//设置cookie的携带路径</span>                cookie_username<span class="token punctuation">.</span><span class="token function">setPath</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                cookie_userpassword<span class="token punctuation">.</span><span class="token function">setPath</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//发送cookie</span>                response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie_username<span class="token punctuation">)</span><span class="token punctuation">;</span>                response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie_userpassword<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//登录成功，将对象存在Session中</span>            session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//重定向，会修改浏览器中显示的地址,重定向到index.jsp</span>            response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//登录失败，向request域中存放错误信息</span>            request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"loginInfo"</span><span class="token punctuation">,</span> <span class="token string">"用户名或者密码错误!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//转发，不改变浏览器中显示的地址</span>            request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/login.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span>            <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>filter:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AutoLogin</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest request<span class="token punctuation">,</span> ServletResponse response<span class="token punctuation">,</span> FilterChain chain<span class="token punctuation">)</span>            <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//接收request请求中的cookie</span>        HttpServletRequest req <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletRequest<span class="token punctuation">)</span> request<span class="token punctuation">;</span>        HttpServletResponse res <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletResponse<span class="token punctuation">)</span> response<span class="token punctuation">;</span>        HttpSession session <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String cookie_username <span class="token operator">=</span> null<span class="token punctuation">;</span>        String cookie_userpassword <span class="token operator">=</span> null<span class="token punctuation">;</span>        Cookie<span class="token punctuation">[</span><span class="token punctuation">]</span> cookies <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>Cookie cookie <span class="token operator">:</span> cookies<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>cookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                cookie_username <span class="token operator">=</span> cookie<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"userpassword"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>cookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                cookie_userpassword <span class="token operator">=</span> cookie<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cookie_username <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> cookie_userpassword <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Service service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Service</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            User user <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                user <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>cookie_username<span class="token punctuation">,</span>cookie_userpassword<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//放行</span>        <span class="token comment" spellcheck="true">//是否自动登录都会经过这个filter</span>        <span class="token comment" spellcheck="true">// 非自动登录时，上面的全部都不执行，直接到Login中进行登录</span>        <span class="token comment" spellcheck="true">// 自动登录时，直接在这个filter中进行了登录与重定向的工作</span>        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>FilterConfig filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>出现的问题：</p><ul><li>cookie 不能存储中文</li><li>全局中文<ul><li>post</li><li>get</li></ul></li></ul><h2 id="案例二：实现全局编码"><a href="#案例二：实现全局编码" class="headerlink" title="案例二：实现全局编码"></a>案例二：实现全局编码</h2><p>解决cookie不能存储中文的问题：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//编码，变为%24%xx的格式</span>String username_code <span class="token operator">=</span> URLEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//解码</span>cookie_username <span class="token operator">=</span> URLDecoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>cookie<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>解决全局中文的问题：</p><p>使用装饰者模式</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>homewyk<span class="token punctuation">.</span>filter<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>UnsupportedEncodingException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>Filter<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>FilterChain<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>FilterConfig<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequestWrapper<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Encoding</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest request<span class="token punctuation">,</span> ServletResponse response<span class="token punctuation">,</span> FilterChain chain<span class="token punctuation">)</span>            <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//在传递request之前对request的getParameter方法进行增强</span>        <span class="token comment" spellcheck="true">/*         * 装饰者模式(包装)         *          * 1、增强类与被增强的类要实现统一接口         * 2、在增强类中传入被增强的类         * 3、需要增强的方法重写 不需要增强的方法调用被增强对象的         *          */</span>        HttpServletRequest req <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletRequest<span class="token punctuation">)</span>request<span class="token punctuation">;</span>        EnchanceEncoding enreq  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EnchanceEncoding</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>enreq<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>FilterConfig filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">EnchanceEncoding</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServletRequestWrapper</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> HttpServletRequest req<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">EnchanceEncoding</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>req <span class="token operator">=</span> req<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getParameter</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String paramter <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            paramter <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>paramter<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"iso8859-1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnsupportedEncodingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> paramter<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> Servlet </tag>
            
            <tag> Filter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>YOLOV参考资料集合</title>
      <link href="/2020/04/06/20200406-165623/"/>
      <url>/2020/04/06/20200406-165623/</url>
      
        <content type="html"><![CDATA[<h2 id="YOLO的参考资料"><a href="#YOLO的参考资料" class="headerlink" title="YOLO的参考资料"></a>YOLO的参考资料</h2><p><a href="https://www.youtube.com/watch?v=xo_iUBjz0F4&t=177s" target="_blank" rel="noopener">[Meetup5_2019] YOLOv2 - 陳穗碧(Mora chen) youtube</a></p><p><a href="https://www.bilibili.com/video/bv1q64y1u7m1" target="_blank" rel="noopener">Meetup5_2019YOLOv2 - 陳穗碧(Mora chen) bilibili</a></p><p><a href="https://www.slideshare.net/morachen1/yolo-v2-aitech20190421/6" target="_blank" rel="noopener">Meetup5_2019YOLOv2 - 陳穗碧Mora chen PPT</a></p><p><a href="https://www.facebook.com/groups/313379262604754/search/?query=yolov2&epa=SEARCH_BOX" target="_blank" rel="noopener">AI Teach facebook</a></p><p><a href="https://hackmd.io/@7WeiUEuJSBKp7WCRouAWVg/SkoFD8oL4/%2Fs%2FH1H9FUsIV?type=book" target="_blank" rel="noopener">AI Tech 社群資訊平台</a></p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> 目标检测 </tag>
            
            <tag> YOLO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>YOLOV2论文中文版本</title>
      <link href="/2020/04/06/20200406-144916/"/>
      <url>/2020/04/06/20200406-144916/</url>
      
        <content type="html"><![CDATA[<h2 id="YOLO9000-Better-Faster-Stronger"><a href="#YOLO9000-Better-Faster-Stronger" class="headerlink" title="YOLO9000: Better, Faster, Stronger"></a>YOLO9000: Better, Faster, Stronger</h2><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>&nbsp;&nbsp;&nbsp;&nbsp; 我们引入了一个先进的实时目标检测系统YOLO9000，可以检测超过9000个目标类别。首先，我们提出了对YOLO检测方法的各种改进，既有新颖性，也有前期的工作。改进后的模型YOLOv2在PASCAL VOC和COCO等标准检测任务上是最先进的。使用一种新颖的，多尺度训练方法，同样的YOLOv2模型可以以不同的尺寸运行，从而在速度和准确性之间提供了一个简单的折衷。在67FPS时，YOLOv2在VOC 2007上获得了76.8 mAP。在40FPS时，YOLOv2获得了78.6 mAP，比使用ResNet的Faster R-CNN和SSD等先进方法表现更出色，同时仍然运行速度显著更快。最后我们提出了一种联合训练目标检测与分类的方法。使用这种方法，我们在COCO检测数据集和ImageNet分类数据集上同时训练YOLO9000。我们的联合训练允许YOLO9000预测未标注的检测数据目标类别的检测结果。我们在ImageNet检测任务上验证了我们的方法。YOLO9000在ImageNet检测验证集上获得19.7 mAP，尽管200个类别中只有44个具有检测数据。在没有COCO的156个类别上，YOLO9000获得16.0 mAP。但YOLO可以检测到200多个类别；它预测超过9000个不同目标类别的检测结果。并且它仍然能实时运行。</p><h2 id="1-引言"><a href="#1-引言" class="headerlink" title="1. 引言"></a>1. 引言</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;通用目的的目标检测应该快速，准确，并且能够识别各种各样的目标。自从引入神经网络以来，检测框架变得越来越快速和准确。但是，大多数检测方法仍然受限于一小部分目标。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;把与分类和标记等其他任务的数据集相比，目前目标检测数据集是有限的。最常见的检测数据集包含成千上万到数十万张具有成百上千个标签的图像[3][10][2]。分类数据集有数以百万计的图像，数十或数十万个类别[20][2]。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;我们希望检测能够扩展到目标分类的级别。但是，标注检测图像要比标注分类或贴标签要昂贵得多（标签通常是用户免费提供的）。因此，我们不太可能在近期内看到与分类数据集相同规模的检测数据集。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;我们提出了一种新的方法来利用我们已经拥有的大量分类数据，并用它来扩大当前检测系统的范围。我们的方法使用目标分类的分层视图，允许我们将不同的数据集组合在一起。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;我们还提出了一种联合训练算法，使我们能够在检测和分类数据上训练目标检测器。我们的方法利用标记的检测图像来学习精确定位物体，同时使用分类图像来增加词表和鲁棒性。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;使用这种方法我们训练YOLO9000，一个实时的目标检测器，可以检测超过9000种不同的目标类别。首先，我们改进YOLO基础检测系统，产生最先进的实时检测器YOLOv2。然后利用我们的数据集组合方法和联合训练算法对来自ImageNet的9000多个类别以及COCO的检测数据训练了一个模型。</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/3232548-d55daf8a11cf7f5d.jpg" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;<strong>图1：YOLO9000</strong>。YOLO9000可以实时检测许多目标类别。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;我们的所有代码和预训练模型都可在线获得：<a href="http://pjreddie.com/yolo9000/" target="_blank" rel="noopener">http://pjreddie.com/yolo9000/</a>。</p><h2 id="2-更好"><a href="#2-更好" class="headerlink" title="2. 更好"></a>2. 更好</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;与最先进的检测系统相比，YOLO有许多缺点。YOLO与Fast R-CNN相比的误差分析表明，YOLO造成了大量的定位误差。此外，与基于区域提出的方法相比，YOLO召回率相对较低。因此，我们主要侧重于提高召回率和改进定位，同时保持分类准确性。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;计算机视觉一般趋向于更大，更深的网络[6][18][17]。更好的性能通常取决于训练更大的网络或将多个模型组合在一起。但是，在YOLOv2中，我们需要一个更精确的检测器，它仍然很快。我们不是扩大我们的网络，而是简化网络，然后让表示更容易学习。我们将过去的工作与我们自己的新概念汇集起来，以提高YOLO的性能。表2列出了结果总结。</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200406151850.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;<strong>表2：从YOLO到YOLOv2的路径</strong>。列出的大部分设计决定都会导致mAP的显著增加。有两个例外是切换到具有锚盒的一个全卷积网络和使用新网络。切换到锚盒风格的方法增加了召回，而不改变mAP，而使用新网络会削减33%的计算量。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<strong>批标准化</strong>。批标准化导致收敛性的显著改善，同时消除了对其他形式正则化的需求[7]。通过在YOLO的所有卷积层上添加批标准化，我们在mAP中获得了超过2%的改进。批标准化也有助于模型正则化。通过批标准化，我们可以从模型中删除丢弃而不会过拟合。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<strong>高分辨率分类器</strong>。所有最先进的检测方法都使用在ImageNet[16]上预训练的分类器。从AlexNet开始，大多数分类器对小于256×256[8]的输入图像进行操作。原来的YOLO以224×224的分辨率训练分类器网络，并将分辨率提高到448进行检测。这意味着网络必须同时切换到学习目标检测和调整到新的输入分辨率。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;对于YOLOv2，我们首先ImageNet上以448×448的分辨率对分类网络进行10个迭代周期的微调。这给了网络时间来调整其滤波器以便更好地处理更高分辨率的输入。然后，我们在检测上微调得到的网络。这个高分辨率分类网络使我们增加了近4%的mAP。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<strong>具有锚盒的卷积</strong>。YOLO直接使用卷积特征提取器顶部的全连接层来预测边界框的坐标。Faster R-CNN使用手动选择的先验来预测边界框而不是直接预测坐标[15]。Faster R-CNN中的区域提出网络（RPN）仅使用卷积层来预测锚盒的偏移和置信度。由于预测层是卷积的，所以RPN在特征映射的每个位置上预测这些偏移。预测偏移而不是坐标简化了问题，并且使网络更容易学习。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;我们从YOLO中移除全连接层，并使用锚盒来预测边界框。首先，我们消除了一个池化层，使网络卷积层输出具有更高的分辨率。我们还缩小了网络，操作416×416的输入图像而不是448×448。我们这样做是因为我们要在我们的特征映射中有奇数个位置，所以只有一个中心单元。目标，特别是大目标，往往占据图像的中心，所以在中心有一个单独的位置来预测这些目标，而不是四个都在附近的位置是很好的。YOLO的卷积层将图像下采样32倍，所以通过使用416的输入图像，我们得到了13×13的输出特征映射。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;当我们移动到锚盒时，我们也将类预测机制与空间位置分离，预测每个锚盒的类别和目标。在YOLO之后，目标预测仍然预测了实际值和提出的边界框的IOU，并且类别预测预测了当存在目标时该类别的条件概率。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;使用锚盒，我们在精度上得到了一个小下降。YOLO每张图像只预测98个边界框，但是使用锚盒我们的模型预测超过一千。如果没有锚盒，我们的中间模型将获得69.5的mAP，召回率为81%。具有锚盒我们的模型得到了69.2 mAP，召回率为88%。尽管mAP下降，但召回率的上升意味着我们的模型有更大的提升空间。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<strong>维度聚类</strong>。当锚盒与YOLO一起使用时，我们遇到了两个问题。首先是边界框尺寸是手工挑选的。网络可以学习适当调整边界框，但如果我们为网络选择更好的先验，我们可以使网络更容易学习它以便预测好的检测。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;我们不用手工选择先验，而是在训练集边界框上运行k-means聚类，自动找到好的先验。如果我们使用具有欧几里得距离的标准k-means，那么较大的边界框比较小的边界框产生更多的误差。然而，我们真正想要的是导致好的IOU分数的先验，这是独立于边界框大小的。因此，对于我们的距离度量，我们使用：</p><p>$$d(box,centroid)=1−IOU(box,centroid)$$</p><p>&nbsp;&nbsp;&nbsp;&nbsp;我们运行各种k值的k-means，并画出平均IOU与最接近的几何中心，见图2。我们选择k=5作为模型复杂性和高召回率之间的良好折衷。聚类中心与手工挑选的锚盒明显不同。有更短更宽的边界框和更高更细的边界框。 </p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200406152406.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;<strong>图2：VOC和COCO的聚类边界框尺寸</strong>。我们对边界框的维度进行k-means聚类，以获得我们模型的良好先验。左图显示了我们通过对k的各种选择得到的平均IOU。我们发现k=5给出了一个很好的召回率与模型复杂度的权衡。右图显示了VOC和COCO的相对中心。这两种先验都赞成更薄更高的边界框，而COCO比VOC在尺寸上有更大的变化。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;在表1中我们将平均IOU与我们聚类策略中最接近的先验以及手工选取的锚盒进行了比较。仅有5个先验中心的平均IOU为61.0，其性能类似于9个锚盒的60.9。如果我们使用9个中心，我们会看到更高的平均IOU。这表明使用k-means来生成我们的边界框会以更好的表示开始训练模型，并使得任务更容易学习。</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200408230156.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;<strong>表1：VOC 2007上最接近先验的边界框平均IOU</strong>。VOC 2007上目标的平均IOU与其最接近的，使用不同生成方法之前未经修改的平均值。聚类结果比使用手工选择的先验结果要更好。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<strong>直接位置预测</strong>。当YOLO使用锚盒时，我们会遇到第二个问题：模型不稳定，特别是在早期的迭代过程中。大部分的不稳定来自预测边界框的(x,y)位置。在区域提出网络中，网络预测值$t_{x}$ 和$t_{y}$，(x,y)中心坐标计算如下：<br>$$<br>x = (t_x <em> w_a) -x_a  \\ y = (t_y </em> h_a) - y_a<br>$$<br>&nbsp;&nbsp;&nbsp;&nbsp;这个公式是不受限制的，所以任何锚盒都可以在图像任一点结束，而不管在哪个位置预测该边界框。随机初始化模型需要很长时间才能稳定以预测合理的偏移量。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;我们没有预测偏移量，而是按照YOLO的方法预测相对于网格单元位置的位置坐标。这限制了落到0和1之间的真实值。我们使用逻辑激活来限制网络的预测落在这个范围内。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;网络预测输出特征映射中每个单元的5个边界框。网络预测每个边界框的5个坐标，$t_x$，$t_y$，$t_w$，$t_h$和$t_o$。如果单元从图像的左上角偏移了( $c_x$ , $c_y$ )，并且边界框先验的宽度和高度为$p_w$，$p_h$，那么预测对应：<br>$$<br>b_x=σ(t_x)+c_x \\ b_y=σ(t_y)+c_y \\ b_w=p_we^{tw} \\ b_h=p_he^{th} \\P_r(object)∗IOU(b,object)=σ(t_o)<br>$$</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200406153122.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp; <strong>图3：具有维度先验和位置预测的边界框</strong>。我们预测边界框的宽度和高度作为聚类中心的偏移量。我们使用sigmoid函数预测边界框相对于滤波器应用位置的中心坐标。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;由于我们限制位置预测参数化更容易学习，使网络更稳定。使用维度聚类以及直接预测边界框中心位置的方式比使用锚盒的版本将YOLO提高了近5%5%。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<strong>细粒度功能</strong>。这个修改后的YOLO在13×13特征映射上预测检测结果。虽然这对于大型目标来说已经足够了，但它可以从用于定位较小目标的更细粒度的特征中受益。Faster R-CNN和SSD都在网络的各种特征映射上运行他们提出的网络，以获得一系列的分辨率。我们采用不同的方法，仅仅添加一个通道层，从26x26分辨率的更早层中提取特征。</p><p> &nbsp;&nbsp;&nbsp;&nbsp;<strong>多尺度训练</strong>。原来的YOLO使用448×448的输入分辨率。通过添加锚盒，我们将分辨率更改为416×416。但是，由于我们的模型只使用卷积层和池化层，因此它可以实时调整大小。我们希望YOLOv2能够鲁棒的运行在不同大小的图像上，因此我们可以将其训练到模型中。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;我们没有固定的输入图像大小，每隔几次迭代就改变网络。每隔10个批次我们的网络会随机选择一个新的图像尺寸大小。由于我们的模型缩减了32倍，我们从下面的32的倍数中选择：{320,352，…，608}。因此最小的选项是320×320，最大的是608×608。我们调整网络的尺寸并继续训练。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;这个制度迫使网络学习如何在各种输入维度上做好预测。这意味着相同的网络可以预测不同分辨率下的检测结果。在更小尺寸上网络运行速度更快，因此YOLOv2在速度和准确性之间提供了一个简单的折衷。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;在低分辨率YOLOv2作为一个便宜，相当准确的检测器。在288×288时，其运行速度超过90FPS，mAP与Fast R-CNN差不多。这使其成为小型GPU，高帧率视频或多视频流的理想选择。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;在高分辨率下，YOLOv2是VOC 2007上最先进的检测器，达到了78.6 mAP，同时仍保持运行在实时速度之上。请参阅表3，了解YOLOv2与VOC 2007其他框架的比较。图4</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200406153225.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;<strong>表3：PASCAL VOC 2007的检测框架</strong>。YOLOv2比先前的检测方法更快，更准确。它也可以以不同的分辨率运行，以便在速度和准确性之间进行简单折衷。每个YOLOv2条目实际上是具有相同权重的相同训练模型，只是以不同的大小进行评估。所有的时间信息都是在Geforce GTX Titan X（原始的，而不是Pascal模型）上测得的。</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200406153258.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;<strong>图4：VOC 2007上的准确性与速度。</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;<strong>进一步实验</strong>。我们在VOC 2012上训练YOLOv2进行检测。表4显示了YOLOv2与其他最先进的检测系统的比较性能。YOLOv2取得了73.4 mAP同时运行速度比竞争方法快的多。我们在COCO上进行了训练，并在表5中与其他方法进行比较。在VOC度量（IOU = 0.5）上，YOLOv2得到44.0 mAP，与SSD和Faster R-CNN相当。</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200406153334.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;<strong>表4：PASCAL VOC2012 test上的检测结果</strong>。YOLOv2与最先进的检测器如具有ResNet的Faster R-CNN、SSD512在标准数据集上运行，YOLOv2比它们快2-10倍。</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200406153354.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;<strong>表5：在COCO test-dev2015上的结果。表参考[11]</strong></p><h2 id="3-更快"><a href="#3-更快" class="headerlink" title="3. 更快"></a>3. 更快</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;我们希望检测是准确的，但我们也希望它快速。大多数检测应用（如机器人或自动驾驶机车）依赖于低延迟预测。为了最大限度提高性能，我们从头开始设计YOLOv2。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;大多数检测框架依赖于VGG-16作为的基本特征提取器[17]。VGG-16是一个强大的，准确的分类网络，但它是不必要的复杂。在单张图像224×224分辨率的情况下VGG-16的卷积层运行一次传递需要306.90亿次浮点运算。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;YOLO框架使用基于Googlenet架构[19]的自定义网络。这个网络比VGG-16更快，一次前馈传播只有85.2亿次的操作。然而，它的准确性比VGG-16略差。在ImageNet上，对于单张裁剪图像，224×224分辨率下的<code>top-5</code>准确率，YOLO的自定义模型获得了88.0%88.0%，而VGG-16则为90.0%90.0%。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<strong>Darknet-19</strong>。我们提出了一个新的分类模型作为YOLOv2的基础。我们的模型建立在网络设计先前工作以及该领域常识的基础上。与VGG模型类似，我们大多使用3×3滤波器，并在每个池化步骤之后使通道数量加倍[17]。按照Network in Network（NIN）的工作，我们使用全局平均池化做预测以及1×1滤波器来压缩3×3卷积之间的特征表示[9]。我们使用批标准化来稳定训练，加速收敛，并正则化模型[7]。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;我们的最终模型叫做Darknet-19，它有19个卷积层和5个最大池化层。完整描述请看表6。Darknet-19只需要55.8亿次运算来处理图像，但在ImageNet上却达到了72.9%72.9%的<code>top-1</code>准确率和91.2%91.2%的<code>top-5</code>准确率。</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/3232548-a2e2ce952c7cbc46.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;<strong>表6：Darknet-19。</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;如上所述，在我们对224×224的图像进行初始训练之后，我们对网络在更大的尺寸448上进行了微调。对于这种微调，我们使用上述参数进行训练，但是只有10个迭代周期，并且以$10^{−3}$的学习率开始。在这种更高的分辨率下，我们的网络达到了76.5%的<code>top-1</code>准确率和93.3%的<code>top-5</code>准确率。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<strong>检测训练</strong>。我们修改这个网络进行检测，删除了最后一个卷积层，加上了三个具有1024个滤波器的3×3卷积层，其后是最后的1×1卷积层与我们检测需要的输出数量。对于VOC，我们预测5个边界框，每个边界框有5个坐标和20个类别，所以有125个滤波器。我们还添加了从最后的3×3×512层到倒数第二层卷积层的直通层，以便我们的模型可以使用细粒度特征。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;我们训练网络160个迭代周期，初始学习率为$10^{−3}$，在60个和90个迭代周期时将学习率除以10。我们使用0.0005的权重衰减和0.9的动量。我们对YOLO和SSD进行类似的数据增强，随机裁剪，色彩偏移等。我们对COCO和VOC使用相同的训练策略。</p><h2 id="4-更强"><a href="#4-更强" class="headerlink" title="4. 更强"></a>4. 更强</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;我们提出了一个联合训练分类和检测数据的机制。我们的方法使用标记为检测的图像来学习边界框坐标预测和目标之类的特定检测信息以及如何对常见目标进行分类。它使用仅具有类别标签的图像来扩展可检测类别的数量。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;在训练期间，我们混合来自检测和分类数据集的图像。当我们的网络看到标记为检测的图像时，我们可以基于完整的YOLOv2损失函数进行反向传播。当它看到一个分类图像时，我们只能从该架构的分类特定部分反向传播损失。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;这种方法提出了一些挑战。检测数据集只有通用目标和通用标签，如“狗”或“船”。分类数据集具有更广更深的标签范围。ImageNet有超过一百种品种的狗，包括<code>Norfolk terrier</code>，<code>Yorkshire terrier</code>和<code>Bedlington terrier</code>。如果我们想在两个数据集上训练，我们需要一个连贯的方式来合并这些标签。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;大多数分类方法使用跨所有可能类别的softmax层来计算最终的概率分布。使用softmax假定这些类是相互排斥的。这给数据集的组合带来了问题，例如你不想用这个模型来组合ImageNet和COCO，因为类<code>Norfolk terrier</code>和<code>dog</code>不是相互排斥的。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;我们可以改为使用多标签模型来组合不假定互斥的数据集。这种方法忽略了我们已知的关于数据的所有结构，例如，所有的COCO类是互斥的。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<strong>分层分类</strong>。ImageNet标签是从WordNet中提取的，这是一个构建概念及其相互关系的语言数据库[12]。在WordNet中，<code>Norfolk terrier</code>和<code>Yorkshire terrier</code>都是<code>terrier</code>的下义词，<code>terrier</code>是一种<code>hunting dog</code>，<code>hunting dog</code>是<code>dog</code>，<code>dog</code>是<code>canine</code>等。分类的大多数方法为标签假设一个扁平结构，但是对于组合数据集，结构正是我们所需要的。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;WordNet的结构是有向图，而不是树，因为语言是复杂的。例如，<code>dog</code>既是一种<code>canine</code>，也是一种<code>domestic animal</code>，它们都是WordNet中的同义词。我们不是使用完整的图结构，而是通过从ImageNet的概念中构建分层树来简化问题。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;为了构建这棵树，我们检查了ImageNet中的视觉名词，并查看它们通过WordNet图到根节点的路径，在这种情况下是“物理对象”。许多同义词通过图只有一条路径，所以首先我们将所有这些路径添加到我们的树中。然后我们反复检查我们留下的概念，并尽可能少地添加生长树的路径。所以如果一个概念有两条路径到一个根，一条路径会给我们的树增加三条边，另一条只增加一条边，我们选择更短的路径。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;最终的结果是WordTree，一个视觉概念的分层模型。为了使用WordTree进行分类，我们预测每个节点的条件概率，以得到同义词集合中每个同义词下义词的概率。例如，在<code>terrier</code>节点我们预测：<br>$$<br>Pr(Norfolk terrier|terrier) \\\<br>Pr(Yorkshire terrier|terrier) \\\<br>Pr(Bedlington terrier|terrier) \\\<br>…<br>$$<br>&nbsp;&nbsp;&nbsp;&nbsp;如果我们想要计算一个特定节点的绝对概率，我们只需沿着通过树到达根节点的路径，再乘以条件概率。所以如果我们想知道一张图片是否是<code>Norfolk terrier</code>，我们计算：<br>$$<br>Pr(Norfolk terrier)=Pr(Norfolk terrier|terrier) \\\<br>∗Pr(terrier|hunting dog) \\ \<br>∗…∗\\\<br>∗Pr(mammal|Pr(animal)\\\<br>∗Pr(animal|physical object)\\\<br>$$<br>&nbsp;&nbsp;&nbsp;&nbsp;为了分类目的，我们假定图像包含一个目标：$Pr(physical object)=1$</p><p>&nbsp;&nbsp;&nbsp;&nbsp;为了验证这种方法，我们在使用1000类ImageNet构建的WordTree上训练Darknet-19模型。为了构建WordTree1k，我们添加了所有将标签空间从1000扩展到1369的中间节点。在训练过程中，我们将真实标签向树上面传播，以便如果图像被标记为<code>Norfolk terrier</code>，则它也被标记为<code>dog</code>和<code>mammal</code>等。为了计算条件概率，我们的模型预测了具有1369个值的向量，并且我们计算了相同概念的下义词在所有同义词集上的softmax，见图5。</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200406154053.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;<strong>图5：在ImageNet与WordTree上的预测</strong>。大多数ImageNet模型使用一个较大的softmax来预测概率分布。使用WordTree，我们可以在共同的下义词上执行多次softmax操作。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;使用与以前相同的训练参数，我们的分级Darknet-19达到71.9%的<code>top-1</code>准确率和90.4%的<code>top-5</code>准确率。尽管增加了369个额外的概念，而且我们的网络预测了一个树状结构，但我们的准确率仅下降了一点点。以这种方式进行分类也有一些好处。在新的或未知的目标类别上性能会优雅地降低。例如，如果网络看到一只狗的照片，但不确定它是什么类型的狗，它仍然会高度自信地预测“狗”，但是在下义位扩展之间有更低的置信度。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;这个构想也适用于检测。现在，我们不是假定每张图像都有一个目标，而是使用YOLOv2的目标预测器给我们Pr(physical object)Pr(physical object)的值。检测器预测边界框和概率树。我们遍历树，在每个分割中采用最高的置信度路径，直到达到某个阈值，然后我们预测目标类。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<strong>联合分类和检测</strong>。现在我们可以使用WordTree组合数据集，我们可以在分类和检测上训练联合模型。我们想要训练一个非常大规模的检测器，所以我们使用COCO检测数据集和完整的ImageNet版本中的前9000个类来创建我们的组合数据集。我们还需要评估我们的方法，以便从ImageNet检测挑战中添加任何尚未包含的类。该数据集的相应WordTree有9418个类别。ImageNet是一个更大的数据集，所以我们通过对COCO进行过采样来平衡数据集，使得ImageNet仅仅大于4:1的比例。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;使用这种联合训练，YOLO9000学习使用COCO中的检测数据来查找图像中的目标，并学习使用来自ImageNet的数据对各种目标进行分类。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;我们在ImageNet检测任务上评估YOLO9000。ImageNet的检测任务与COCO共享44个目标类别，这意味着YOLO9000只能看到大多数测试图像的分类数据，而不是检测数据。YOLO9000在从未见过任何标记的检测数据的情况下，整体上获得了19.7 mAP，在不相交的156个目标类别中获得了16.0 mAP。这个mAP高于DPM的结果，但是YOLO9000在不同的数据集上训练，只有部分监督[4]。它也同时检测9000个其他目标类别，所有的都是实时的。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;当我们分析YOLO9000在ImageNet上的表现时，我们发现它很好地学习了新的动物种类，但是却在像服装和设备这样的学习类别中挣扎。新动物更容易学习，因为目标预测可以从COCO中的动物泛化的很好。相反，COCO没有任何类型的衣服的边界框标签，只针对人，因此YOLO9000正在努力建模“墨镜”或“泳裤”等类别。</p><h2 id="5-结论"><a href="#5-结论" class="headerlink" title="5. 结论"></a>5. 结论</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;我们介绍了YOLOv2和YOLO9000，两个实时检测系统。YOLOv2在各种检测数据集上都是最先进的，也比其他检测系统更快。此外，它可以运行在各种图像大小，以提供速度和准确性之间的平滑折衷。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;YOLO9000是一个通过联合优化检测和分类来检测9000多个目标类别的实时框架。我们使用WordTree将各种来源的数据和我们的联合优化技术相结合，在ImageNet和COCO上同时进行训练。YOLO9000是在检测和分类之间缩小数据集大小差距的重要一步。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;我们的许多技术都可以泛化到目标检测之外。我们对ImageNet的WordTree表示为图像分类提供了更丰富，更详细的输出空间。使用分层分类的数据集组合在分类和分割领域将是有用的。像多尺度训练这样的训练技术可以为各种视觉任务提供益处。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;对于未来的工作，我们希望使用类似的技术来进行弱监督的图像分割。我们还计划使用更强大的匹配策略来改善我们的检测结果，以在训练期间将弱标签分配给分类数据。计算机视觉受到大量标记数据的祝福。我们将继续寻找方法，将不同来源和数据结构的数据整合起来，形成更强大的视觉世界模型。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>[1] S. Bell, C. L. Zitnick, K. Bala, and R. Girshick. Inside-outside net: Detecting objects in context with skip pooling and recurrent neural networks. arXiv preprint arXiv:1512.04143, 2015. 6</p><p>[2] J. Deng, W. Dong, R. Socher, L.-J. Li, K. Li, and L. Fei- Fei. Imagenet: A large-scale hierarchical image database. In Computer Vision and Pattern Recognition, 2009. CVPR 2009. IEEE Conference on, pages 248–255. IEEE, 2009. 1</p><p>[3] M. Everingham, L. Van Gool, C. K. Williams, J. Winn, and A. Zisserman. The pascal visual object classes (voc) challenge. International journal of computer vision, 88(2):303– 338, 2010. 1</p><p>[4] P. F. Felzenszwalb, R. B. Girshick, and D. McAllester. Discriminatively trained deformable part models, release 4. <a href="http://people.cs.uchicago.edu/pff/latent-release4/" target="_blank" rel="noopener">http://people.cs.uchicago.edu/pff/latent-release4/</a>. 8</p><p>[5] R. B. Girshick. Fast R-CNN. CoRR, abs/1504.08083, 2015. 4, 5, 6</p><p>[6] K. He, X. Zhang, S. Ren, and J. Sun. Deep residual learning for image recognition. arXiv preprint arXiv:1512.03385, 2015. 2, 4, 5</p><p>[7] S. Ioffe and C. Szegedy. Batch normalization: Accelerating deep network training by reducing internal covariate shift. arXiv preprint arXiv:1502.03167, 2015. 2, 5</p><p>[8] A. Krizhevsky, I. Sutskever, and G. E. Hinton. Imagenet classification with deep convolutional neural networks. In Advances in neural information processing systems, pages 1097–1105, 2012. 2</p><p>[9] M. Lin, Q. Chen, and S. Yan. Network in network. arXiv preprint arXiv:1312.4400, 2013. 5</p><p>[10] T.-Y. Lin, M. Maire, S. Belongie, J. Hays, P. Perona, D. Ramanan, P. Dollar, and C. L. Zitnick. Microsoft coco: Common objects in context. In European Conference on Computer Vision, pages 740–755. Springer, 2014. 1, 6</p><p>[11] W. Liu, D. Anguelov, D. Erhan, C. Szegedy, and S. E. Reed. SSD: single shot multibox detector. CoRR, abs/1512.02325, 2015. 4, 5, 6</p><p>[12] G. A. Miller, R. Beckwith, C. Fellbaum, D. Gross, and K. J. Miller. Introduction to wordnet: An on-line lexical database. International journal of lexicography, 3(4):235–244, 1990. 6</p><p>[13] J. Redmon. Darknet: Open source neural networks in c. <a href="http://pjreddie.com/darknet/" target="_blank" rel="noopener">http://pjreddie.com/darknet/</a>, 2013–2016. 5</p><p>[14] J. Redmon, S. Divvala, R. Girshick, and A. Farhadi. You only look once: Unified, real-time object detection. arXiv preprint arXiv:1506.02640, 2015. 4, 5</p><p>[15] S. Ren, K. He, R. Girshick, and J. Sun. Faster r-cnn: Towards real-time object detection with region proposal net- works. arXiv preprint arXiv:1506.01497, 2015. 2, 3, 4, 5, 6</p><p>[16] O. Russakovsky, J. Deng, H. Su, J. Krause, S. Satheesh, S. Ma, Z. Huang, A. Karpathy, A. Khosla, M. Bernstein, A. C. Berg, and L. Fei-Fei. ImageNet Large Scale Visual Recognition Challenge. International Journal of Computer Vision (IJCV), 2015. 2</p><p>[17] K. Simonyan and A. Zisserman. Very deep convolutional networks for large-scale image recognition. arXiv preprint arXiv:1409.1556, 2014. 2, 5</p><p>[18] C. Szegedy, S. Ioffe, and V. Vanhoucke. Inception-v4, inception-resnet and the impact of residual connections on learning. CoRR, abs/1602.07261, 2016. 2</p><p>[19] C. Szegedy, W. Liu, Y. Jia, P. Sermanet, S. Reed, D. Anguelov, D. Erhan, V. Vanhoucke, and A. Rabinovich. Going deeper with convolutions. CoRR, abs/1409.4842, 2014. 5</p><p>[20] B. Thomee, D. A. Shamma, G. Friedland, B. Elizalde, K. Ni, D. Poland, D. Borth, and L.-J. Li. Yfcc100m: The new data in multimedia research. Communications of the ACM, 59(2):64–73, 2016. 1</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> 目标检测 </tag>
            
            <tag> Yolo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见的Latex语法</title>
      <link href="/2020/04/06/20200406-120619/"/>
      <url>/2020/04/06/20200406-120619/</url>
      
        <content type="html"><![CDATA[<h2 id="MathJax-基本语法总结"><a href="#MathJax-基本语法总结" class="headerlink" title="MathJax 基本语法总结"></a>MathJax 基本语法总结</h2><h2 id="MathJax-简介"><a href="#MathJax-简介" class="headerlink" title="MathJax 简介"></a>MathJax 简介</h2><p>MathJax 是一款运行在浏览器中的开源数学符号渲染引擎，使用 MathJax 可以方便的在浏览器中显示数学公式，在 Markdown 中输入数学公式需要 LaTeX 语法的支持。</p><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><ul><li><p>在正文中同一行插入 LaTeX 公式用 <code>$...$</code> 定义</p><ul><li>例如语句为 <code>$\sum_{i=0}^N\int_{a}^{b}g(t,i)\text{d}t$</code></li><li>显示为 $\sum_{i=0}^N\int_{a}^{b}g(t,i)\text{d}t$</li></ul></li><li><p>另起一行显示 LaTeX 公式用 <code>$$...$$</code></p><ul><li><p>例如语句为 <code>$$W_G^{mn}=max\lbrace 0,W_G.\xi_G(f_G^m,f_G^n) \rbrace$$</code></p></li><li><p>显示为</p><p>$$W_G^{mn}=max\lbrace 0,W_G.\xi_G(f_G^m,f_G^n) \rbrace$$</p></li></ul></li></ul><h3 id="希腊字母"><a href="#希腊字母" class="headerlink" title="希腊字母"></a>希腊字母</h3><table><thead><tr><th align="center">显示</th><th align="center">命令</th><th align="center">显示</th><th align="center">命令</th></tr></thead><tbody><tr><td align="center">α</td><td align="center"><code>\alpha</code></td><td align="center">β</td><td align="center"><code>\beta</code></td></tr><tr><td align="center">γ</td><td align="center"><code>\gamma</code></td><td align="center">δ</td><td align="center"><code>\delta</code></td></tr><tr><td align="center">ϵ</td><td align="center"><code>\epsilon</code></td><td align="center">ζ</td><td align="center"><code>\zeta</code></td></tr><tr><td align="center">η</td><td align="center"><code>\eta</code></td><td align="center">θ</td><td align="center"><code>\theta</code></td></tr><tr><td align="center">ι</td><td align="center"><code>\iota</code></td><td align="center">κ</td><td align="center"><code>\kappa</code></td></tr><tr><td align="center">λ</td><td align="center"><code>\lambda</code></td><td align="center">μ</td><td align="center"><code>\mu</code></td></tr><tr><td align="center">ν</td><td align="center"><code>\nu</code></td><td align="center">ξ</td><td align="center"><code>\xi</code></td></tr><tr><td align="center">π</td><td align="center"><code>\pi</code></td><td align="center">ρ</td><td align="center"><code>\rho</code></td></tr><tr><td align="center">σ</td><td align="center"><code>\sigma</code></td><td align="center">τ</td><td align="center"><code>\tau</code></td></tr><tr><td align="center">υ</td><td align="center"><code>\upsilon</code></td><td align="center">ϕ</td><td align="center"><code>\phi</code></td></tr><tr><td align="center">χ</td><td align="center"><code>\chi</code></td><td align="center">ψ</td><td align="center"><code>\psi</code></td></tr><tr><td align="center">ω</td><td align="center"><code>\omega</code></td><td align="center"></td><td align="center"></td></tr></tbody></table><ul><li>如果需要 <strong>大写</strong> 希腊字母，将命令首字母大写即可。<code>\Gamma</code> 呈现为 $\Gamma$。</li><li>如果需要 <strong>斜体</strong> 希腊字母，将命令前加上 <code>var</code> 即可。<code>\varGamma</code> 呈现为 $\varGamma$。</li></ul><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><table><thead><tr><th align="center">显示</th><th align="center">命令</th><th align="center">显示</th><th align="center">命令</th></tr></thead><tbody><tr><td align="center">∣</td><td align="center"><code>\mid</code></td><td align="center">∤</td><td align="center"><code>\nmid</code></td></tr><tr><td align="center">⋅⋅</td><td align="center"><code>\cdot</code></td><td align="center">≤</td><td align="center"><code>\leq</code></td></tr><tr><td align="center">≥</td><td align="center"><code>\geq</code></td><td align="center">≠</td><td align="center"><code>\neq</code></td></tr><tr><td align="center">≈</td><td align="center"><code>\approx</code></td><td align="center">≡</td><td align="center"><code>\equiv</code></td></tr><tr><td align="center">≺</td><td align="center"><code>\prec</code></td><td align="center">⪯</td><td align="center"><code>\preceq</code></td></tr><tr><td align="center">≪</td><td align="center"><code>\ll</code></td><td align="center">≻</td><td align="center"><code>\succ</code></td></tr><tr><td align="center">⪰</td><td align="center"><code>\succeq</code></td><td align="center">≫</td><td align="center"><code>\gg</code></td></tr><tr><td align="center">∼</td><td align="center"><code>\sim</code></td><td align="center">≃</td><td align="center"><code>\simeq</code></td></tr><tr><td align="center">≍</td><td align="center"><code>\asymp</code></td><td align="center">≅</td><td align="center"><code>\cong</code></td></tr><tr><td align="center">≐</td><td align="center"><code>\doteq</code></td><td align="center">∝</td><td align="center"><code>\propto</code></td></tr><tr><td align="center">⊨</td><td align="center"><code>\models</code></td><td align="center">∥</td><td align="center"><code>\parallel</code></td></tr><tr><td align="center">⋈</td><td align="center"><code>\bowtie</code></td><td align="center">⊥</td><td align="center"><code>\perp</code></td></tr><tr><td align="center">∘</td><td align="center"><code>\circ</code></td><td align="center">∗</td><td align="center"><code>\ast</code></td></tr><tr><td align="center">⨀</td><td align="center"><code>\bigodot</code></td><td align="center">⨂</td><td align="center"><code>\bigotimes</code></td></tr><tr><td align="center">⨁</td><td align="center"><code>\bigoplus</code></td><td align="center"></td><td align="center"></td></tr></tbody></table><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><table><thead><tr><th align="center">显示</th><th align="center">命令</th><th align="center">显示</th><th align="center">命令</th></tr></thead><tbody><tr><td align="center">±</td><td align="center"><code>\pm</code></td><td align="center">∓</td><td align="center"><code>\mp</code></td></tr><tr><td align="center">×</td><td align="center"><code>\times</code></td><td align="center">∗</td><td align="center"><code>\ast</code></td></tr><tr><td align="center">⋆</td><td align="center"><code>\star</code></td><td align="center">∘</td><td align="center"><code>\circ</code></td></tr><tr><td align="center">∙</td><td align="center"><code>\bullet</code></td><td align="center">⋅</td><td align="center"><code>\cdot</code></td></tr><tr><td align="center">÷</td><td align="center"><code>\div</code></td><td align="center">∑</td><td align="center"><code>\sum</code></td></tr><tr><td align="center">∏</td><td align="center"><code>\prod</code></td><td align="center">∐</td><td align="center"><code>\coprod</code></td></tr><tr><td align="center">⊕</td><td align="center"><code>\oplus</code></td><td align="center">⨁</td><td align="center"><code>\bigoplus</code></td></tr><tr><td align="center">⨂</td><td align="center"><code>\bigotimes</code></td><td align="center">⊘</td><td align="center"><code>\oslash</code></td></tr><tr><td align="center">⊙</td><td align="center"><code>\odot</code></td><td align="center">⨀</td><td align="center"><code>\bigodot</code></td></tr><tr><td align="center">⋄</td><td align="center"><code>\diamond</code></td><td align="center">△</td><td align="center"><code>\bigtriangleup</code></td></tr><tr><td align="center">▽</td><td align="center"><code>\bigtriangledown</code></td><td align="center">◃</td><td align="center"><code>\triangleleft</code></td></tr><tr><td align="center">$\triangleright$</td><td align="center"><code>\triangleright</code></td><td align="center">▹</td><td align="center"><code>\trigangleright</code></td></tr><tr><td align="center">◯</td><td align="center"><code>\bigcirc</code></td><td align="center"></td><td align="center"></td></tr></tbody></table><h3 id="集合符号"><a href="#集合符号" class="headerlink" title="集合符号"></a>集合符号</h3><table><thead><tr><th align="center">显示</th><th align="center">命令</th></tr></thead><tbody><tr><td align="center">$ \mathbb{R} $</td><td align="center"><code>\mathbb{R}</code></td></tr><tr><td align="center">$ \mathbb{Z} $</td><td align="center"><code>\mathbb{Z}</code></td></tr><tr><td align="center">$ \mathbb{N} $</td><td align="center"><code>\mathbb{N}</code></td></tr><tr><td align="center">$\subset$</td><td align="center"><code>\subset</code></td></tr><tr><td align="center">$\subseteq$</td><td align="center"><code>\subseteq</code></td></tr><tr><td align="center">$\supset$</td><td align="center"><code>\supset</code></td></tr><tr><td align="center">$\in$</td><td align="center"><code>\in</code></td></tr><tr><td align="center">$\cap$</td><td align="center"><code>\cap</code></td></tr><tr><td align="center">$\mid$</td><td align="center"><code>\mid</code></td></tr><tr><td align="center">$\notin$</td><td align="center"><code>\notin</code></td></tr></tbody></table><h3 id="字母修饰"><a href="#字母修饰" class="headerlink" title="字母修饰"></a>字母修饰</h3><h4 id="上下标"><a href="#上下标" class="headerlink" title="上下标"></a>上下标</h4><ul><li>上标：<code>^</code></li><li>下标：<code>_</code></li><li>例如：<code>C_n^2</code> ，显示为$C_n^2$</li></ul><h4 id="矢量"><a href="#矢量" class="headerlink" title="矢量"></a>矢量</h4><ul><li><code>\vec a</code>，显示为 $\vec a$</li><li><code>\overrightarrow{xy}</code> ，显示为 $\overrightarrow{xy}$</li></ul><h4 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h4><ul><li>打印机字体 Typewriter：<code>\mathtt{A}</code> 显示为 $\mathtt{A}$</li><li>黑板粗体字 Blackboard Bold：<code>\mathbb{A}</code> 显示为 $\mathbb{A}$</li><li>无衬线字体 Sans Serif：<code>\mathsf{A}</code> 显示为 $\mathsf{A}$</li><li>手写体：<code>\mathscr{A}</code> 显示为 $\mathscr{A}$</li><li>罗马字体：<code>\mathrm{A}</code> 显示为 $\mathrm{A}$</li></ul><h4 id="括号"><a href="#括号" class="headerlink" title="括号"></a>括号</h4><ul><li>小括号：<code>()</code> ，显示为 ()  </li><li>中括号：<code>[]</code> ，显示为 []  </li><li>尖括号：<code>\langle</code> 和 <code>\rangle</code>，显示为 $\langle$和 $\rangle$</li><li>大括号：<code>\lbrace</code> 和 <code>\rbrace</code> ，显示为 { 和 } 。 <code>\{</code> 和 <code>\}</code> 也可以使用，但推荐前一种  ,后一种无法被 Hexo 博客显示。 </li></ul><h4 id="求和"><a href="#求和" class="headerlink" title="求和"></a>求和</h4><ul><li><code>\sum_{i}^{n}</code>: $\sum_{i}^{n}$</li><li><code>\sum\limits_{i}^{j}</code>: $\sum\limits_{i}^{n}$</li></ul><h4 id="分式和根式"><a href="#分式和根式" class="headerlink" title="分式和根式"></a>分式和根式</h4><ul><li>分式：<code>\frac{x}{y}</code>: $\frac{x}{y}$</li><li>根式：<code>\sqrt[x]{y}</code>: $\sqrt[x]{y}$</li></ul><h4 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h4><p><code>Latex</code>语法会忽略空格，需要使用转义字符：</p><ul><li>单空格：<code>a\ b</code>: $a \ b$</li><li>四空格： <code>a \quad b</code> : $a \quad b$</li></ul><h4 id="多项式"><a href="#多项式" class="headerlink" title="多项式"></a>多项式</h4><ul><li><p>起始以 <code>\begin{cases}</code> 声明，结束以 <code>\end{cases}</code> 声明 </p></li><li><p>下标可以使用： <code>a_1</code>: $a_1$</p></li><li><p>换行：<code>\\</code> $ a \\ b$</p></li><li><p>公式编号(针对整体的公式)： <code>\tag{n}</code> $f(x) = x \tag{1}$</p></li><li><p>eg:</p><pre><code>$$\begin{cases}a_1x + b_1x + c_1x = d_1 \tag{1}\\\\a_1x + b_1x + c_1x = d_1 \\\\a_1x + b_1x + c_1x = d_1 \\\\a_1x + b_1x + c_1x = d_1 \end{cases}$$</code></pre><p>$$<br>\begin{cases}<br>a_1x + b_1x + c_1x = d_1 \tag{1} \\\<br>a_1x + b_1x + c_1x = d_1 \\\<br>a_1x + b_1x + c_1x = d_1 \\\<br>a_1x + b_1x + c_1x = d_1<br>\end{cases}<br>$$</p></li></ul><h4 id="字母上符号"><a href="#字母上符号" class="headerlink" title="字母上符号"></a>字母上符号</h4><p>加<code>^</code>号 输入<code>\hat</code>  或 <code>\widehat</code>: $\hat{a}$  $\widehat{a}$</p><p>加横线 输入<code>\overline</code> $\overline{b}$</p><p>加波浪线 输入 <code>\widetilde</code>$\widetilde{c}$</p><p>加一个点<code>\dot</code>{要加点的字母}加两个点<code>\ddot</code>{要加点的字母}: $\dot{a}\quad \ddot{b}$</p><h4 id="多行输入"><a href="#多行输入" class="headerlink" title="多行输入"></a>多行输入</h4><pre><code>$$\begin{equation}f(x) = 1 \tag{1} \\ g(x) = 2 \tag{2} \\\end{equation}$$</code></pre><p>$$<br>\begin{align}<br>f(x) = 1 \tag{1} \\<br>g(x) = 2 \tag{2} \<br>\end{align}<br>$$</p>]]></content>
      
      
      <categories>
          
          <category> 学习工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> latex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于YOLOV1算法的思考</title>
      <link href="/2020/04/06/20200406-143706/"/>
      <url>/2020/04/06/20200406-143706/</url>
      
        <content type="html"><![CDATA[<h2 id="如何解释召回率recall和准确率precsion"><a href="#如何解释召回率recall和准确率precsion" class="headerlink" title="如何解释召回率recall和准确率precsion"></a>如何解释召回率<code>recall</code>和准确率<code>precsion</code></h2><p>以下是关于正类的召回率和准确率的结束：</p><p><strong>精确率</strong>是针对我们<strong>预测结果</strong>而言的:</p><ul><li><p>它表示的是预测为正的样本中有多少是真正的正样本。</p></li><li><p>那么预测为正就有两种可能:</p><ul><li>一种就是把正类预测为正类(TP)</li><li>另一种就是把负类预测为正类(FP)</li></ul></li><li><p>公式：<br>$$<br>P ={（预测结果）} \frac{TP_{正类预测为正类}}{TP_{正类预测为正类}+FP_{负类预测为正类}}<br>$$</p><ul><li><code>T:True F:False P:positive n:negative</code></li></ul></li></ul><p><strong>召回率</strong>是针对我们<strong>原来的样本</strong>而言：</p><ul><li><p>它表示的是样本中的正例有多少被预测正确了。</p></li><li><p>两种可能：</p><ul><li>原来的正类预测成正类(TP)</li><li>原来的正类预测为负类(FN)</li></ul></li><li><p>公式：<br>$$<br>R = {(原来样本)} \frac{TP_{正类预测为正类}}{TP_{正类预测为正类}+FN_{正类预测成负类}}<br>$$</p></li></ul><p> 例子：</p><blockquote><p>假设我们手上有60个正样本，40个负样本，</p><p>我们要找出所有的正样本，</p><p>系统查找出50个，其中只有40个是真正的正样本，</p><p>计算上述各指标。 </p></blockquote><p>计算召回率：针对原来样本：</p><ul><li>$TP_{正类预测为正类}$: 40</li><li>$FN_{正类预测为负类}$：20</li></ul><p>$$<br>R = {(原来样本)} \frac{TP_{正类预测为正类}}{TP_{正类预测为正类}+FN_{正类预测成负类}} = \frac {40}{40+20} = \frac{2}{3}<br>$$</p><p>计算准确率：</p><ul><li><p>$TP_{正类预测为正类}$：40</p></li><li><p>$FP_{正类预测为负类}$：10<br>$$<br>P ={（预测结果）} \frac{TP_{正类预测为正类}}{TP_{正类预测为正类}+FP_{负类预测为正类}} = \frac {40} {40+10} = \frac {4}{5}<br>$$</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> 目标检测 </tag>
            
            <tag> YOLO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Blog使用Github和coding双线</title>
      <link href="/2020/04/05/20200405-150842/"/>
      <url>/2020/04/05/20200405-150842/</url>
      
        <content type="html"><![CDATA[<h2 id="Blog使用Github和coding双线"><a href="#Blog使用Github和coding双线" class="headerlink" title="Blog使用Github和coding双线"></a>Blog使用Github和coding双线</h2><p>用Hexo+Github搭建博客后，会发现网站的访问速度简直是龟速。为了摆脱GitHub的龟速暴击，我们选择把博客托管到Coding来提升访问速度。 </p><p>至于什么是Coding：</p><blockquote><p> Coding WebIDE 是 Coding 自主研发的在线集成开发环境 (IDE)。用户可以通过 WebIDE 创建项目的工作空间, 进行在线开发, 调试等操作。同时 WebIDE 集成了 Git 代码版本控制, 用户可以选择 Coding、GitHub、BitBucket、Git@OSC 等任意的代码仓库。 WebIDE 还提供了分享开发环境的功能, 用户可以保存当前的开发环境, 分享给团队的其他成员。大家可以理解为中国版的github，如果把代码既托管到coding上，又托管到github上，让大陆的用户访问的是由coding托管的网站，歪果仁访问的是由github托管的网站，以此来提升我们网站的访问速度。</p></blockquote><p>部署到 Coding Pages 的好处：国内访问速度更快，可以提交百度收录（GitHub 禁止了百度的爬取）</p><h3 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1.创建项目"></a>1.创建项目</h3><p> <a href="https://link.zhihu.com/?target=https%3A//dev.tencent.com/production">点击此处</a>进入Coding个人版官网注册账号，由于 Coding 已经被腾讯收购了，所以登录就会来到<a href="https://link.zhihu.com/?target=https%3A//cloud.tencent.com/%3FfromSource%3Dgwzcw.2212127.2212127.2212127%26utm_medium%3Dcpd%26utm_id%3Dgwzcw.2212127.2212127.2212127">腾讯云</a>开发者平台： </p><p> <img src="https://gitee.com/homewyk/cloudimg/raw/master/20200405151036.png" alt=""></p><p> 找到创建项目： </p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200405151213.png" alt=""></p><p>项目名称建议和你的用户名一致，到时候可以直接通过 <a href="https://link.zhihu.com/?target=http%3A//user_name.coding.me">http://user_name.coding.me</a> 访问你的博客，如果项目名与用户名不一致，则需要通过 <a href="https://link.zhihu.com/?target=http%3A//user_name.coding.me/project_name">http://user_name.coding.me/project_name</a> 才能访问，项目描述随便写：</p><p> <img src="https://gitee.com/homewyk/cloudimg/raw/master/20200405151256.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200405151337.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200405151427.png" alt=""></p><h3 id="2-配置-config-yml"><a href="#2-配置-config-yml" class="headerlink" title="2.配置 _config.yml"></a>2.配置 _config.yml</h3><p> 进入我们的项目，在右上角选择连接方式，这里我以HTTPS连接为例，将链接复制下来：  </p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200405151602.png" alt=""></p><p>然后打开你本地博客根目录的 _config.yml 文件，找到 deploy 关键字，添加 我们刚才复制的 coding 地址：  </p><p> <img src="https://gitee.com/homewyk/cloudimg/raw/master/20200405151711.png" alt=""></p><p> <strong>注意：</strong></p><ul><li>1.如果要同时推送到GitHub和Coding，type前面加 -。</li><li>2.每一行冒号后面的空格不要忘记。</li></ul><h3 id="3-配置SSH"><a href="#3-配置SSH" class="headerlink" title="3.配置SSH"></a>3.配置SSH</h3><p><a href="https://homewyk.com/2020/04/05/20200405-103148/">参考</a></p><h3 id="4-将代码推送到coding"><a href="#4-将代码推送到coding" class="headerlink" title="4.将代码推送到coding"></a>4.将代码推送到coding</h3><p>现在我们在博客根目录下右键单击Git Bash Here，输入下面三个命令：</p><pre class=" language-bash"><code class="language-bash">hexo clean hexo ghexo d</code></pre><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200405152134.png" alt=""></p><h3 id="5-开启-Coding-Pages"><a href="#5-开启-Coding-Pages" class="headerlink" title="5.开启 Coding Pages"></a>5.开启 Coding Pages</h3><p>先要实名认证：</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200405152616.png" alt=""></p><p>进入你的项目，在构建与部署一栏选择静态网站，这里需要实名认证：，选择我们的代码库 ：</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200405153022.png" alt=""></p><p>这个时候就可以看到我们的网站地址啦： </p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200405152720.png" alt=""></p><h3 id="6-绑定域名并开启-Https"><a href="#6-绑定域名并开启-Https" class="headerlink" title="6.绑定域名并开启 Https"></a>6.绑定域名并开启 Https</h3><p>在静态网站一栏右上角点击设置，下滑到底绑定我们的域名（注意：<a href="http://www.xxx.com开头）：">www.xxx.com开头）：</a>  </p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200405153101.png" alt=""></p><p>然后打开我们的域名解析 ：</p><p>将 GitHub 的解析路线改为 境外，这样境外访问就会走 GitHub，境内就会走 Coding，也有人说阿里云是智能解析，自动分配路线，如果解析路线都是默认，境外访问同样会智能选择走 GitHub，境内走 Coding。 </p><p>我的解析：</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200405153523.png" alt=""></p><p><strong>SSL证书申请失败解决方法：</strong></p><ul><li>先去域名 DNS 把 GitHub 的解析暂停掉，然后再重新申请 SSL 证书，大约十秒左右就能申请成功，然后开启强制 HTTPS 访问</li></ul><p><strong>开启HTTPS,如图，勾选即可：</strong> </p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200405153731.png" alt=""></p><p>现在我们的博客就托管到coding啦，看看访问速度有没有提升。 </p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Blog </tag>
            
            <tag> coding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gitee、github、coding同时配置ssh key</title>
      <link href="/2020/04/05/20200405-103148/"/>
      <url>/2020/04/05/20200405-103148/</url>
      
        <content type="html"><![CDATA[<h1 id="Gitee-码云-、Github、coding同时配置ssh-key"><a href="#Gitee-码云-、Github、coding同时配置ssh-key" class="headerlink" title="Gitee(码云)、Github、coding同时配置ssh key"></a>Gitee(码云)、Github、coding同时配置ssh key</h1><h4 id="一、cd-ssh"><a href="#一、cd-ssh" class="headerlink" title="一、cd ~/.ssh"></a>一、<code>cd ~/.ssh</code></h4><h4 id="二、通过下面的命令，依次生成两个平台的key"><a href="#二、通过下面的命令，依次生成两个平台的key" class="headerlink" title="二、通过下面的命令，依次生成两个平台的key"></a>二、通过下面的命令，依次生成两个平台的key</h4><pre class=" language-bash"><code class="language-bash">$ ssh-keygen -t rsa -C <span class="token string">"xxxxxxx@qq.com"</span> -f <span class="token string">"github_id_rsa"</span>$ ssh-keygen -t rsa -C <span class="token string">"xxxxxxx@qq.com"</span> -f <span class="token string">"gitee_id_rsa"</span>$ ssh-keygen -t rsa -C <span class="token string">"xxxxxxx@qq.com"</span></code></pre><p>三次回车</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/170141_5aa5bc98_551147.png" alt=""></p><p>完成后，.ssh文件夹生成以下文件 </p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200405103414.png" alt=""></p><h4 id="三、把public-key复制到gitee、github、coding"><a href="#三、把public-key复制到gitee、github、coding" class="headerlink" title="三、把public key复制到gitee、github、coding"></a>三、把public key复制到gitee、github、coding</h4><p>执行命令<code>cat github_id_rsa.pub</code>把第二行到结尾的内容复制到github的ssh中保存 </p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200405103500.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200405103514.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200405142048.png" alt=""></p><h4 id="四、创建config文件解决ssh冲突"><a href="#四、创建config文件解决ssh冲突" class="headerlink" title="四、创建config文件解决ssh冲突"></a>四、创建config文件解决ssh冲突</h4><p>在.ssh文件夹下执行命令<code>vi config</code> 文件中添加以下内容 :</p><p><strong>注意</strong>： 上面的东西不需要删除</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># gitee</span>Host gitee.comHostName gitee.comPreferredAuthentications publickeyIdentityFile ~/.ssh/gitee_id_rsa<span class="token comment" spellcheck="true"># github</span>Host github.comHostName github.comPreferredAuthentications publickeyIdentityFile ~/.ssh/github_id_rsa</code></pre><h4 id="五、测试"><a href="#五、测试" class="headerlink" title="五、测试"></a>五、测试</h4><p>执行<br><code>ssh -T git@gitee.com</code><br>成功则返回<br><code>Welcome to Gitee.com ,yourname!</code><br>执行<br><code>ssh -T git@github.com</code><br>成功则返回<br><code>Hi xxx! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code></p><p>执行</p><p><code>ssh -T git@e.coding.net</code></p><p>返回：</p><p>xxx,你好，你已经通过 SSH 协议认证 Coding.net 服务，这是一个个人公钥.<br>公钥指纹：87:e8:2c:46:2d:b4:13:c8:6f:6c:14:50:da:ba:77:00</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200405103918.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200405152009.png" alt=""></p><p>参考：</p><p><a href="https://blog.csdn.net/weixin_36191602/article/details/80946242" target="_blank" rel="noopener">https://blog.csdn.net/weixin_36191602/article/details/80946242</a> </p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> gitee </tag>
            
            <tag> ssh </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Blog由Github改为部署到Gitee</title>
      <link href="/2020/04/05/20200405-092916/"/>
      <url>/2020/04/05/20200405-092916/</url>
      
        <content type="html"><![CDATA[<h3 id="为何使用Gitee而不是GitHub"><a href="#为何使用Gitee而不是GitHub" class="headerlink" title="为何使用Gitee而不是GitHub"></a>为何使用Gitee而不是GitHub</h3><p>目前国内访问GitHub速度慢，还可能被墙，所以Gitee来构建个人博客。Gitee类似国内版的GitHub，访问速度有保证。</p><h3 id="部署博客到Gitee上"><a href="#部署博客到Gitee上" class="headerlink" title="部署博客到Gitee上"></a>部署博客到Gitee上</h3><h4 id="1-创建Gitee账号"><a href="#1-创建Gitee账号" class="headerlink" title="1. 创建Gitee账号"></a>1. 创建Gitee账号</h4><p>到码云：<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgitee.com%2F" target="_blank" rel="noopener">https://gitee.com/</a> 上申请注册账号，码云类似国内版的GitHub，所以操作界面跟GitHub差不多，多了一些国产化的东西，这里不做更多介绍了，自己研究下。 </p><h4 id="2-创建项目"><a href="#2-创建项目" class="headerlink" title="2. 创建项目"></a>2. 创建项目</h4><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200405093220.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200405105156.png" alt=""></p><p>选中readme文件，会默认创建master分支</p><h4 id="3-Gitee-Pages设置"><a href="#3-Gitee-Pages设置" class="headerlink" title="3. Gitee Pages设置"></a>3. Gitee Pages设置</h4><p>在项目的服务中选择Pages选项 </p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200405105334.png" alt=""></p><p>第一次配置点击启动会出现如下界面（如果启动为不可用状态，需要验证手机号）：</p><p><img src="C:%5CUsers%5Casdw1%5CAppData%5CLocal%5CTemp%5C1586055255075.png" alt="1586051434639"></p><h4 id="4-在-config-yml中配置Git"><a href="#4-在-config-yml中配置Git" class="headerlink" title="4. 在_config.yml中配置Git"></a>4. 在_config.yml中配置Git</h4><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200405105542.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200408231739.png" alt=""></p><p>注意：冒号后面一定要有空格，否则不能正确识别。 </p><p>项目地址在：</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200405105654.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200408231759.png" alt=""></p><h4 id="5-设置sshkey"><a href="#5-设置sshkey" class="headerlink" title="5.设置sshkey"></a>5.设置sshkey</h4><p><a href="https://homewyk.com/2020/04/05/20200405-103148/">参考资料</a></p><h4 id="6-发布到Gitee"><a href="#6-发布到Gitee" class="headerlink" title="6. 发布到Gitee"></a>6. 发布到Gitee</h4><p>输入命令<code>npm install hexo-deployer-git --save</code> 安装自动部署发布工具<br> 输入命令<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code> 发布博客，首次发布需要在shell中输入账号和密码。</p><h4 id="7-测试博客"><a href="#7-测试博客" class="headerlink" title="7.测试博客"></a>7.测试博客</h4><p><strong>注意：</strong> 每<code>hexo d</code> 一次都要重新点击更新</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200405110416.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200405110542.png" alt=""></p><h4 id="8-修改域名解析指向"><a href="#8-修改域名解析指向" class="headerlink" title="8.修改域名解析指向"></a>8.修改域名解析指向</h4><p>这个需要开通<code>gitee page pro</code></p><p>域名还得是备案的…</p><hr><p>有点难受…</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> theme-matery </tag>
            
            <tag> Gitee </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim--终端中的编辑器</title>
      <link href="/2020/04/05/20200405-091853/"/>
      <url>/2020/04/05/20200405-091853/</url>
      
        <content type="html"><![CDATA[<h1 id="vi-——-终端中的编辑器"><a href="#vi-——-终端中的编辑器" class="headerlink" title="vi —— 终端中的编辑器"></a><code>vi</code> —— 终端中的编辑器</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li><code>vi</code> 简介</li><li>打开和新建文件</li><li>三种工作模式</li><li>常用命令</li><li>分屏命令</li><li>常用命令速查图</li></ul><h2 id="01-vi-简介"><a href="#01-vi-简介" class="headerlink" title="01. vi 简介"></a>01. <code>vi</code> 简介</h2><h3 id="1-1-学习-vi-的目的"><a href="#1-1-学习-vi-的目的" class="headerlink" title="1.1 学习 vi 的目的"></a>1.1 学习 <code>vi</code> 的目的</h3><ul><li>在工作中，要对 <strong>服务器</strong> 上的文件进行 <strong>简单</strong> 的修改，可以使用 <code>ssh</code> 远程登录到服务器上，并且使用 <code>vi</code> 进行快速的编辑即可</li><li>常见需要修改的文件包括：<ul><li><strong>源程序</strong></li><li><strong>配置文件</strong>，例如 <code>ssh</code> 的配置文件 <code>~/.ssh/config</code></li></ul></li></ul><blockquote><ul><li>在没有图形界面的环境下，要编辑文件，<code>vi</code> 是最佳选择！</li><li>每一个要使用 Linux 的程序员，都应该或多或少的学习一些 <code>vi</code> 的常用命令</li></ul></blockquote><h3 id="1-2-vi-和-vim"><a href="#1-2-vi-和-vim" class="headerlink" title="1.2 vi 和 vim"></a>1.2 vi 和 vim</h3><ul><li>在很多 <code>Linux</code> 发行版中，直接把 <code>vi</code> 做成 <code>vim</code> 的软连接</li></ul><h4 id="vi"><a href="#vi" class="headerlink" title="vi"></a>vi</h4><ul><li><code>vi</code> 是 <code>Visual interface</code> 的简称，是 <code>Linux</code> 中 <strong>最经典</strong> 的文本编辑器</li><li><code>vi</code> 的核心设计思想 —— <strong>让程序员的手指始终保持在键盘的核心区域，就能完成所有的编辑操作</strong></li></ul><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/001_vi%E9%94%AE%E7%9B%98.png" alt=""></p><ul><li><code>vi</code> 的特点：<ul><li><strong>没有图形界面</strong> 的 <strong>功能强大</strong> 的编辑器</li><li>只能是编辑 <strong>文本内容</strong>，不能对字体、段落进行排版</li><li><strong>不支持鼠标操作</strong></li><li><strong>没有菜单</strong></li><li><strong>只有命令</strong></li></ul></li><li><code>vi</code> 编辑器在 <strong>系统管理</strong>、<strong>服务器管理</strong> 编辑文件时，<strong>其功能永远不是图形界面的编辑器能比拟的</strong></li></ul><h4 id="vim"><a href="#vim" class="headerlink" title="vim"></a><code>vim</code></h4><p><strong>vim = vi improved</strong></p><ul><li><code>vim</code> 是从 <code>vi</code> 发展出来的一个文本编辑器，支持 <strong>代码补全</strong>、<strong>编译</strong> 及 <strong>错误跳转</strong> 等方便编程的功能特别丰富，在程序员中被广泛使用，被称为 <strong>编辑器之神</strong></li></ul><h4 id="查询软连接命令（知道）"><a href="#查询软连接命令（知道）" class="headerlink" title="查询软连接命令（知道）"></a>查询软连接命令（知道）</h4><ul><li>在很多 <code>Linux</code> 发行版中直接把 <code>vi</code> 做成 <code>vim</code> 的软连接</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 查找 vi 的运行文件</span>$ <span class="token function">which</span> <span class="token function">vi</span>$ <span class="token function">ls</span> -l /usr/bin/vi$ <span class="token function">ls</span> -l /etc/alternatives/vi$ <span class="token function">ls</span> -l /usr/bin/vim.basic<span class="token comment" spellcheck="true"># 查找 vim 的运行文件</span>$ <span class="token function">which</span> vim$ <span class="token function">ls</span> -l /usr/bin/vim$ <span class="token function">ls</span> -l /etc/alternatives/vim$ <span class="token function">ls</span> -l /usr/bin/vim.basic </code></pre><h2 id="02-打开和新建文件"><a href="#02-打开和新建文件" class="headerlink" title="02. 打开和新建文件"></a>02. 打开和新建文件</h2><ul><li>在终端中输入 <code>vi</code> <strong>在后面跟上文件名</strong> 即可</li></ul><pre class=" language-bash"><code class="language-bash">$ <span class="token function">vi</span> 文件名</code></pre><ul><li>如果文件已经存在，会直接打开该文件</li><li>如果文件不存在，会新建一个文件</li></ul><h3 id="2-1-打开文件并且定位行"><a href="#2-1-打开文件并且定位行" class="headerlink" title="2.1 打开文件并且定位行"></a>2.1 打开文件并且定位行</h3><ul><li><p>在日常工作中，有可能会遇到 <strong>打开一个文件，并定位到指定行</strong> 的情况</p></li><li><p>例如：在开发时，<strong>知道某一行代码有错误</strong>，可以 <strong>快速定位</strong> 到出错代码的位置</p></li><li><p>这个时候，可以使用以下命令打开文件</p></li></ul><pre class=" language-bash"><code class="language-bash">$ <span class="token function">vi</span> 文件名 +行数</code></pre><blockquote><p>提示：如果只带上 <code>+</code> 而不指定行号，会直接定位到文件末尾</p></blockquote><h3 id="2-2-异常处理"><a href="#2-2-异常处理" class="headerlink" title="2.2 异常处理"></a>2.2 异常处理</h3><ul><li>如果 <code>vi</code> 异常退出，在磁盘上可能会保存有 <strong>交换文件</strong></li><li>下次再使用 <code>vi</code> 编辑该文件时，会看到以下屏幕信息，按下字母 <code>d</code> 可以 <strong>删除交换文件</strong> 即可</li></ul><blockquote><p>提示：按下键盘时，注意关闭输入法</p></blockquote><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/002_%E5%88%A0%E9%99%A4%E4%BA%A4%E6%8D%A2%E6%96%87%E4%BB%B6.png" alt=""></p><h2 id="03-三种工作模式"><a href="#03-三种工作模式" class="headerlink" title="03. 三种工作模式"></a>03. 三种工作模式</h2><ul><li><p><code>vi</code> 有三种基本工作模式：</p><ol><li><strong>命令模式</strong><ul><li><strong>打开文件首先进入命令模式</strong>，是使用 <code>vi</code> 的 <strong>入口</strong></li><li>通过 <strong>命令</strong> 对文件进行常规的编辑操作，例如：<strong>定位</strong>、<strong>翻页</strong>、<strong>复制</strong>、<strong>粘贴</strong>、<strong>删除</strong>……</li><li>在其他图形编辑器下，通过 <strong>快捷键</strong> 或者 <strong>鼠标</strong> 实现的操作，都在 <strong>命令模式</strong> 下实现</li></ul></li><li><strong>末行模式</strong> —— 执行 <strong>保存</strong>、<strong>退出</strong> 等操作 <ul><li>要退出 <code>vi</code> 返回到控制台，需要在末行模式下输入命令</li><li><strong>末行模式</strong> 是 <code>vi</code> 的 <strong>出口</strong></li></ul></li><li><strong>编辑模式</strong> —— 正常的编辑文字</li></ol></li></ul><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/003_vi%E7%9A%84%E6%A8%A1%E5%BC%8F.png" alt=""></p><blockquote><p>提示：在 <code>Touch Bar</code> 的 Mac 电脑上 ，按 <code>ESC</code> 不方便，可以使用 <code>CTRL + [</code> 替代</p></blockquote><h3 id="末行模式命令"><a href="#末行模式命令" class="headerlink" title="末行模式命令"></a>末行模式命令</h3><table><thead><tr><th align="center">命令</th><th align="center">英文</th><th>功能</th></tr></thead><tbody><tr><td align="center">w</td><td align="center">write</td><td>保存</td></tr><tr><td align="center">q</td><td align="center">quit</td><td>退出，如果没有保存，不允许退出</td></tr><tr><td align="center">q!</td><td align="center">quit</td><td>强行退出，不保存退出</td></tr><tr><td align="center">wq</td><td align="center">write &amp; quit</td><td>保存并退出</td></tr><tr><td align="center">x</td><td align="center"></td><td>保存并退出</td></tr></tbody></table><h2 id="04-常用命令"><a href="#04-常用命令" class="headerlink" title="04. 常用命令"></a>04. 常用命令</h2><h3 id="命令线路图"><a href="#命令线路图" class="headerlink" title="命令线路图"></a>命令线路图</h3><ol start="0"><li>重复次数<ul><li>在命令模式下，<strong>先输入一个数字</strong>，<strong>再跟上一个命令</strong>，可以让该命令 <strong>重复执行指定次数</strong> </li></ul></li><li>移动和选择（<strong>多练</strong>）<ul><li><code>vi</code> 之所以快，关键在于 <strong>能够快速定位到要编辑的代码行</strong></li><li><strong>移动命令</strong> 能够 和 <strong>编辑操作</strong> 命令 <strong>组合使用</strong></li></ul></li><li>编辑操作<ul><li><strong>删除</strong>、<strong>复制</strong>、<strong>粘贴</strong>、<strong>替换</strong>、<strong>缩排</strong></li></ul></li><li>撤销和重复</li><li>查找替换</li><li>编辑</li></ol><h4 id="学习提示"><a href="#学习提示" class="headerlink" title="学习提示"></a>学习提示</h4><ol><li><code>vi</code> 的命令较多，<strong>不要期望一下子全部记住</strong>，个别命令忘记了，只是会影响编辑速度而已</li><li>在使用 <code>vi</code> 命令时，注意 <strong>关闭中文输入法</strong></li></ol><h3 id="4-1-移动（基本）"><a href="#4-1-移动（基本）" class="headerlink" title="4.1 移动（基本）"></a>4.1 移动（基本）</h3><ul><li>要熟练使用 <code>vi</code>，首先应该学会怎么在 <strong>命令模式</strong> 下样快速移动光标</li><li><strong>编辑操作命令</strong>，能够和 <strong>移动命令</strong> 结合在一起使用</li></ul><h4 id="1-上、下、左、右"><a href="#1-上、下、左、右" class="headerlink" title="1) 上、下、左、右"></a>1) 上、下、左、右</h4><table><thead><tr><th align="center">命令</th><th>功能</th><th align="center">手指</th></tr></thead><tbody><tr><td align="center">h</td><td>向左</td><td align="center">食指</td></tr><tr><td align="center">j</td><td>向下</td><td align="center">食指</td></tr><tr><td align="center">k</td><td>向上</td><td align="center">中指</td></tr><tr><td align="center">l</td><td>向右</td><td align="center">无名指</td></tr></tbody></table><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/005_%E7%A7%BB%E5%8A%A8%E5%85%89%E6%A0%87.png" alt=""></p><h4 id="2-行内移动"><a href="#2-行内移动" class="headerlink" title="2) 行内移动"></a>2) 行内移动</h4><table><thead><tr><th align="center">命令</th><th align="center">英文</th><th>功能</th></tr></thead><tbody><tr><td align="center">w</td><td align="center">word</td><td>向后移动一个单词</td></tr><tr><td align="center">b</td><td align="center">back</td><td>向前移动一个单词</td></tr><tr><td align="center">0</td><td align="center"></td><td>行首</td></tr><tr><td align="center">^</td><td align="center"></td><td>行首，第一个不是空白字符的位置</td></tr><tr><td align="center">$</td><td align="center"></td><td>行尾</td></tr></tbody></table><h4 id="3-行数移动"><a href="#3-行数移动" class="headerlink" title="3) 行数移动"></a>3) 行数移动</h4><table><thead><tr><th align="center">命令</th><th align="center">英文</th><th>功能</th></tr></thead><tbody><tr><td align="center">gg</td><td align="center">go</td><td>文件顶部</td></tr><tr><td align="center">G</td><td align="center">go</td><td>文件末尾</td></tr><tr><td align="center">数字gg</td><td align="center">go</td><td>移动到 数字 对应行数</td></tr><tr><td align="center">数字G</td><td align="center">go</td><td>移动到 数字 对应行数</td></tr><tr><td align="center">:数字</td><td align="center"></td><td>移动到 数字 对应行数</td></tr></tbody></table><h4 id="4-屏幕移动"><a href="#4-屏幕移动" class="headerlink" title="4) 屏幕移动"></a>4) 屏幕移动</h4><table><thead><tr><th align="center">命令</th><th align="center">英文</th><th>功能</th></tr></thead><tbody><tr><td align="center">Ctrl + b</td><td align="center">back</td><td>向上翻页</td></tr><tr><td align="center">Ctrl + f</td><td align="center">forward</td><td>向下翻页</td></tr><tr><td align="center">H</td><td align="center">Head</td><td>屏幕顶部</td></tr><tr><td align="center">M</td><td align="center">Middle</td><td>屏幕中间</td></tr><tr><td align="center">L</td><td align="center">Low</td><td>屏幕底部</td></tr></tbody></table><h3 id="4-2-移动（程序）"><a href="#4-2-移动（程序）" class="headerlink" title="4.2 移动（程序）"></a>4.2 移动（程序）</h3><h4 id="1-段落移动"><a href="#1-段落移动" class="headerlink" title="1) 段落移动"></a>1) 段落移动</h4><ul><li><code>vi</code> 中使用 空行 来区分段落</li><li>在程序开发时，通常 <strong>一段功能相关的代码会写在一起</strong> —— 之间没有空行</li></ul><table><thead><tr><th align="center">命令</th><th>功能</th></tr></thead><tbody><tr><td align="center">{</td><td>上一段</td></tr><tr><td align="center">}</td><td>下一段</td></tr></tbody></table><h4 id="2-括号切换"><a href="#2-括号切换" class="headerlink" title="2) 括号切换"></a>2) 括号切换</h4><ul><li>在程序世界中，<code>()</code>、<code>[]</code>、<code>{}</code> 使用频率很高，而且 <strong>都是成对出现的</strong></li></ul><table><thead><tr><th align="center">命令</th><th>功能</th></tr></thead><tbody><tr><td align="center">%</td><td>括号匹配及切换</td></tr></tbody></table><h4 id="3-标记"><a href="#3-标记" class="headerlink" title="3) 标记"></a>3) 标记</h4><ul><li>在开发时，某一块代码可能<strong>需要稍后处理</strong>，例如：编辑、查看</li><li>此时先使用 <code>m</code> 增加一个标记，这样可以 <strong>在需要时快速地跳转回来</strong> 或者 <strong>执行其他编辑操作</strong></li><li><strong>标记名称</strong> 可以是 <code>a~z</code> 或者 <code>A~Z</code> 之间的任意 <strong>一个</strong> 字母</li><li>添加了标记的 <strong>行如果被删除</strong>，<strong>标记同时被删除</strong></li><li>如果 <strong>在其他行添加了相同名称的标记</strong>，<strong>之前添加的标记也会被替换掉</strong></li></ul><table><thead><tr><th align="center">命令</th><th align="center">英文</th><th>功能</th></tr></thead><tbody><tr><td align="center">mx</td><td align="center">mark</td><td>添加标记 x，x 是 a<del>z 或者 A</del>Z 之间的任意一个字母</td></tr><tr><td align="center">‘x</td><td align="center"></td><td>直接定位到标记 x 所在位置</td></tr></tbody></table><h3 id="4-3-选中文本（可视模式）"><a href="#4-3-选中文本（可视模式）" class="headerlink" title="4.3 选中文本（可视模式）"></a>4.3 选中文本（可视模式）</h3><ul><li>学习 <code>复制</code> 命令前，应该先学会 <strong>怎么样选中 要复制的代码</strong></li><li>在 <code>vi</code> 中要选择文本，需要先使用 <code>Visual</code> 命令切换到 <strong>可视模式</strong></li><li><code>vi</code> 中提供了 <strong>三种</strong> 可视模式，可以方便程序员选择 <strong>选中文本的方式</strong></li><li>按 <code>ESC</code> 可以放弃选中，返回到 <strong>命令模式</strong></li></ul><table><thead><tr><th align="center">命令</th><th>模式</th><th>功能</th></tr></thead><tbody><tr><td align="center">v</td><td>可视模式</td><td>从光标位置开始按照正常模式选择文本</td></tr><tr><td align="center">V</td><td>可视行模式</td><td>选中光标经过的完整行</td></tr><tr><td align="center">Ctrl + v</td><td>可视块模式</td><td>垂直方向选中文本</td></tr></tbody></table><ul><li><strong>可视模式</strong>下，可以和 <strong>移动命令</strong> 连用，例如：<code>ggVG</code> 能够选中所有内容</li></ul><h3 id="4-4-撤销和恢复撤销"><a href="#4-4-撤销和恢复撤销" class="headerlink" title="4.4 撤销和恢复撤销"></a>4.4 撤销和恢复撤销</h3><ul><li>在学习编辑命令之前，先要知道怎样撤销之前一次 <strong>错误的</strong> 编辑动作！</li></ul><table><thead><tr><th align="center">命令</th><th align="center">英文</th><th>功能</th></tr></thead><tbody><tr><td align="center">u</td><td align="center">undo</td><td>撤销上次命令</td></tr><tr><td align="center">CTRL + r</td><td align="center">redo</td><td>恢复撤销的命令</td></tr></tbody></table><h3 id="4-5-删除文本"><a href="#4-5-删除文本" class="headerlink" title="4.5 删除文本"></a>4.5 删除文本</h3><table><thead><tr><th align="center">命令</th><th align="center">英文</th><th>功能</th></tr></thead><tbody><tr><td align="center">x</td><td align="center">cut</td><td>删除光标所在字符，或者选中文字</td></tr><tr><td align="center">d(移动命令)</td><td align="center">delete</td><td>删除移动命令对应的内容</td></tr><tr><td align="center">dd</td><td align="center">delete</td><td>删除光标所在行，可以 ndd 复制多行</td></tr><tr><td align="center">D</td><td align="center">delete</td><td>删除至行尾</td></tr></tbody></table><blockquote><p>提示：如果使用 <strong>可视模式</strong> 已经选中了一段文本，那么无论使用 <code>d</code> 还是 <code>x</code>，都可以删除选中文本</p></blockquote><ul><li>删除命令可以和 <strong>移动命令</strong> 连用，以下是常见的组合命令：</li></ul><pre><code>* dw        # 从光标位置删除到单词末尾* d0        # 从光标位置删除到一行的起始位置* d}        # 从光标位置删除到段落结尾* ndd       # 从光标位置向下连续删除 n 行* d代码行G   # 从光标所在行 删除到 指定代码行 之间的所有代码* d&#39;a       # 从光标所在行 删除到 标记a 之间的所有代码</code></pre><h3 id="4-6-复制、粘贴"><a href="#4-6-复制、粘贴" class="headerlink" title="4.6 复制、粘贴"></a>4.6 复制、粘贴</h3><ul><li><code>vi</code> 中提供有一个 <strong>被复制文本的缓冲区</strong><ul><li><strong>复制</strong> 命令会将选中的文字保存在缓冲区 </li><li><strong>删除</strong> 命令删除的文字会被保存在缓冲区</li><li>在需要的位置，使用 <strong>粘贴</strong> 命令可以将缓冲区的文字插入到光标所在位置</li></ul></li></ul><table><thead><tr><th align="center">命令</th><th align="center">英文</th><th>功能</th></tr></thead><tbody><tr><td align="center">y(移动命令)</td><td align="center">copy</td><td>复制</td></tr><tr><td align="center">yy</td><td align="center">copy</td><td>复制一行，可以 nyy 复制多行</td></tr><tr><td align="center">p</td><td align="center">paste</td><td>粘贴</td></tr></tbody></table><p><strong>提示</strong></p><ul><li>命令 <code>d</code>、<code>x</code> 类似于图形界面的 <strong>剪切操作</strong> —— <code>CTRL + X</code></li><li>命令 <code>y</code> 类似于图形界面的 <strong>复制操作</strong> —— <code>CTRL + C</code></li><li>命令 <code>p</code> 类似于图形界面的 <strong>粘贴操作</strong> —— <code>CTRL + V</code></li><li><code>vi</code> 中的 <strong>文本缓冲区同样只有一个</strong>，如果后续做过 <strong>复制、剪切</strong> 操作，之前缓冲区中的内容会被替换</li></ul><p><strong>注意</strong></p><ul><li><code>vi</code> 中的 <strong>文本缓冲区</strong> 和系统的 <strong>剪贴板</strong> 不是同一个</li><li>所以在其他软件中使用 <code>CTRL + C</code> 复制的内容，不能在 <code>vi</code> 中通过 <code>P</code> 命令粘贴</li><li>可以在 <strong>编辑模式</strong> 下使用 <strong>鼠标右键粘贴</strong></li></ul><h3 id="4-7-替换"><a href="#4-7-替换" class="headerlink" title="4.7 替换"></a>4.7 替换</h3><table><thead><tr><th align="center">命令</th><th align="center">英文</th><th>功能</th><th>工作模式</th></tr></thead><tbody><tr><td align="center">r</td><td align="center">replace</td><td>替换当前字符</td><td>命令模式</td></tr><tr><td align="center">R</td><td align="center">replace</td><td>替换当前行光标后的字符</td><td>替换模式</td></tr></tbody></table><ul><li><code>R</code> 命令可以进入 <strong>替换模式</strong>，替换完成后，按下 <code>ESC</code> 可以回到 <strong>命令模式</strong></li><li><strong>替换命令</strong> 的作用就是不用进入 <strong>编辑模式</strong>，对文件进行 <strong>轻量级的修改</strong></li></ul><h3 id="4-8-缩排和重复执行"><a href="#4-8-缩排和重复执行" class="headerlink" title="4.8 缩排和重复执行"></a>4.8 缩排和重复执行</h3><table><thead><tr><th align="center">命令</th><th>功能</th></tr></thead><tbody><tr><td align="center">&gt;&gt;</td><td>向右增加缩进</td></tr><tr><td align="center">&lt;&lt;</td><td>向左减少缩进</td></tr><tr><td align="center">.</td><td>重复上次命令</td></tr></tbody></table><ul><li><strong>缩排命令</strong> 在开发程序时，<strong>统一增加代码的缩进</strong> 比较有用！<ul><li>一次性 <strong>在选中代码前增加 4 个空格</strong>，就叫做 <strong>增加缩进</strong></li><li>一次性 <strong>在选中代码前删除 4 个空格</strong>，就叫做 <strong>减少缩进</strong></li></ul></li><li>在 <strong>可视模式</strong> 下，缩排命令只需要使用 <strong>一个</strong> <code>&gt;</code> 或者 <code>&lt;</code> </li></ul><blockquote><p>在程序中，<strong>缩进</strong> 通常用来表示代码的归属关系</p><ul><li>前面空格越少，代码的级别越高</li><li>前面空格越多，代码的级别越低</li></ul></blockquote><h3 id="4-9-查找"><a href="#4-9-查找" class="headerlink" title="4.9 查找"></a>4.9 查找</h3><h4 id="常规查找"><a href="#常规查找" class="headerlink" title="常规查找"></a>常规查找</h4><table><thead><tr><th align="center">命令</th><th>功能</th></tr></thead><tbody><tr><td align="center">/str</td><td>查找 str</td></tr></tbody></table><ul><li>查找到指定内容之后，使用 <code>Next</code> 查找下一个出现的位置：<ul><li><code>n</code>: 查找下一个</li><li><code>N</code>: 查找上一个</li></ul></li><li>如果不想看到高亮显示，可以随便查找一个文件中不存在的内容即可</li></ul><h4 id="单词快速匹配"><a href="#单词快速匹配" class="headerlink" title="单词快速匹配"></a>单词快速匹配</h4><table><thead><tr><th align="center">命令</th><th>功能</th></tr></thead><tbody><tr><td align="center">*</td><td>向后查找当前光标所在单词</td></tr><tr><td align="center">#</td><td>向前查找当前光标所在单词</td></tr></tbody></table><ul><li>在开发中，通过单词快速匹配，可以快速看到这个单词在其他什么位置使用过</li></ul><h3 id="4-10-查找并替换"><a href="#4-10-查找并替换" class="headerlink" title="4.10 查找并替换"></a>4.10 查找并替换</h3><ul><li>在 <code>vi</code> 中查找和替换命令需要在 <strong>末行模式</strong> 下执行</li><li>记忆命令格式：</li></ul><pre><code>:%s///g</code></pre><h4 id="1-全局替换"><a href="#1-全局替换" class="headerlink" title="1) 全局替换"></a>1) 全局替换</h4><ul><li><strong>一次性</strong>替换文件中的 <strong>所有出现的旧文本</strong></li><li>命令格式如下：</li></ul><pre><code>:%s/旧文本/新文本/g</code></pre><h4 id="2-可视区域替换"><a href="#2-可视区域替换" class="headerlink" title="2) 可视区域替换"></a>2) 可视区域替换</h4><ul><li><strong>先选中</strong> 要替换文字的 <strong>范围</strong></li><li>命令格式如下：</li></ul><pre><code>:s/旧文本/新文本/g</code></pre><h4 id="3-确认替换"><a href="#3-确认替换" class="headerlink" title="3) 确认替换"></a>3) 确认替换</h4><ul><li>如果把末尾的 <code>g</code> 改成 <code>gc</code> 在替换的时候，会有提示！<strong>推荐使用！</strong></li></ul><pre><code>:%s/旧文本/新文本/gc</code></pre><ol><li><code>y</code> - <code>yes</code> 替换</li><li><code>n</code> - <code>no</code> 不替换</li><li><code>a</code> - <code>all</code> 替换所有</li><li><code>q</code> - <code>quit</code> 退出替换</li><li><code>l</code> - <code>last</code> 最后一个，并把光标移动到行首</li><li><code>^E</code> 向下滚屏</li><li><code>^Y</code> 向上滚屏</li></ol><h3 id="4-11-插入命令"><a href="#4-11-插入命令" class="headerlink" title="4.11 插入命令"></a>4.11 插入命令</h3><ul><li>在 <code>vi</code> 中除了常用的 <code>i</code> 进入 <strong>编辑模式</strong> 外，还提供了以下命令同样可以进入编辑模式：</li></ul><table><thead><tr><th align="center">命令</th><th align="center">英文</th><th>功能</th><th align="center">常用</th></tr></thead><tbody><tr><td align="center">i</td><td align="center">insert</td><td>在当前字符前插入文本</td><td align="center">常用</td></tr><tr><td align="center">I</td><td align="center">insert</td><td>在行首插入文本</td><td align="center">较常用</td></tr><tr><td align="center">a</td><td align="center">append</td><td>在当前字符后添加文本</td><td align="center"></td></tr><tr><td align="center">A</td><td align="center">append</td><td>在行末添加文本</td><td align="center">较常用</td></tr><tr><td align="center">o</td><td align="center"></td><td>在当前行后面插入一空行</td><td align="center">常用</td></tr><tr><td align="center">O</td><td align="center"></td><td>在当前行前面插入一空行</td><td align="center">常用</td></tr></tbody></table><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/004_%E6%8F%92%E5%85%A5%E5%91%BD%E4%BB%A4.png" alt=""></p><h4 id="演练-1-——-编辑命令和数字连用"><a href="#演练-1-——-编辑命令和数字连用" class="headerlink" title="演练 1 —— 编辑命令和数字连用"></a>演练 1 —— 编辑命令和数字连用</h4><ul><li>在开发中，可能会遇到连续输入 <code>N</code> 个同样的字符</li></ul><blockquote><p>在 <code>Python</code> 中有简单的方法，但是其他语言中通常需要自己输入</p></blockquote><ul><li>例如：<code>**********</code> 连续 10 个星号</li></ul><p>要实现这个效果可以在 <strong>命令模式</strong> 下</p><ol><li>输入 <code>10</code>，表示要重复 10 次</li><li>输入 <code>i</code> 进入 <strong>编辑模式</strong></li><li>输入 <code>*</code> 也就是重复的文字</li><li>按下 <code>ESC</code> 返回到 <strong>命令模式</strong>，返回之后 <code>vi</code> 就会把第 <code>2、3</code> 两步的操作重复 <code>10</code> 次</li></ol><blockquote><p>提示：正常开发时，在 <strong>进入编辑模式之前，不要按数字</strong></p></blockquote><h4 id="演练-2-——-利用-可视块-给多行代码增加注释"><a href="#演练-2-——-利用-可视块-给多行代码增加注释" class="headerlink" title="演练 2 —— 利用 可视块 给多行代码增加注释"></a>演练 2 —— 利用 可视块 给多行代码增加注释</h4><ul><li>在开发中，可能会遇到一次性给多行代码 <strong>增加注释</strong> 的情况</li></ul><blockquote><p>在 <code>Python</code> 中，要给代码增加注释，可以在代码前增加一个 <code>#</code></p></blockquote><p>要实现这个效果可以在 <strong>命令模式</strong> 下</p><ol><li>移动到要添加注释的 <strong>第 1 行代码</strong>，按 <code>^</code> 来到行首</li><li>按 <code>CTRL + v</code> 进入 <strong>可视块</strong> 模式</li><li>使用 <code>j</code> 向下连续选中要添加的代码行</li><li>输入 <code>I</code> 进入 <strong>编辑模式</strong>，并在 <strong>行首插入</strong>，注意：一定要使用 <strong>I</strong></li><li>输入 <code>#</code> 也就是注释符号</li><li>按下 <code>ESC</code> 返回到 <strong>命令模式</strong>，返回之后 <code>vi</code> 会在之前选中的每一行代码 <strong>前</strong> 插入 <code>#</code></li></ol><h2 id="05-分屏命令"><a href="#05-分屏命令" class="headerlink" title="05. 分屏命令"></a>05. 分屏命令</h2><ul><li>属于 <code>vi</code> 的高级命令 —— 可以 <strong>同时编辑和查看多个文件</strong></li></ul><h3 id="5-1-末行命令扩展"><a href="#5-1-末行命令扩展" class="headerlink" title="5.1 末行命令扩展"></a>5.1 末行命令扩展</h3><p><strong>末行命令</strong> 主要是针对文件进行操作的：<strong>保存</strong>、<strong>退出</strong>、<strong>保存&amp;退出</strong>、<strong>搜索&amp;替换</strong>、<strong>另存</strong>、<strong>新建</strong>、<strong>浏览文件</strong></p><table><thead><tr><th align="center">命令</th><th align="center">英文</th><th>功能</th></tr></thead><tbody><tr><td align="center">:e .</td><td align="center">edit</td><td>会打开内置的文件浏览器，浏览要当前目录下的文件</td></tr><tr><td align="center">:n 文件名</td><td align="center">new</td><td>新建文件</td></tr><tr><td align="center">:w 文件名</td><td align="center">write</td><td>另存为，但是仍然编辑当前文件，并不会切换文件</td></tr></tbody></table><blockquote><p>提示：切换文件之前，必须保证当前这个文件已经被保存！</p></blockquote><ul><li>已经学习过的 <strong>末行命令</strong>：</li></ul><table><thead><tr><th align="center">命令</th><th align="center">英文</th><th>功能</th></tr></thead><tbody><tr><td align="center">:w</td><td align="center">write</td><td>保存</td></tr><tr><td align="center">:q</td><td align="center">quit</td><td>退出，如果没有保存，不允许退出</td></tr><tr><td align="center">:q!</td><td align="center">quit</td><td>强行退出，不保存退出</td></tr><tr><td align="center">:wq</td><td align="center">write &amp; quit</td><td>保存并退出</td></tr><tr><td align="center">:x</td><td align="center"></td><td>保存并退出</td></tr><tr><td align="center">:%s///gc</td><td align="center"></td><td>确认搜索并替换</td></tr></tbody></table><blockquote><p>在实际开发中，可以使用 <code>w</code> 命令 <strong>阶段性的备份代码</strong></p></blockquote><h3 id="5-2-分屏命令"><a href="#5-2-分屏命令" class="headerlink" title="5.2 分屏命令"></a>5.2 分屏命令</h3><ul><li>使用 <strong>分屏命令</strong>，可以 <strong>同时编辑和查看多个文件</strong></li></ul><table><thead><tr><th align="center">命令</th><th align="center">英文</th><th>功能</th></tr></thead><tbody><tr><td align="center">:sp [文件名]</td><td align="center">split</td><td>横向增加分屏</td></tr><tr><td align="center">:vsp [文件名]</td><td align="center">vertical split</td><td>纵向增加分屏</td></tr></tbody></table><h4 id="1-切换分屏窗口"><a href="#1-切换分屏窗口" class="headerlink" title="1) 切换分屏窗口"></a>1) 切换分屏窗口</h4><blockquote><p>分屏窗口都是基于 <code>CTRL + W</code> 这个快捷键的，<code>w</code> 对应的英文单词是 <code>window</code></p></blockquote><table><thead><tr><th align="center">命令</th><th align="center">英文</th><th>功能</th></tr></thead><tbody><tr><td align="center">w</td><td align="center">window</td><td>切换到下一个窗口</td></tr><tr><td align="center">r</td><td align="center">reverse</td><td>互换窗口</td></tr><tr><td align="center">c</td><td align="center">close</td><td>关闭当前窗口，但是不能关闭最后一个窗口</td></tr><tr><td align="center">q</td><td align="center">quit</td><td>退出当前窗口，如果是最后一个窗口，则关闭 vi</td></tr><tr><td align="center">o</td><td align="center">other</td><td>关闭其他窗口</td></tr></tbody></table><h4 id="2-调整窗口大小"><a href="#2-调整窗口大小" class="headerlink" title="2) 调整窗口大小"></a>2) 调整窗口大小</h4><blockquote><p>分屏窗口都是基于 <code>CTRL + W</code> 这个快捷键的，<code>w</code> 对应的英文单词是 <code>window</code></p></blockquote><table><thead><tr><th align="center">命令</th><th align="center">英文</th><th>功能</th></tr></thead><tbody><tr><td align="center">+</td><td align="center"></td><td>增加窗口高度</td></tr><tr><td align="center">-</td><td align="center"></td><td>减少窗口高度</td></tr><tr><td align="center">&gt;</td><td align="center"></td><td>增加窗口宽度</td></tr><tr><td align="center">&lt;</td><td align="center"></td><td>减少窗口宽度</td></tr><tr><td align="center">=</td><td align="center"></td><td>等分窗口大小</td></tr></tbody></table><blockquote><p>调整窗口宽高的命令可以和数字连用，例如：<code>5 CTRL + W +</code> 连续 5 次增加高度</p></blockquote><h2 id="06-常用命令速查图"><a href="#06-常用命令速查图" class="headerlink" title="06. 常用命令速查图"></a>06. 常用命令速查图</h2><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/vim.png" alt=""></p><h3 id="vimrc"><a href="#vimrc" class="headerlink" title="vimrc"></a>vimrc</h3><ul><li><code>vimrc</code> 是 <code>vim</code> 的配置文件，可以设置 vim 的配置，包括：<strong>热键</strong>、<strong>配色</strong>、<strong>语法高亮</strong>、<strong>插件</strong> 等</li><li><code>Linux</code> 中 <code>vimrc</code> 有两个位置，<strong>家目录下的配置文件优先级更高</strong></li></ul><pre><code>/etc/vim/vimrc~/.vimrc</code></pre><ul><li>常用的插件有：<ul><li>代码补全</li><li>代码折叠</li><li>搜索</li><li>Git 集成</li><li>……</li></ul></li><li>网上有很多高手已经配置好的针对 <code>python</code> 开发的 <code>vimrc</code> 文件，可以下载过来直接使用，或者等大家多 <code>Linux</code> 比较熟悉后，再行学习！</li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu的虚拟机设置</title>
      <link href="/2020/04/04/20200404-163009/"/>
      <url>/2020/04/04/20200404-163009/</url>
      
        <content type="html"><![CDATA[<h2 id="VM的安装"><a href="#VM的安装" class="headerlink" title="VM的安装"></a>VM的安装</h2><ul><li>网上软件+破解秘钥</li></ul><h2 id="Ubuntu的安装"><a href="#Ubuntu的安装" class="headerlink" title="Ubuntu的安装"></a>Ubuntu的安装</h2><p>待续…</p><h2 id="系统软件更新"><a href="#系统软件更新" class="headerlink" title="系统软件更新"></a>系统软件更新</h2><h3 id="更新源"><a href="#更新源" class="headerlink" title="更新源"></a>更新源</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 进入目录</span><span class="token function">cd</span> /etc/apt/<span class="token comment" spellcheck="true"># 备份文件</span><span class="token function">cp</span> sources.list sources.list.backup<span class="token comment" spellcheck="true"># 修改文件</span><span class="token function">sudo</span> gedit sources.list<span class="token comment" spellcheck="true"># 将文件里面的东西删除，且将下面链接中的文字复制进去</span><span class="token comment" spellcheck="true"># 保存关闭</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> update<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> upgrade<span class="token comment" spellcheck="true"># 如果出现锁的问题，看下面！！</span></code></pre><p><a href="https://mirror.tuna.tsinghua.edu.cn/help/ubuntu/" target="_blank" rel="noopener">清华大学镜像</a></p><h3 id="全屏铺满-与主机互通"><a href="#全屏铺满-与主机互通" class="headerlink" title="全屏铺满|与主机互通"></a>全屏铺满|与主机互通</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> open-vm*</code></pre><h2 id="常见设置"><a href="#常见设置" class="headerlink" title="常见设置"></a>常见设置</h2><h3 id="1-修改主机名"><a href="#1-修改主机名" class="headerlink" title="1. 修改主机名"></a>1. 修改主机名</h3><p>在Ubuntu系统中，快速查看主机名有多种方法： </p><p>其一：打开一个GNOME终端窗口，在命令提示符中可以看到主机名，主机名通常位于“@”符号后； </p><p><strong>如下图所示： test表示用户名 machine表示主机名</strong> </p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200404195220.png" alt=""></p><p>其二:在终端窗口中输入命令：hostname可以查看到当前主机的主机名。</p><pre class=" language-bash"><code class="language-bash">test@machine:桌面$ <span class="token function">hostname</span>machine</code></pre><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200404195742.png" alt=""></p><p>永久修改主机名：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;在Ubuntu系统中永久修改主机名也比较简单。主机名存放在<strong>/etc/hostname</strong>文件中，修改主机名时，编辑hostname文件，在文件中输入新的主机名并保存该文件即可。重启系统后，参照上面介绍的快速查看主机名的办法来确认主机名有没有修改成功。 </p><p>&nbsp;&nbsp;&nbsp;&nbsp; 值的指出的是，在其它Linux发行版中，并非都存在/etc/hostname文件。如Fedora发行版将主机名存放在/etc/sysconfig/network文件中。所以，修改主机名时应注意区分是哪种Linux发行版。 </p><p>第一步：</p><pre class=" language-bash"><code class="language-bash">test@machine:桌面$ <span class="token function">sudo</span> vim /etc/hostname</code></pre><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200404200052.png" alt=""></p><p><strong>第二步：修改/etc/hosts配置文件（可选）</strong></p><p> /etc/hosts存放的是域名与ip的对应关系，域名与主机名没有任何关系，你可以为任何一个IP指定任意一个名字。 </p><pre class=" language-bash"><code class="language-bash">test@machine:桌面$ <span class="token function">sudo</span> vim /etc/hosts</code></pre><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200408231920.png" alt=""></p><h3 id="2-dash-gt-bash"><a href="#2-dash-gt-bash" class="headerlink" title="2. dash -&gt; bash"></a>2. dash -&gt; bash</h3><p><code>linux shell</code>报错<code>Syntax error: Bad for loop variable:</code></p><pre class=" language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment" spellcheck="true">################################</span><span class="token comment" spellcheck="true"># 9x9 multiplication</span><span class="token comment" spellcheck="true">################################</span><span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">))</span></span><span class="token keyword">do</span>    <span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">))</span></span>    <span class="token keyword">do</span>        <span class="token keyword">echo</span> -ne <span class="token string">" <span class="token variable">${j}</span> * <span class="token variable">${i}</span> = <span class="token variable"><span class="token variable">$((</span> i<span class="token operator">*</span>j <span class="token variable">))</span></span> \t "</span>    <span class="token keyword">done</span><span class="token keyword">echo</span><span class="token keyword">done</span></code></pre><p>执行：sh test.sh 报下面的错误． </p><p><code>Syntax error: Bad for loop variable</code></p><p>因为Ubuntu为了加快开机速度，用dash代替了传统的bash，所以我们这样执行就没问题．</p><pre class=" language-bash"><code class="language-bash"><span class="token function">bash</span> test.sh</code></pre><p>那如果我们只想用sh test.sh 这样的方式执行，怎么办呢？</p><p>解决方法：取消dash</p><pre class=" language-bash"><code class="language-bash">dpkg-reconfigure dash</code></pre><p>出现弹框，选择NO</p><h3 id="3-短路径显示"><a href="#3-短路径显示" class="headerlink" title="3. 短路径显示"></a>3. 短路径显示</h3><p>平时我们使用linux终端命令行的时候，常常会被一个问题困扰，那就是文件路径过长，有时候甚至超过了一行，这样看起来非常别扭，其实只要两步就可以解决这个问题： </p><pre class=" language-bash"><code class="language-bash">test@machine:桌面$ vim ~/.bashrc</code></pre><p>将上面这行代码中的小写w改为大写的W，保存退出(wq) </p><p>vim的查找指令： </p><pre class=" language-bash"><code class="language-bash">:/PS1    </code></pre><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200404200427.png" alt=""></p><pre class=" language-bash"><code class="language-bash"> <span class="token function">source</span> .bashrc </code></pre><p>完成上面两步操作之后，重新进入到一个目录，此时在终端下只显示当前文件所在目录名称。 </p><p>\w ：完整的工作目录名称。家目录会以 ~代替</p><p>\W ：利用basename取得工作目录名称，所以只会列出最后一个目录</p><h3 id="4-vim配置"><a href="#4-vim配置" class="headerlink" title="4. vim配置"></a>4. vim配置</h3><p>Vim 的全局配置一般在<code>/etc/vim/vimrc</code>或者<code>/etc/vimrc</code>，对所有用户生效。用户个人的配置在<code>~/.vimrc</code>。</p><p>如果只对单次编辑启用某个配置项，可以在命令模式下，先输入一个冒号，再输入配置。举例来说，<code>set number</code>这个配置可以写在<code>.vimrc</code>里面，也可以在命令模式输入。</p><p><a href="https://www.ruanyifeng.com/blog/2018/09/vimrc.html" target="_blank" rel="noopener">Vim 配置入门阮一峰</a></p><h3 id="5-apt-get锁的问题"><a href="#5-apt-get锁的问题" class="headerlink" title="5.  apt-get锁的问题"></a>5.  apt-get锁的问题</h3><p>无法获得锁 /var/lib/apt/lists/lock - open (11: 资源暂时不可用)</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">apt-get</span> upgrade<span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># E: 无法获得锁 /var/lib/apt/lists/lock - open (11: 资源暂时不可用)</span><span class="token comment" spellcheck="true"># E: 无法对目录 /var/lib/apt/lists/ 加锁</span><span class="token comment" spellcheck="true"># E: 无法获得锁 /var/lib/dpkg/lock - open (11: 资源暂时不可用)</span><span class="token comment" spellcheck="true"># E: 无法锁定管理目录(/var/lib/dpkg/)，是否有其他进程正占用它？</span></code></pre><p>出现这个问题的原因可能是有另外一个程序正在运行，由于它在运行时，会占用软件源更新时的系统锁（以下称“系统更新锁”，此锁文件在“/var/lib/apt/lists/”目录下），而当有新的apt-get进程生成时，就会因为得不到系统更新锁而出现”E: 无法获得锁 /var/lib/apt/lists/lock - open (11: Resource temporarily unavailable)”错误提示！</p><p>而导致资源被锁的原因，可能是上次安装时没正常完成，而导致出现此状况。</p><p>因此，我们只要将原先的apt-get进程杀死，从新激活新的apt-get进程，就可以让新的软件管理器正常工作了</p><p>方法一：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">ps</span> -e<span class="token operator">|</span><span class="token function">grep</span> apt</code></pre><p>结果：</p><pre class=" language-bash"><code class="language-bash">11669 ?        00:00:02 aptd25379 ?        00:00:00 update-apt-xapi</code></pre><p>执行kill指令</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">kill</span> 25379<span class="token function">sudo</span> <span class="token function">apt-get</span> update</code></pre><p>方法二：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">rm</span> /var/lib/apt/lists/lock<span class="token function">sudo</span> <span class="token function">rm</span> /var/lib/dpkg/lock</code></pre><h3 id="6-关于Linux中使用vim打开文件出现-M的解决方法"><a href="#6-关于Linux中使用vim打开文件出现-M的解决方法" class="headerlink" title="6. 关于Linux中使用vim打开文件出现^M的解决方法"></a>6. 关于Linux中使用vim打开文件出现^M的解决方法</h3><p>在linux下，不可避免的会用VIM打开一些windows下编辑过的文本文件。我们会发现文件的每行结尾都会有一个^M符号，这是因为 DOS下的编辑器和Linux编辑器对文件行末的回车符处理不一致：</p><p>  对于回车符的定义：<br>       windows：0D0A<br>       unix\linux: 0A<br>       MAC: 0D</p><p>解决：</p><p>在终端下敲命令： </p><pre class=" language-bansh"><code class="language-bansh">$ dos2unix filename</code></pre><p> 直接转换成unix格式，就OK了</p><p>Ubuntu下默认没有安装dos2unix工具，而且也没有一个叫这个名字的工具。但是有一个替代工具——tofrodos , 下面就说一下它的安装和使用： </p><p>安装tofrodos :</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> tofrodos</code></pre><p>实际上它安装了两个工具：todos(相当于unix2dos)，和fromdos(相当于dos2unix) </p><pre class=" language-bash"><code class="language-bash">fromdos filename</code></pre>]]></content>
      
      
      <categories>
          
          <category> 软件安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> VM </tag>
            
            <tag> 系统安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Yolov1论文翻译中文版本</title>
      <link href="/2020/04/04/20200404-104201/"/>
      <url>/2020/04/04/20200404-104201/</url>
      
        <content type="html"><![CDATA[<h1 id="You-Only-Look-Once-Unified-Real-Time-Object-Detection"><a href="#You-Only-Look-Once-Unified-Real-Time-Object-Detection" class="headerlink" title="You Only Look Once: Unified, Real-Time Object Detection"></a>You Only Look Once: Unified, Real-Time Object Detection</h1><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>&nbsp;&nbsp;&nbsp;&nbsp; 我们提出了YOLO，一种新的目标检测方法。以前的目标检测工作重新利用分类器来执行检测。相反，我们将目标检测框架看作回归问题从空间上分割边界框和相关的类别概率。单个神经网络在一次评估中直接从完整图像上预测边界框和类别概率。由于整个检测流水线是单一网络，因此可以直接对检测性能进行端到端的优化。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 我们的统一架构非常快。我们的基础YOLO模型以45帧/秒的速度实时处理图像。网络的一个较小版本，快速YOLO，每秒能处理惊人的155帧，同时实现其它实时检测器两倍的mAP。与最先进的检测系统相比，YOLO产生了更多的定位误差，但不太可能在背景上的预测假阳性。最后，YOLO学习目标非常通用的表示。当从自然图像到艺术品等其它领域泛化时，它都优于其它检测方法，包括DPM和R-CNN。</p><h2 id="1-引言"><a href="#1-引言" class="headerlink" title="1. 引言"></a>1. 引言</h2><p>&nbsp;&nbsp;&nbsp;&nbsp; 人们瞥一眼图像，立即知道图像中的物体是什么，它们在哪里以及它们如何相互作用。人类的视觉系统是快速和准确的，使我们能够执行复杂的任务，如驾驶时没有多少有意识的想法。快速，准确的目标检测算法可以让计算机在没有专门传感器的情况下驾驶汽车，使辅助设备能够向人类用户传达实时的场景信息，并表现出对一般用途和响应机器人系统的潜力。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 目前的检测系统重用分类器来执行检测。为了检测目标，这些系统为该目标提供一个分类器，并在不同的位置对其进行评估，并在测试图像中进行缩放。像可变形部件模型（DPM）这样的系统使用滑动窗口方法，其分类器在整个图像的均匀间隔的位置上运行[10]。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 最近的方法，如R-CNN使用区域提出方法首先在图像中生成潜在的边界框，然后在这些提出的框上运行分类器。在分类之后，后处理用于细化边界框，消除重复的检测，并根据场景中的其它目标重新定位边界框[13]。这些复杂的流程很慢，很难优化，因为每个单独的组件都必须单独进行训练。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 我们将目标检测重新看作单一的回归问题，直接从图像像素到边界框坐标和类概率。使用我们的系统，您只需要在图像上看一次（YOLO），以预测出现的目标和位置。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; YOLO很简单：参见图1。单个卷积网络同时预测这些盒子的多个边界框和类概率。YOLO在全图像上训练并直接优化检测性能。这种统一的模型比传统的目标检测方法有一些好处。</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200404105307.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp; <strong>图1：YOLO检测系统。</strong>用YOLO处理图像简单直接。我们的系统（1）将输入图像调整为448×448，（2）在图像上运行单个卷积网络，以及（3）由模型的置信度对所得到的检测进行阈值处理。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 首先，YOLO速度非常快。由于我们将检测视为回归问题，所以我们不需要复杂的流程。测试时我们在一张新图像上简单的运行我们的神经网络来预测检测。我们的基础网络以每秒45帧的速度运行，在Titan X GPU上没有批处理，快速版本运行速度超过150fps。这意味着我们可以在不到25毫秒的延迟内实时处理流媒体视频。此外，YOLO实现了其它实时系统两倍以上的平均精度。关于我们的系统在网络摄像头上实时运行的演示，请参阅我们的项目网页：<a href="http://pjreddie.com/yolo/" target="_blank" rel="noopener">http://pjreddie.com/yolo/</a>。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 其次，YOLO在进行预测时，会对图像进行全局推理。与基于滑动窗口和区域提出的技术不同，YOLO在训练期间和测试时会看到整个图像，所以它隐式地编码了关于类的上下文信息以及它们的外观。快速R-CNN是一种顶级的检测方法[14]，因为它看不到更大的上下文，所以在图像中会将背景块误检为目标。与快速R-CNN相比，YOLO的背景误检数量少了一半。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 第三，YOLO学习目标的泛化表示。当在自然图像上进行训练并对艺术作品进行测试时，YOLO大幅优于DPM和R-CNN等顶级检测方法。由于YOLO具有高度泛化能力，因此在应用于新领域或碰到意外的输入时不太可能出故障。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; YOLO在精度上仍然落后于最先进的检测系统。虽然它可以快速识别图像中的目标，但它仍在努力精确定位一些目标，尤其是小的目标。我们在实验中会进一步检查这些权衡。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 我们所有的训练和测试代码都是开源的。各种预训练模型也都可以下载。</p><h2 id="2-统一检测"><a href="#2-统一检测" class="headerlink" title="2. 统一检测"></a>2. 统一检测</h2><p>&nbsp;&nbsp;&nbsp;&nbsp; 我们将目标检测的单独组件集成到单个神经网络中。我们的网络使用整个图像的特征来预测每个边界框。它还可以同时预测一张图像中的所有类别的所有边界框。这意味着我们的网络全面地推理整张图像和图像中的所有目标。YOLO设计可实现端到端训练和实时的速度，同时保持较高的平均精度。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 我们的系统将输入图像分成$S$ x $S$的网格。如果一个目标的中心落入一个网格单元中，该网格单元负责检测该目标。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 每个网格单元预测这些盒子的B个边界框和置信度分数。这些置信度分数反映了该模型对盒子是否包含目标的信心，以及它预测盒子的准确程度。在形式上，我们将置信度定义为$Pr(Object)∗IOU^{truth}_{pred}$。如果该单元格中不存在目标，则置信度分数应为零。否则，我们希望置信度分数等于预测框与真实值之间联合部分的交集（IOU）。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 每个边界框包含5个预测：x，y，w，h和置信度。(x，y)坐标表示边界框相对于网格单元边界框的中心。宽度和高度是相对于整张图像预测的。最后，置信度预测表示预测框与实际边界框之间的IOU。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;每个网格单元还预测CC个条件类别概率$Pr(Classi|Object)$。这些概率以包含目标的网格单元为条件。每个网格单元我们只预测的一组类别概率，而不管边界框的的数量B是多少。</p><p>在测试时，我们乘以条件类概率和单个盒子的置信度预测，</p><p>$Pr(Classi|Object)∗Pr(Object)∗IOU^{truth}_{pred}=Pr(Class_{i})∗IOU^{truth}_{pred}$</p><p>为了在Pascal VOC上评估YOLO，我们使用S=7，B=2。Pascal VOC有20个标注类，所以C=20。我们最终的预测是7×7×30的张量。</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200404105915.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp; <strong>模型。</strong> 我们的系统将检测建模为回归问题。它将图像分成S×S的网格，并且每个网格单元预测B个边界框，这些边界框的置信度以及C个类别概率。这些预测被编码为S×S×(B∗5+C)的张量。</p><h3 id="2-1-网络设计"><a href="#2-1-网络设计" class="headerlink" title="2.1. 网络设计"></a>2.1. 网络设计</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;我们将此模型作为卷积神经网络来实现，并在Pascal VOC检测数据集[9]上进行评估。网络的初始卷积层从图像中提取特征，而全连接层预测输出概率和坐标。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;我们的网络架构受到GoogLeNet图像分类模型的启发[34]。我们的网络有24个卷积层，后面是2个全连接层。我们只使用1×1降维层，后面是3×3卷积层，这与Lin等人[22]类似，而不是GoogLeNet使用的Inception模块。完整的网络如图3所示。</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200404110013.png" alt=""></p><p><strong>&nbsp;&nbsp;&nbsp;&nbsp;图3：架构。</strong>我们的检测网络有24个卷积层，其次是2个全连接层。交替1×1卷积层减少了前面层的特征空间。我们在ImageNet分类任务上以一半的分辨率（224×224的输入图像）预训练卷积层，然后将分辨率加倍来进行检测。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;我们还训练了快速版本的YOLO，旨在推动快速目标检测的界限。快速YOLO使用具有较少卷积层（9层而不是24层）的神经网络，在这些层中使用较少的滤波器。除了网络规模之外，YOLO和快速YOLO的所有训练和测试参数都是相同的。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;我们网络的最终输出是7×7×30的预测张量。</p><h3 id="2-2-训练"><a href="#2-2-训练" class="headerlink" title="2.2. 训练"></a>2.2. 训练</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;我们在ImageNet 1000类竞赛数据集[30]上预训练我们的卷积图层。对于预训练，我们使用图3中的前20个卷积层，接着是平均池化层和全连接层。我们对这个网络进行了大约一周的训练，并且在ImageNet 2012验证集上获得了单一裁剪图像88%的<code>top-5</code>准确率，与Caffe模型池中的GoogLeNet模型相当。我们使用Darknet框架进行所有的训练和推断[26]。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;然后我们转换模型来执行检测。Ren等人表明，预训练网络中增加卷积层和连接层可以提高性能[29]。按照他们的例子，我们添加了四个卷积层和两个全连接层，并且具有随机初始化的权重。检测通常需要细粒度的视觉信息，因此我们将网络的输入分辨率从224×224变为448×448。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;我们的最后一层预测类概率和边界框坐标。我们通过图像宽度和高度来规范边界框的宽度和高度，使它们落在0和1之间。我们将边界框x和y坐标参数化为特定网格单元位置的偏移量，所以它们边界也在0和1之间。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;我们对最后一层使用线性激活函数，所有其它层使用下面的漏泄修正线性激活：</p><p>​                                                 $ϕ(x)= \begin{cases} x,&amp; \text{ if $x$ &gt;0} \\ 0.1x, &amp; \text{otherwise} \end{cases}$</p><p>&nbsp;&nbsp;&nbsp;&nbsp;我们优化了模型输出中的平方和误差。我们使用平方和误差，因为它很容易进行优化，但是它并不完全符合我们最大化平均精度的目标。分类误差与定位误差的权重是一样的，这可能并不理想。另外，在每张图像中，许多网格单元不包含任何对象。这将这些单元格的“置信度”分数推向零，通常压倒了包含目标的单元格的梯度。这可能导致模型不稳定，从而导致训练早期发散。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;为了改善这一点，我们增加了边界框坐标预测损失，并减少了不包含目标边界框的置信度预测损失。我们使用两个参数$λ_{coord}$和$λ_{noobj}$来完成这个工作。我们设置$λ_{coord}=5$和$λ_{noord}=.5$。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;平方和误差也可以在大盒子和小盒子中同样加权误差。我们的错误指标应该反映出，大盒子小偏差的重要性不如小盒子小偏差的重要性。为了部分解决这个问题，我们直接预测边界框宽度和高度的平方根，而不是宽度和高度。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;YOLO每个网格单元预测多个边界框。在训练时，每个目标我们只需要一个边界框预测器来负责。我们指定一个预测器“负责”根据哪个预测与真实值之间具有当前最高的IOU来预测目标。这导致边界框预测器之间的专业化。每个预测器可以更好地预测特定大小，方向角，或目标的类别，从而改善整体召回率。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;在训练期间，我们优化以下多部分损失函数：</p><p>$$<br>\begin{align}<br>\lambda{coord} &amp; \sum\limits_{i=0}^{s^2}  \sum\limits_{j=0}^{B} \mathbb{1}_{i,j}^{obj}[(x_{i} - \hat{x}_{i})^2 + (y_{i} -\hat{y}_{i})^2]  \\\<br>&amp;+ \lambda{coord} \sum\limits_{i=0}^{s^2}  \sum\limits_{j=0}^{B} \mathbb{1}_{i,j}^{obj}[(\sqrt{w_{i}} - \sqrt{\hat{w}_{i}})^2 + \sqrt{h_{i}} - \sqrt{\hat{h}_{i}})^2]  \\\<br>&amp;+ \sum\limits_{i=0}^{s^2}\sum\limits_{j=0}^{B}\mathbb{1}_{i,j}^{obj}(C_{i} - \hat{C_{i}})^2 \\\<br>&amp;+  \lambda_{noobj}\sum\limits_{i=0}^{s^2}\sum\limits_{j=0}^{B}\mathbb{1}_{i,j}^{obj}(C_{i} - \hat{C_{i}})^2 \\\<br>&amp;+ \sum\limits_{i=0}^{s^2}\mathbb{1}_{i}^{obj} \sum\limits_{c\in classes}(p_{i}(c) - \hat{p}_{i}(c))^2<br>\end{align}<br>$$</p><p>&nbsp;&nbsp;&nbsp;&nbsp;其中$1^{obj}_{i}$表示目标是否出现在网格单元ii中，$1^{obj}_{ij}$表示网格单元i中的第j个边界框预测器“负责”该预测 </p><p>&nbsp;&nbsp;&nbsp;&nbsp;注意，如果目标存在于该网格单元中（前面讨论的条件类别概率），则损失函数仅惩罚分类错误。如果预测器“负责”实际边界框（即该网格单元中具有最高IOU的预测器），则它也仅惩罚边界框坐标错误。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;我们对Pascal VOC 2007和2012的训练和验证数据集进行了大约135个迭代周期的网络训练。在Pascal VOC 2012上进行测试时，我们的训练包含了Pascal VOC 2007的测试数据。在整个训练过程中，我们使用了64的批大小，0.9的动量和0.0005的衰减。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;我们的学习率方案如下：对于第一个迭代周期，我们慢慢地将学习率从$10^{−3}$提高到$10^{−2}$。如果我们从高学习率开始，我们的模型往往会由于不稳定的梯度而发散。我们继续以$10^{−2}$的学习率训练75个迭代周期，然后用$10^{−3}$的学习率训练30个迭代周期，最后用$10^{−4}$的学习率训练30个迭代周期。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;为了避免过度拟合，我们使用丢弃和大量的数据增强。在第一个连接层之后，丢弃层使用=.5的比例，防止层之间的互相适应[18]。对于数据增强，我们引入高达原始图像20%大小的随机缩放和转换。我们还在HSV色彩空间中使用高达1.5的因子来随机调整图像的曝光和饱和度。</p><h3 id="2-3-推断"><a href="#2-3-推断" class="headerlink" title="2.3. 推断"></a>2.3. 推断</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;就像在训练中一样，预测测试图像的检测只需要一次网络评估。在Pascal VOC上，每张图像上网络预测98个边界框和每个框的类别概率。YOLO在测试时非常快，因为它只需要一次网络评估，不像基于分类器的方法。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;网格设计强化了边界框预测中的空间多样性。通常很明显一个目标落在哪一个网格单元中，而网络只能为每个目标预测一个边界框。然而，一些大的目标或靠近多个网格单元边界的目标可以被多个网格单元很好地定位。非极大值抑制可以用来修正这些多重检测。对于R-CNN或DPM而言，性能不是关键的，非最大抑制会增加<code>2−3%</code>的mAP。</p><h3 id="2-4-YOLO的限制"><a href="#2-4-YOLO的限制" class="headerlink" title="2.4. YOLO的限制"></a>2.4. YOLO的限制</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;YOLO对边界框预测强加空间约束，因为每个网格单元只预测两个盒子，只能有一个类别。这个空间约束限制了我们的模型可以预测的邻近目标的数量。我们的模型与群组中出现的小物体（比如鸟群）进行斗争。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;由于我们的模型学习从数据中预测边界框，因此它很难泛化到新的、不常见的方向比或配置的目标。我们的模型也使用相对较粗糙的特征来预测边界框，因为我们的架构具有来自输入图像的多个下采样层。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;最后，当我们训练一个近似检测性能的损失函数时，我们的损失函数会同样的对待小边界框与大边界框的误差。大边界框的小误差通常是良性的，但小边界框的小误差对IOU的影响要大得多。我们的主要错误来源是不正确的定位。</p><h3 id="3-与其它检测系统的比较"><a href="#3-与其它检测系统的比较" class="headerlink" title="3. 与其它检测系统的比较"></a>3. 与其它检测系统的比较</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;目标检测是计算机视觉中的核心问题。检测流程通常从输入图像上（Haar [25]，SIFT [23]，HOG [4]，卷积特征[6]）提取一组鲁棒特征开始。然后，分类器[36,21,13,10]或定位器[1,32]被用来识别特征空间中的目标。这些分类器或定位器在整个图像上或在图像中的一些子区域上以滑动窗口的方式运行[35,15,39]。我们将YOLO检测系统与几种顶级检测框架进行比较，突出了关键的相似性和差异性。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<strong>可变形部件模型。</strong>可变形零件模型（DPM）使用滑动窗口方法进行目标检测[10]。DPM使用不相交的流程来提取静态特征，对区域进行分类，预测高评分区域的边界框等。我们的系统用单个卷积神经网络替换所有这些不同的部分。网络同时进行特征提取，边界框预测，非极大值抑制和上下文推理。代替静态特征，网络内嵌地训练特征并为检测任务优化它们。我们的统一架构导致了比DPM更快，更准确的模型。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<strong>R-CNN。</strong>R-CNN及其变种使用区域提出而不是滑动窗口来查找图像中的目标。选择性搜索[35]产生潜在的边界框，卷积网络提取特征，SVM对边界框进行评分，线性模型调整边界框，非极大值抑制消除重复检测。这个复杂流程的每个阶段都必须独立地进行精确调整，所得到的系统非常慢，测试时每张图像需要超过40秒[14]。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;YOLO与R-CNN有一些相似之处。每个网格单元提出潜在的边界框并使用卷积特征对这些框进行评分。但是，我们的系统对网格单元提出进行了空间限制，这有助于缓解对同一目标的多次检测。我们的系统还提出了更少的边界框，每张图像只有98个，而选择性搜索则只有2000个左右。最后，我们的系统将这些单独的组件组合成一个单一的，共同优化的模型。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<strong>其它快速检测器。</strong>快速和更快的R-CNN通过共享计算和使用神经网络替代选择性搜索来提出区域加速R-CNN框架[14]，[28]。虽然它们提供了比R-CNN更快的速度和更高的准确度，但两者仍然不能达到实时性能。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;许多研究工作集中在加快DPM流程上[31][38] [5]。它们加速HOG计算，使用级联，并将计算推动到GPU上。但是，实际上只有30Hz的DPM [31]可以实时运行。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;YOLO不是试图优化大型检测流程的单个组件，而是完全抛弃流程，被设计为快速检测。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;像人脸或行人等单类别的检测器可以高度优化，因为他们必须处理更少的变化[37]。YOLO是一种通用的检测器，可以学习同时检测多个目标。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<strong>Deep MultiBox。</strong>与R-CNN不同，Szegedy等人训练了一个卷积神经网络来预测感兴趣区域[8]，而不是使用选择性搜索。MultiBox还可以通过用单类预测替换置信度预测来执行单目标检测。然而，MultiBox无法执行通用的目标检测，并且仍然只是一个较大的检测流程中的一部分，需要进一步的图像块分类。YOLO和MultiBox都使用卷积网络来预测图像中的边界框，但是YOLO是一个完整的检测系统。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<strong>OverFeat。</strong>Sermanet等人训练了一个卷积神经网络来执行定位，并使该定位器进行检测[32]。OverFeat高效地执行滑动窗口检测，但它仍然是一个不相交的系统。OverFeat优化了定位，而不是检测性能。像DPM一样，定位器在进行预测时只能看到局部信息。OverFeat不能推断全局上下文，因此需要大量的后处理来产生连贯的检测。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<strong>MultiGrasp。</strong>我们的工作在设计上类似于Redmon等[27]的抓取检测。我们对边界框预测的网格方法是基于MultiGrasp系统抓取的回归分析。然而，抓取检测比目标检测任务要简单得多。MultiGrasp只需要为包含一个目标的图像预测一个可以抓取的区域。不必估计目标的大小，位置或目标边界或预测目标的类别，只找到适合抓取的区域。YOLO预测图像中多个类别的多个目标的边界框和类别概率。</p><h2 id="4-实验"><a href="#4-实验" class="headerlink" title="4. 实验"></a>4. 实验</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;首先，我们在PASCAL VOC 2007上比较YOLO和其它的实时检测系统。为了理解YOLO和R-CNN变种之间的差异，我们探索了YOLO和R-CNN性能最高的版本之一Fast R-CNN[14]在VOC 2007上错误率。根据不同的误差曲线，我们显示YOLO可以用来重新评估Fast R-CNN检测，并减少背景假阳性带来的错误，从而显著提升性能。我们还展示了在VOC 2012上的结果，并与目前最先进的方法比较了mAP。最后，在两个艺术品数据集上我们显示了YOLO可以比其它检测器更好地泛化到新领域。</p><h3 id="4-1-与其它实时系统的比较"><a href="#4-1-与其它实时系统的比较" class="headerlink" title="4.1. 与其它实时系统的比较"></a>4.1. 与其它实时系统的比较</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;目标检测方面的许多研究工作都集中在快速制定标准检测流程上[5]，[38]，[31]，[14]，[17]，[28]。然而，只有Sadeghi等实际上产生了一个实时运行的检测系统（每秒30帧或更好）[31]。我们将YOLO与DPM的GPU实现进行了比较，其在30Hz或100Hz下运行。虽然其它的努力没有达到实时性的里程碑，我们也比较了它们的相对mAP和速度来检查目标检测系统中精度——性能权衡。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;快速YOLO是PASCAL上最快的目标检测方法；据我们所知，它是现有的最快的目标检测器。具有52.7%52.7%的mAP，实时检测的精度是以前工作的两倍以上。YOLO将mAP推到63.4%63.4%的同时保持了实时性能。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;我们还使用VGG-16训练YOLO。这个模型比YOLO更准确，但也比它慢得多。对于依赖于VGG-16的其它检测系统来说，它是比较有用的，但由于它比实时的YOLO更慢，本文的其它部分将重点放在我们更快的模型上。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;最快的DPM可以在不牺牲太多mAP的情况下有效地加速DPM，但仍然会将实时性能降低2倍[38]。与神经网络方法相比，DPM相对低的检测精度也受到限制。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;减去R的R-CNN用静态边界框提出取代选择性搜索[20]。虽然速度比R-CNN更快，但仍然不能实时，并且由于没有好的边界框提出，准确性受到了严重影响。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;快速R-CNN加快了R-CNN的分类阶段，但是仍然依赖选择性搜索，每张图像需要花费大约2秒来生成边界框提出。因此，它具有很高的mAP，但是0.50的fps仍离实时性很远。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;最近更快的R-CNN用神经网络替代了选择性搜索来提出边界框，类似于Szegedy等[8]。在我们的测试中，他们最精确的模型达到了7fps，而较小的，不太精确的模型以18fps运行。VGG-16版本的Faster R-CNN要高出10mAP，但比YOLO慢6倍。Zeiler-Fergus的Faster R-CNN只比YOLO慢了2.5倍，但也不太准确。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;最近更快的R-CNN用神经网络替代了选择性搜索来提出边界框，类似于Szegedy等[8]。在我们的测试中，他们最精确的模型达到了7fps，而较小的，不太精确的模型以18fps运行。VGG-16版本的Faster R-CNN要高出10mAP，但比YOLO慢6倍。Zeiler-Fergus的Faster R-CNN只比YOLO慢了2.5倍，但也不U太准确。</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200408232152.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;<strong>表1：Pascal VOC 2007上的实时系统。</strong>比较快速检测器的性能和速度。快速YOLO是Pascal VOC检测记录中速度最快的检测器，其精度仍然是其它实时检测器的两倍。YOLO比快速版本更精确10mAP，同时在速度上仍保持实时性。</p><h3 id="4-2-VOC-2007错误率分析"><a href="#4-2-VOC-2007错误率分析" class="headerlink" title="4.2. VOC 2007错误率分析"></a>4.2. VOC 2007错误率分析</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;为了进一步检查YOLO和最先进的检测器之间的差异，我们详细分析了VOC 2007的结果。我们将YOLO与Fast R-CNN进行比较，因为Fast R-CNN是PASCAL上性能最高的检测器之一并且它的检测代码是可公开得到的。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;我们使用Hoiem等人[19]的方法和工具。对于测试时的每个类别，我们看这个类别的前N个预测。每个预测或者是正确的，或者根据错误类型进行分类：</p><ul><li>Correct：正确的类别且IOU&gt;0.5。</li><li>Localization：正确的类别，0.1&lt;IOU&lt;0.5。</li><li>Similar：类别相似，IOU &gt;0.1。</li><li>Other：类别错误，IOU &gt;0.1。</li><li>Background：任何IOU &lt;0.1的目标。</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;图4显示了在所有的20个类别上每种错误类型平均值的分解图。</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200408232126.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;<strong>图4，误差分析：Fast R-CNN vs. YOLO。</strong>这些图显示了各种类别的前N个预测中定位错误和背景错误的百分比（N = #表示目标在那个类别中）。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;YOLO努力地正确定位目标。定位错误占YOLO错误的大多数，比其它错误源加起来都多。Fast R-CNN使定位错误少得多，但背景错误更多。它的检测的13.6%13.6%是不包含任何目标的误报。Fast R-CNN比YOLO预测背景检测的可能性高出近3倍。</p><h3 id="4-3-结合Fast-R-CNN和YOLO"><a href="#4-3-结合Fast-R-CNN和YOLO" class="headerlink" title="4.3. 结合Fast R-CNN和YOLO"></a>4.3. 结合Fast R-CNN和YOLO</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;YOLO比Fast R-CNN的背景误检要少得多。通过使用YOLO消除Fast R-CNN的背景检测，我们获得了显著的性能提升。对于R-CNN预测的每个边界框，我们检查YOLO是否预测一个类似的框。如果是这样，我们根据YOLO预测的概率和两个盒子之间的重叠来对这个预测进行提升。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;最好的Fast R-CNN模型在VOC 2007测试集上达到了71.8%的mAP。当与YOLO结合时，其mAP增加了3.2%达到了75.0%。我们也尝试将最好的Fast R-CNN模型与其它几个版本的Fast R-CNN结合起来。这些模型组合产生了0.3到0.6%之间的小幅增加，详见表2。</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200406114740.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;<strong>表2：VOC 2007模型组合实验。</strong>我们检验了各种模型与Fast R-CNN最佳版本结合的效果。Fast R-CNN的其它版本只提供很小的好处，而YOLO则提供了显著的性能提升。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;来自YOLO的提升不仅仅是模型组合的副产品，因为组合不同版本的Fast R-CNN几乎没有什么好处。相反，正是因为YOLO在测试时出现了各种各样的错误，所以在提高Fast R-CNN的性能方面非常有效。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;遗憾的是，这个组合并没有从YOLO的速度中受益，因为我们分别运行每个模型，然后结合结果。但是，由于YOLO速度如此之快，与Fast R-CNN相比，不会增加任何显著的计算时间。</p><h3 id="4-4-VOC-2012的结果"><a href="#4-4-VOC-2012的结果" class="headerlink" title="4.4. VOC 2012的结果"></a>4.4. VOC 2012的结果</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;在VOC 2012测试集上，YOLO得分为57.9%的mAP。这低于现有的最新技术，接近于使用VGG-16的原始R-CNN，见表3。我们的系统与其最接近的竞争对手相比，在小目标上努力。在<code>bottle</code>，<code>sheep</code>和<code>tv/monitor</code>等类别上，YOLO的得分比R-CNN或Feature Edit低8−10%。然而，在<code>cat</code>和<code>train</code>等其它类别上YOLO实现了更高的性能。</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200406114712.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;<strong>表3：PASCAL VOC 2012排行榜。</strong>截至2015年11月6日，YOLO与完整<code>comp4</code>（允许外部数据）公开排行榜进行了比较。显示了各种检测方法的平均精度均值和每类的平均精度。YOLO是唯一的实时检测器。Fast R-CNN + YOLO是评分第四高的方法，比Fast R-CNN提升了2.3％。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;我们联合的Fast R-CNN + YOLO模型是性能最高的检测方法之一。Fast R-CNN从与YOLO的组合中获得了2.3%的提高，在公开排行榜上上移了5位。</p><h3 id="4-5-泛化能力：艺术品中的行人检测"><a href="#4-5-泛化能力：艺术品中的行人检测" class="headerlink" title="4.5. 泛化能力：艺术品中的行人检测"></a>4.5. 泛化能力：艺术品中的行人检测</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;用于目标检测的学术数据集以相同分布获取训练和测试数据。在现实世界的应用中，很难预测所有可能的用例，而且测试数据可能与系统之前看到的不同[3]。我们在Picasso数据集上[12]和People-Art数据集[3]上将YOLO与其它的检测系统进行比较，这两个数据集用于测试艺术品中的行人检测。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;图5显示了YOLO和其它检测方法之间的比较性能。作为参考，我们在<code>person</code>上提供VOC 2007的检测AP，其中所有模型仅在VOC 2007数据上训练。在Picasso数据集上的模型在VOC 2012上训练，而People-Art数据集上的模型则在VOC 2010上训练。</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200406114643.png" alt=""></p><p>图5：Picasso和People-Art数据集上的泛化结果。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;R-CNN在VOC 2007上有高AP。然而，当应用于艺术品时，R-CNN明显下降。R-CNN使用选择性搜索来调整自然图像的边界框提出。R-CNN中的分类器步骤只能看到小区域，并且需要很好的边界框提出。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;DPM在应用于艺术品时保持了其AP。之前的工作认为DPM表现良好，因为它具有目标形状和布局的强大空间模型。虽然DPM不会像R-CNN那样退化，但它开始时的AP较低。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;YOLO在VOC 2007上有很好的性能，在应用于艺术品时其AP下降低于其它方法。像DPM一样，YOLO建模目标的大小和形状，以及目标和目标通常出现的位置之间的关系。艺术品和自然图像在像素级别上有很大不同，但是它们在目标的大小和形状方面是相似的，因此YOLO仍然可以预测好的边界框和检测结果。</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200406114604.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;<strong>图6：定性结果。</strong>YOLO在网络采样的艺术品和自然图像上的运行结果。虽然它将人误检成了飞机，但它大部分上是准确的。</p><h2 id="5-现实环境下的实时检测"><a href="#5-现实环境下的实时检测" class="headerlink" title="5. 现实环境下的实时检测"></a>5. 现实环境下的实时检测</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;YOLO是一种快速，精确的目标检测器，非常适合计算机视觉应用。我们将YOLO连接到网络摄像头，并验证它是否能保持实时性能，包括从摄像头获取图像并显示检测结果的时间。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;由此产生的系统是交互式和参与式的。虽然YOLO单独处理图像，但当连接到网络摄像头时，其功能类似于跟踪系统，可在目标移动和外观变化时检测目标。系统演示和源代码可以在我们的项目网站上找到：<a href="http://pjreddie.com/yolo/" target="_blank" rel="noopener">http://pjreddie.com/yolo/</a>。</p><h2 id="6-结论"><a href="#6-结论" class="headerlink" title="6. 结论"></a>6. 结论</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;我们介绍了YOLO，一种统一的目标检测模型。我们的模型构建简单，可以直接在整张图像上进行训练。与基于分类器的方法不同，YOLO直接在对应检测性能的损失函数上训练，并且整个模型联合训练。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;快速YOLO是文献中最快的通用目的的目标检测器，YOLO推动了实时目标检测的最新技术。YOLO还很好地泛化到新领域，使其成为依赖快速，强大的目标检测应用的理想选择。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<strong>致谢</strong>：这项工作得到了ONR N00014-13-1-0720，NSF IIS-1338054和艾伦杰出研究者奖的部分支持。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>[1] M. B. Blaschko and C. H. Lampert. Learning to localize objects with structured output regression. In Computer Vision–ECCV 2008, pages 2–15. Springer, 2008. 4</p><p>[2] L. Bourdev and J. Malik. Poselets: Body part detectors trained using 3d human pose annotations. In International Conference on Computer Vision (ICCV), 2009. 8</p><p>[3] H. Cai, Q. Wu, T. Corradi, and P. Hall. The cross-depiction problem: Computer vision algorithms for recognising objects in artwork and in photographs. arXiv preprint arXiv:1505.00110, 2015. 7</p><p>[4] N. Dalal and B. Triggs. Histograms of oriented gradients for human detection. In Computer Vision and Pattern Recognition, 2005. CVPR 2005. IEEE Computer Society Conference on, volume 1, pages 886–893. IEEE, 2005. 4, 8</p><p>[5] T. Dean, M. Ruzon, M. Segal, J. Shlens, S. Vijaya-narasimhan, J. Yagnik, et al. Fast, accurate detection of 100,000 object classes on a single machine. In Computer Vision and Pattern Recognition (CVPR), 2013 IEEE Conference on, pages 1814–1821. IEEE, 2013. 5</p><p>[6] J. Donahue, Y. Jia, O. Vinyals, J. Hoffman, N. Zhang, E. Tzeng, and T. Darrell. Decaf: A deep convolutional activation feature for generic visual recognition. arXiv preprint arXiv:1310.1531, 2013. 4</p><p>[7] J. Dong, Q. Chen, S. Yan, and A. Yuille. Towards unified object detection and semantic segmentation. In Computer Vision–ECCV 2014, pages 299–314. Springer, 2014. 7</p><p>[8] D.Erhan, C.Szegedy, A.Toshev, and D.Anguelov. Scalable object detection using deep neural networks. In Computer Vision and Pattern Recognition (CVPR), 2014 IEEE Conference on, pages 2155–2162. IEEE, 2014. 5, 6</p><p>[9] M. Everingham, S. M. A. Eslami, L. Van Gool, C. K. I. Williams, J. Winn, and A. Zisserman. The pascal visual object classes challenge: A retrospective. International Journal of Computer Vision, 111(1):98–136, Jan. 2015. 2</p><p>[10] P.F.Felzenszwalb, R.B.Girshick, D.McAllester, and D.Ramanan. Object detection with discriminatively trained part based models. IEEE Transactions on Pattern Analysis and Machine Intelligence, 32(9):1627–1645, 2010. 1, 4</p><p>[11] S. Gidaris and N. Komodakis. Object detection via a multi-region &amp; semantic segmentation-aware CNN model. CoRR, abs/1505.01749, 2015. 7</p><p>[12] S. Ginosar, D. Haas, T. Brown, and J. Malik. Detecting people in cubist art. In Computer Vision-ECCV 2014 Workshops, pages 101–116. Springer, 2014. 7</p><p>[13] R. Girshick, J. Donahue, T. Darrell, and J. Malik. Rich feature hierarchies for accurate object detection and semantic segmentation. In Computer Vision and Pattern Recognition (CVPR), 2014 IEEE Conference on, pages 580–587. IEEE, 2014. 1, 4, 7</p><p>[14] R. B. Girshick. Fast R-CNN. CoRR, abs/1504.08083, 2015. 2, 5, 6, 7</p><p>[15] S. Gould, T. Gao, and D. Koller. Region-based segmentation and object detection. In Advances in neural information processing systems, pages 655–663, 2009. 4</p><p>[16] B. Hariharan, P. Arbeláez, R. Girshick, and J. Malik. Simultaneous detection and segmentation. In Computer Vision–ECCV 2014, pages 297–312. Springer, 2014. 7</p><p>[17] K.He, X.Zhang, S.Ren, and J.Sun. Spatial pyramid pooling in deep convolutional networks for visual recognition. arXiv preprint arXiv:1406.4729, 2014. 5</p><p>[18] G.E.Hinton, N.Srivastava, A.Krizhevsky, I.Sutskever, and R. R. Salakhutdinov. Improving neural networks by preventing co-adaptation of feature detectors. arXiv preprint arXiv:1207.0580, 2012. 4</p><p>[19] D.Hoiem, Y.Chodpathumwan, and Q.Dai. Diagnosing error in object detectors. In Computer Vision–ECCV 2012, pages 340–353. Springer, 2012. 6</p><p>[20] K. Lenc and A. Vedaldi. R-cnn minus r. arXiv preprint arXiv:1506.06981, 2015. 5, 6</p><p>[21] R. Lienhart and J. Maydt. An extended set of haar-like features for rapid object detection. In Image Processing. 2002. Proceedings. 2002<br>International Conference on, volume 1, pages I–900. IEEE, 2002. 4</p><p>[22] M. Lin, Q. Chen, and S. Yan. Network in network. CoRR, abs/1312.4400, 2013. 2</p><p>[23] D. G. Lowe. Object recognition from local scale-invariant features. In Computer vision, 1999. The proceedings of the seventh IEEE international conference on, volume 2, pages 1150–1157. Ieee, 1999. 4</p><p>[24] D. Mishkin. Models accuracy on imagenet 2012 val. <a href="https://github.com/BVLC/caffe/wiki/" target="_blank" rel="noopener">https://github.com/BVLC/caffe/wiki/</a> Models-accuracy-on-ImageNet-2012-val. Accessed: 2015-10-2. 3</p><p>[25] C. P. Papageorgiou, M. Oren, and T. Poggio. A general framework for object detection. In Computer vision, 1998. sixth international conference on, pages 555–562. IEEE, 1998. 4</p><p>[26] J. Redmon. Darknet: Open source neural networks in c. <a href="http://pjreddie.com/darknet/" target="_blank" rel="noopener">http://pjreddie.com/darknet/</a>, 2013–2016. 3</p><p>[27] J.Redmon and A.Angelova. Real-time grasp detection using convolutional neural networks. CoRR, abs/1412.3128, 2014. 5</p><p>[28] S. Ren, K. He, R. Girshick, and J. Sun. Faster r-cnn: Towards real-time object detection with region proposal networks. arXiv preprint arXiv:1506.01497, 2015. 5, 6, 7</p><p>[29] S. Ren, K. He, R. B. Girshick, X. Zhang, and J. Sun. Object detection networks on convolutional feature maps. CoRR, abs/1504.06066, 2015. 3, 7</p><p>[30] O. Russakovsky, J. Deng, H. Su, J. Krause, S. Satheesh, S. Ma, Z. Huang, A. Karpathy, A. Khosla, M. Bernstein, A. C. Berg, and L. Fei-Fei. ImageNet Large Scale Visual Recognition Challenge. International Journal of Computer Vision (IJCV), 2015. 3</p><p>[31] M. A. Sadeghi and D. Forsyth. 30hz object detection with dpm v5. In Computer Vision–ECCV 2014, pages 65–79. Springer, 2014. 5, 6</p><p>[32] P. Sermanet, D. Eigen, X. Zhang, M. Mathieu, R. Fergus, and Y. LeCun. Overfeat: Integrated recognition, localization and detection using convolutional networks. CoRR, abs/1312.6229, 2013. 4, 5</p><p>[33] Z.Shen and X.Xue. Do more dropouts in pool5 feature maps for better object detection. arXiv preprint arXiv:1409.6911, 2014. 7</p><p>[34] C. Szegedy, W. Liu, Y. Jia, P. Sermanet, S. Reed, D. Anguelov, D. Erhan, V. Vanhoucke, and A. Rabinovich. Going deeper with convolutions. CoRR, abs/1409.4842, 2014. 2</p><p>[35] J. R. Uijlings, K. E. van de Sande, T. Gevers, and A. W. Smeulders. Selective search for object recognition. International journal of computer vision, 104(2):154–171, 2013. 4, 5</p><p>[36] P. Viola and M. Jones. Robust real-time object detection. International Journal of Computer Vision, 4:34–47, 2001. 4</p><p>[37] P. Viola and M. J. Jones. Robust real-time face detection. International journal of computer vision, 57(2):137–154, 2004. 5</p><p>[38] J. Yan, Z. Lei, L. Wen, and S. Z. Li. The fastest deformable part model for object detection. In Computer Vision and Pattern Recognition (CVPR), 2014 IEEE Conference on, pages 2497–2504. IEEE, 2014. 5, 6</p><p>[39] C.L.Zitnick and P.Dollár.Edgeboxes:Locating object proposals from edges. In Computer Vision–ECCV 2014, pages 391–405. Springer, 2014. 4</p><p><a href="http://noahsnail.com/2017/08/02/2017-08-02-YOLO%E8%AE%BA%E6%96%87%E7%BF%BB%E8%AF%91%E2%80%94%E2%80%94%E4%B8%AD%E6%96%87%E7%89%88/" target="_blank" rel="noopener">原文转载</a></p><p><a href="http://noahsnail.com/2017/08/02/2017-08-02-YOLO%E8%AE%BA%E6%96%87%E7%BF%BB%E8%AF%91%E2%80%94%E2%80%94%E4%B8%AD%E8%8B%B1%E6%96%87%E5%AF%B9%E7%85%A7/" target="_blank" rel="noopener">中英文对照版本</a></p>]]></content>
      
      
      <categories>
          
          <category> 论文翻译 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> YOLOV1 </tag>
            
            <tag> 论文翻译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用软件集合</title>
      <link href="/2020/04/03/20200403-165757/"/>
      <url>/2020/04/03/20200403-165757/</url>
      
        <content type="html"><![CDATA[<ul><li><p><a href="https://www.compresss.com/cn/compress-video.html" target="_blank" rel="noopener">在线压缩软件</a>: compresss</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200403170246.png" alt=""></p></li></ul><ul><li><p>屏幕录制软件:</p><ul><li><p><a href="https://github.com/MathewSachin/Captura" target="_blank" rel="noopener">Captura</a></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200403170413.png" alt=""></p></li></ul></li><li><p>截屏软件:</p><ul><li><p><a href="https://zh.snipaste.com/" target="_blank" rel="noopener">Snipaste</a></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200403170604.png" alt=""></p></li><li><p>截长图软件<code>FastStone</code></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200403170720.png" alt=""></p></li></ul></li><li><p>图床软件:</p><ul><li><a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener">picGo</a></li></ul><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200403170642.png" alt=""></p><ul><li><p>支持自定义上传快捷键</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200408090731.png" alt=""></p></li><li><p>picgo-plugin-quick-capture插件支持快速截图&amp;上传</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200408090557.png" alt=""></p></li><li><p><a href="https://picgo.github.io/PicGo-Doc/zh/" target="_blank" rel="noopener">PicGo的中文使用手册</a></p></li><li><p><a href="https://github.com/PicGo/Awesome-PicGo" target="_blank" rel="noopener">PicGo插件</a></p></li><li><p><a href="https://sspai.com/post/58223" target="_blank" rel="noopener">PicGo v2.2 更新，快捷键系统与一波插件推荐 </a></p></li></ul></li><li><p>解压缩软件：</p><ul><li><p><a href="https://www.bandisoft.com/bandizip/" target="_blank" rel="noopener">Bandzip</a></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200403170750.png" alt=""></p></li></ul></li><li><p>思维导图软件</p><ul><li><a href="https://www.dqrj.name/thread-251-1-1.html" target="_blank" rel="noopener">Mindjet MindManager 2020 v20.0.333 破解版非注册机下载简体中文汉化 </a></li><li>为了防止资源被毁，放在了移动硬盘中</li></ul></li></ul><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200404102245.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件 </tag>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unbroken(坚不可摧)</title>
      <link href="/2020/04/03/20200403-171150/"/>
      <url>/2020/04/03/20200403-171150/</url>
      
        <content type="html"><![CDATA[<p>视频资源：</p><p><a href="https://www.youtube.com/watch?v=26U_seo0a1g&t=7s" target="_blank" rel="noopener">youtube</a></p><video src="https://homewyk.com/staticHtml/source/Unbroken1.mp4 " controls="controls" width="680" height="380" autoplay="autoplay">Your browser does not support the video tag.</video><p>&nbsp;&nbsp;&nbsp;&nbsp; 因为压缩了字幕，所以画质感人！！！</p><p><a href="https://homewyk.com/staticHtml/source/Unbroken.mp4">无字幕版</a></p><h1 id="Unbroken——坚不可摧"><a href="#Unbroken——坚不可摧" class="headerlink" title="Unbroken——坚不可摧"></a>Unbroken——坚不可摧</h1><p>You can’t connect the dots looking forward, you can only connect them looking backwards.</p><p>你无法把过去的点滴与未来联系，只有透过回顾才能看见。</p><p>So you have to trust that the dots will somehow connect in your future.</p><p>所以你必须相信过去的点滴能够串联未来。</p><p>You have to trust in something: your gut, destiny, life, karma, whatever.</p><p>你必须有信念，不管那是你的胆识，命运，人生，还是因果报应。</p><p>Because believing that the dots will connect down the road, will give you the confidence to follow your heart, even when it lead you off the well worn path. And that will make all the difference.</p><p>因为唯有把过去的点滴串联起来，你才能有信心忠于自我，即使你的选择和常人不同。这会使你与众不同。</p><p>Your time is limited, so don’t waste it living someone else’s life.</p><p>你的生命有限，所以不要浪费你的时间在别人的生活里。</p><p>Don’t be trapped by dogma, which is living with the results of other people’s thinking.</p><p>不要被教条束缚，不要活在别人对你的期望之中。</p><p>Don’t let the noise of others’ opinions drown out your own inner voice. You’ve got to find what you love.</p><p>不要让来自他人的噪音抹去你自己内心的声音，你必须找到你所爱的东西。</p><p>And that is as true for your work as it is for your lovers.</p><p>包括你热爱的事业和你的伴侣。</p><p>Your work is going to fill a large part of your life and the only way to be truly satisfied is to do what you believe is great work.</p><p>事业将占据你的大半生，唯有相信你所做的工作是对的，你才能发自内心的得到满足。</p><p>And the only way to do great work is to love what you do.</p><p>而唯有爱你所做的事，才能成就不凡。</p><p>If you haven’t found it yet, keep looking, and don’t settle.</p><p>如若你还没有找到，继续寻找，别追去安逸。</p><p>Have the courage to follow your heart and intuition, they somehow already know what you truly want to become.</p><p>有勇气顺从自己的心和直觉，你的内心早就知道你未来的梦想。</p><p>You’re going to have some ups and you’re goning to have some downs.</p><p>你的旅途不可能一帆风顺，必然有起有落。</p><p>Most people give up on themselves easily. You know the human spirit is powerful?!</p><p>大多数人都轻易放弃，但你知道人的意志有多强大吗？</p><p>There is nothing as powerful. It’s hard to kill the human spirit!</p><p>人的意志是无可比拟的坚韧不屈！</p><p>Anybody can feel good when they have their health, their bills are paid, they have happy relationships.</p><p>任何人在财务、生活、感情、健康良好的环境下，都能感到幸福。</p><p>Anybody can be positive then, anybody can have a larger vision then, anybody can have faith under those kinds of circumstances.</p><p>在那样的环境下，任何人都能自得其满，任何人都能有伟大的理想，任何人都能有信念。</p><p>The real challenge of growth, mentally, emotionally and spiritually comes when you get knocked down. It takes courage to act.</p><p>在你被击倒时，你所面临的真正挑战是你的信念、信仰和意志。起身而行需要勇气。</p><p>Part of being hungry when you have been defeated.</p><p>被击倒仍能保持谦虚，</p><p>It takes courage to start over again.</p><p>需要勇气去放下并重新开始。</p><p>Fear kills dreams.</p><p>恐惧扼杀梦想。</p><p>Fear kills hope.Fear, put people in the hospital.</p><p>恐惧扼杀希望，恐惧使人一蹶不振。</p><p>Fear can age you, can hold you back from doing something that you know within yourself that you are capable of doing, but it will paralyze you.</p><p>恐惧使你衰老，阻止你去做你能做到的事，但是它也会使你麻木不仁。</p><p>At the end of your feelings is nothing, but at the end of every principle is a promise.</p><p>你的情绪跌宕起伏，但仍然一事无成，但是在每个原则之后是自我的承诺。</p><p>Behind your little feelings, it might not be absolutely nothing at the end of your little feelings.</p><p>你的喜怒哀乐，最后可能什么都没有。</p><p>But behind every principle is a promise. And some of you in your life, the reason why you not at your goal right now, because you just all about your feelings.</p><p>但是每当你下定决心，就是一种承诺。你们有些人，至今碌碌无为，原因只是你们太过于情绪化。</p><p>All on your feellings, you don’t feel like waking up, so who does?</p><p>你总被情绪所主导，早上不愿起床，谁想呢？</p><p>Everyday you say “no” to your dreams, you might be pushing your dreams back a whole six months, a whole year!</p><p>每天你不愿去面对自己的梦想，你也许会把目标延后六个月，或是一年！</p><p>That one single day, that one day you didn’t get up could have pushed your stuff back, I don’t know how long.</p><p>只是那没有起身鞭策自己的一瞬间，你不知后退了多少。</p><p>Don’t allow your emotions to control you.</p><p>别让你的情感控制你。</p><p>We are emotional, but what you want to begin to discipline your emotion.</p><p>我们是情感的动物，但是你必须控制你的情感。</p><p>If you don’t discipline and contain your emotion, they will use you.</p><p>你若无法控制他，你便将被它吞噬。</p><p>You want it, and you are going to go all out to have it.</p><p>你想要全力以赴，毫无保留。</p><p>It’s not going to be easy, when you want to change. It’s not easy.</p><p>当你尝试改变的时候，不会很容易。</p><p>If it were in fact easy, everybody would do it.</p><p>如果很容易，那人人皆可做到。</p><p>But if you’re serious, you’ll go all out.</p><p>但是你若认真对待，全力以赴。</p><p>I’m in control here.</p><p>我才是自己的主宰者。</p><p>I’m not going to let this get me down, I’m not going to let this destroy me.</p><p>我绝不会让外界事物打击我，摧毁我。</p><p>I’m coming back!</p><p>我将重新站起！</p><p>And I’ll be stronger and better because of it!</p><p>我将会变得更好，更坚强！</p><p>You have got to make a declaration, that this is what you stand for!</p><p>你必须要下定决心，这是你的意义!</p><p>You’re standing up for your dreams, you’re standing up for peace of mind, you’re standing up for health.</p><p>如果这是你想要的梦想，那不论是健康或是功成名就。</p><p>Take full responsibility for your life!</p><p>请对你的人生负完全的责任！</p><p>Accept where you are and the responsibility that you’re going to take yourself where you want to go.</p><p>接受现在的自己，并把坚信自己能够做得更好当作一种责任。</p><p>You can decide that I am going to live each day as if it were my last!</p><p>你可以选择把你的每一天当做最后一天来过！</p><p>Live your life with passion! With some drive!</p><p>活出你的激情！拿出你的魄力！</p><p>Decided that you are going to push yourself.</p><p>不断鞭策自己做得更好！</p><p>The last chapter to your life has not been written yet, and it doen’t matter about what happened yesterday.</p><p>人生的最后一章尚未写下，昨天种种的事情并不重要。</p><p>It doesn’t matter about what happened to you, what matter is: what are you going to do about it?</p><p>你发生了什么也没有关系，重要的是：你接下来打算怎么做？</p><p>This year I will make this goal become a reality.</p><p>今年我将使梦想成为现实。</p><p>I won’t talk about it anymore. I can! I can!! I can!!!</p><p>我已不想再谈论什么，我能行！我能行！！我能行！！！</p><p>To persevere I think is important for everybody, don’t give up, don’t give in.</p><p>我觉得坚持对每个人都很重要，不要放弃，不要妥协。</p><p>There’s always an answer to everything.</p><p>人生的每件事情总是有解答的。</p>]]></content>
      
      
      <categories>
          
          <category> 励志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 励志 </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Yolov1算法解读及其详细实现</title>
      <link href="/2020/04/02/20200402-111922/"/>
      <url>/2020/04/02/20200402-111922/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200407135602.png" alt=""></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;将自己这段时间以来的关于Yolov1算法知识做一个总结。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 这篇文章是YOLO的开山之作，理解其思想是十分重要的。</p><p><a href="https://homewyk.com/staticHtml/PDF/essay/Yolov1.pdf">论文原文请移步</a></p><p><a href="https://github.com/gliese581gg/YOLO_tensorflow" target="_blank" rel="noopener">基于<code>Tensorflow</code>版本的<code>Yolov1</code>实现</a></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="模型对比"><a href="#模型对比" class="headerlink" title="模型对比"></a>模型对比</h3><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200407135854.png" alt=""></p><p>RCC网络的目标检测过程：</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200407140256.png" alt=""></p><p>YOLO的目标检测过程：</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200407140329.png" alt=""></p><p>YOLO训练和检测均是在一个单独的网络中进行的。</p><p>YOLO并没有显示的求取<code>region proposal</code>的过程。</p><h3 id="检测过程"><a href="#检测过程" class="headerlink" title="检测过程"></a>检测过程</h3><p>基本思路</p><p>第一步：<code>input a image</code></p><blockquote><p> 输入一个图像</p></blockquote><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200407140801.png" alt=""></p><p>第二步：<code>We split the image into a grid</code></p><blockquote><p>将其分为$s\times s$的<code>gird cell</code></p></blockquote><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200407140820.png" alt=""></p><p>第三步：<code>Each cell predicts boxes and confidences: P(Object)</code></p><p>使用<code>per grid cell</code>来确定<code>bounding box</code>和<code>confidences</code>$P(object)$ （<code>per grid cell</code>中的目标概率）</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200407141134.png" alt=""></p><p>第四步：<code>obtain bounding box</code></p><blockquote><p> 得到<code>bounding Box</code>的大小</p></blockquote><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200407141459.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200407141856.png" alt=""></p><p>第五步：<code>Each cell also predicts a class probability</code></p><blockquote><p><code>per grid cell</code>也预测类别概率</p></blockquote><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200407142128.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200407142639.png" alt=""></p><p>第六步：<code>Conditioned on object:</code> $P(Car | Object)$ </p><blockquote><p>使用条件概率来</p></blockquote><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200407142639.png" alt=""></p><p>第七步：<code>Then we combine the box and class predictions.</code></p><blockquote><p>我们联合<code>bounding box 和类别预测概率</code>进行框选</p></blockquote><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200407143047.png" alt=""></p><p>第八步：<code>Finally we do NMS and threshold detections</code></p><blockquote><p>最后使用NMS和阈值进行筛选，得到最终的输出目标检测</p></blockquote><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200407143223.png" alt=""></p><h3 id="This-parameterization-fixes-the-output-size"><a href="#This-parameterization-fixes-the-output-size" class="headerlink" title="This parameterization fixes the output size"></a>This parameterization fixes the output size</h3><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200407143613.png" alt=""></p><h3 id="检测过程的另一种理解"><a href="#检测过程的另一种理解" class="headerlink" title="检测过程的另一种理解"></a>检测过程的另一种理解</h3><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200407154246.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200407154442.png" alt=""></p><p>下面这张图主要是为了解答上述公式的疑问！</p><p>关于坐标的问题，下面有详细的说明！</p><blockquote><p> 为啥感觉图有点乱…</p></blockquote><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200407161434.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200407155000.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200407155102.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200407155146.png" alt=""></p><h3 id="关于非极大值抑制"><a href="#关于非极大值抑制" class="headerlink" title="关于非极大值抑制"></a>关于非极大值抑制</h3><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/%E6%95%88%E6%9E%9C%E5%B1%95%E7%A4%BA1.gif" alt=""></p><h3 id="训练过程"><a href="#训练过程" class="headerlink" title="训练过程"></a>训练过程</h3><p>``Thus we can train one neural network to be a whole detection pipeline `</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200407144951.png" alt=""></p><p>第一步：<code>During training, match example to the right cell</code></p><blockquote><p>在数据集合中标注出正确的数据：</p><p>包括：</p><p>​    哪一个cell负责预测目标</p><p>​    目标的中心点位置坐标(下标$t$表示原始标注)$(x_t,y_t)$</p><p>​    目标的真实宽高$(w_t,h_t)$</p></blockquote><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200407144432.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200407144822.png" alt=""></p><p>第二步：<code>Adjust that cell’s class prediction</code></p><blockquote><p>调整类别的概率</p><p>也就是将相应的目标置位1，其他置位0</p></blockquote><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200407144855.png" alt=""></p><p>第三步：<code>Look at that cell’s predicted boxes</code></p><blockquote><p>检查cell的预测框</p></blockquote><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200407145357.png" alt=""></p><p>第四步：<code>Find the best one, adjust it, increase the confidence</code></p><blockquote><p>寻找到最好的一个<code>bounding box</code>然后增加其<code>confidence</code></p></blockquote><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200407145523.png" alt=""></p><p>第五步：<code>Decrease the confidence of other boxes</code></p><blockquote><p>减小另一个<code>bounding box</code>的<code>confidence</code></p></blockquote><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200407145645.png" alt=""></p><p>这里详细的说明一下：</p><p>上面那个图这个地方说的不大正确。</p><ul><li>预测的$w,h$是针对原图来说的</li><li>预测的$x,y$是针对<code>per grid cell</code>的左上角来说的</li><li>论文中说大物体成圣同样误差的距离的概率 $&gt;$ 小物体产生同样误差距离的几率，通过开平方根来处理</li><li>我们的误差指标应反映出，大盒子中的小偏差比小盒子中的小偏差要小。 为了部分解决此问题，<strong>我们预测边界框宽度和高度的平方根</strong>，而不是直接预测宽度和高度 。</li><li>对不同大小的bbox预测中，相比于大bbox预测偏一点，小box预测偏相同的尺寸对IOU的影响更大。而sum-square error loss中对同样的偏移loss是一样。 为了缓和这个问题，作者用了一个巧妙的办法，就是将box的width和height取平方根代替原本的height和width。 如下图：small bbox的横轴值较小，发生偏移时，反应到y轴上的loss（下图绿色）比big box(下图红色)要大。 </li></ul><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200403000358.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200407152125.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/%E5%9D%90%E6%A0%87%E7%9A%84%E8%AE%A1%E7%AE%97.png" alt=""></p><p>总结：</p><p> <code>YOLO</code>对每个<code>bounding box</code>有5个<code>predictions</code>：<code>x, y, w, h,confidence</code>。 </p><ul><li>坐标<code>x,y</code>代表了预测的<code>bounding box</code>的中心与栅格边界的相对值。 </li><li>坐标<code>w,h</code>代表了预测的<code>bounding box</code>的<code>width、height</code>相对于整幅图像<code>width,heigh</code>t的比例。 </li><li><code>confidence</code>就是预测的<code>bounding box</code>和<code>ground truth box</code>的<code>IOU</code>值。</li><li>每一个栅格还要预测<code>C</code>个<code>conditional class probability</code>（条件类别概率）：<code>Pr(Classi|Object)</code>。<ul><li>即在一个栅格包含一个<code>Object</code>的前提下，它属于某个类的概率。我们只为每个栅格预测一组（<code>C</code>个）类概率，而不考虑框<code>B</code>的数量。整个<code>yolo</code>算法的流程如图2. </li></ul></li></ul><h3 id="训练过程的另一种解释方法"><a href="#训练过程的另一种解释方法" class="headerlink" title="训练过程的另一种解释方法"></a>训练过程的另一种解释方法</h3><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200407152609.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200407152951.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200407153049.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200407153213.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200407153314.png" alt=""></p><ul><li>这里理解<code>confidence</code>:</li><li>每一个栅格预测<code>B</code>个<code>bounding boxes</code>，以及这些<code>bounding boxes</code>的<code>confidence scores</code>。</li><li>这个 <code>confidence scores</code>反映了模型对于这个栅格的预测：<ul><li>该栅格是否含有物体，以及这个<code>box</code>的坐标预测的有多准。</li><li>公式定义如下： $Pr(Object)*IOU_{pred}^{truth}$。</li><li>如果这个栅格中不存在一个<code>object</code>，则<code>confidence score</code>应该为0。</li><li>否则的话，<code>confidence score</code>则为<code>predicted bounding box</code>与<code>ground truth box</code>之间的<code>IOU</code>（<code>intersection over union</code>）。 </li></ul></li></ul><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200407153821.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200407153905.png" alt=""></p><h3 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h3><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200402231328.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200407192447.png" alt=""></p><p> 论文中所说的把目标检测作为一个回归问题，最明显的就是把<code>bounding box</code>的坐标误差作为<code>loss</code>进行计算，从而达到直接使用网络回归出正确的<code>bounding box</code>位置的目的。<code>Loss</code>的计算总体上可分为两部分，即<code>box</code>的<code>loss</code> <code>x, y, w, h, confidence</code>和类别的<code>loss</code>，对<code>box</code>的<code>loss</code>，又可根据当前box中是否包含物体来分别进行计算。 在计算box的loss时，程序遍历每一个格点的每一个box(根据论文中所述，<code>YOLOv1</code>中每张图片应该是<code>7*7*2=98</code>个<code>box</code>)，若当前box中有物体(有<code>truth box</code>投影到当前格点，且该box是当前格点所预测的box中与truth box的iou最大的)，则计算该box与truth box的<code>x, y, w, h, confidence</code>误差，对没有物体的box，则只计算<code>confidence</code>误差。 在计算类别的loss时，程序遍历每一个格点，若当前格点中包含物体，则计算类别误差，否则不计算。 </p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200407192715.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200403001917.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200402233438.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200402234818.png" alt=""></p><h3 id="检测效果"><a href="#检测效果" class="headerlink" title="检测效果"></a>检测效果</h3><p><code>YOLO works across a variety of natural images</code></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200407152333.png" alt=""></p><p><code>It also generalizes well to new domains (like art)</code></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200407152429.png" alt=""></p><h3 id="YOLOV1的优点"><a href="#YOLOV1的优点" class="headerlink" title="YOLOV1的优点"></a>YOLOV1的优点</h3><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200407211817.png" alt=""></p><h3 id="YOLOV1的不足"><a href="#YOLOV1的不足" class="headerlink" title="YOLOV1的不足"></a>YOLOV1的不足</h3><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200407180338.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;</p><p><a href="https://towardsdatascience.com/yolov1-you-only-look-once-object-detection-e1f3ffec8a89" target="_blank" rel="noopener">Review: YOLOv1 — You Only Look Once (Object Detection)</a></p><p><a href="https://blog.csdn.net/m0_37192554/article/details/81092761" target="_blank" rel="noopener">手写loss</a></p><p><a href="https://blog.csdn.net/JerryZhang__/article/details/85471847" target="_blank" rel="noopener">loss</a></p><p><a href="https://blog.csdn.net/baobei0112/article/details/80116260" target="_blank" rel="noopener">推断的详细过程</a></p><p> <a href="https://blog.csdn.net/shuiyixin/article/details/82533849" target="_blank" rel="noopener">水一心</a></p><p><a href="https://github.com/KOD-Chen/YOLOv1-Tensorflow/blob/master/yolo1_tf.py" target="_blank" rel="noopener">注释较好的代码实现</a></p><p><a href="https://blog.csdn.net/m0_37192554/article/details/81092761" target="_blank" rel="noopener">非极大值抑制</a></p><p><a href="https://www.bilibili.com/video/av23354360?from=search&seid=14097781066157427376" target="_blank" rel="noopener">中文Yolo v1全面深度解读 目标检测论文</a></p><p><a href="https://blog.csdn.net/hrsstudy/article/details/70305791" target="_blank" rel="noopener">动态插图</a></p><p><a href="https://www.youtube.com/watch?v=uxUhgOVHRE0&t=4485s" target="_blank" rel="noopener">[Meetup] YOLOv1 - 柯克 (江雨)</a></p><p><a href="https://zhuanlan.zhihu.com/p/25053311" target="_blank" rel="noopener">程序详解</a></p><p><a href="https://www.youtube.com/watch?v=NM6lrxy0bxs&t=5s" target="_blank" rel="noopener">CVPR2016</a></p><p><a href="https://www.youtube.com/watch?v=N4KM7i2n1lY&t=598s" target="_blank" rel="noopener">随波竺流AI知识交流会：yolo v1</a></p><p><a href="https://www.youtube.com/watch?v=xo_iUBjz0F4&t=179s" target="_blank" rel="noopener">[Meetup5_2019] YOLOv2 - 陳穗碧(Mora chen)</a></p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Yolov1 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> 目标检测 </tag>
            
            <tag> 论文解读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写Blog四剑客：PicGo + Gitee(码云)+Snipaste 实现markdown图床</title>
      <link href="/2020/04/01/20200401-122211/"/>
      <url>/2020/04/01/20200401-122211/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&nbsp;&nbsp;&nbsp;&nbsp; 想使用七牛云作为自己的图床工具，但是域名只给使用1个月，而我自己的域名并没有备案遂放弃。也查询过使用百度云网盘做图床，并不可行，最后便想使用<code>github</code>作为自己的图床，经过配置发现了一个不大好的问题，<code>github</code>的服务器在国外，访问速度时好时慢，这不是自己能够控制的了，还有一个是，使用<code>github</code>做图床，需要频繁的上传<code>image</code>,这就造成了<code>commit</code>的此时太多，会造成一种<code>github</code>十分红火的假象。思来想去，为什么不用国内的码云作为自己的图床,<code>Gitee</code>和国内的<code>github</code>差不多，是代码托管软件,也是国内最大的代码系统。由于服务器在国内，速度也是杠杠的，且只把<code>Gitee</code>作为图床使用，不做他用。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; <code>Markdown</code>是一门易于上手能帮助作者专心写作的文档编辑语言，好处多多，十分建议日常写作使用这种方法，简答易学。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; <code>Markdown</code>编辑器推荐使用<code>Typora</code>,可以编写完毕后立即看到效果。</p><p>本文的重点在<code>Markdown</code>如何插入图片</p><p>&nbsp;&nbsp;&nbsp;&nbsp;  图床是一个便于在博文中插入在线图片连接的个人图片仓库。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 设置图床之后，在自己博客中插入的图片链接就可以随时随地在线预览了，并且不会因为任何意外原因无法查看，除非自己亲自删除。 </p><p><code>PicGo</code>就是为了解决本地图片上传图片仓库这个问题诞生的，它可以将本地图片上传到指定的图床上，然后返回<code>markdown</code>链接，直接粘贴到你的文档中，就搞定啦。</p><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h3><h4 id="安装picgo"><a href="#安装picgo" class="headerlink" title="安装picgo"></a>安装<code>picgo</code></h4><p><a href="https://link.zhihu.com/?target=https%3A//github.com/Molunerfinn/PicGo">picgo仓库</a></p><p><a href="https://molunerfinn.com/PicGo/" target="_blank" rel="noopener">picgo官网</a>，下载<code>.exe</code>执行文件即可</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200401185537.png" alt=""></p><h4 id="picgo主界面"><a href="#picgo主界面" class="headerlink" title="picgo主界面"></a><code>picgo</code>主界面</h4><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200401185653.png" alt=""></p><h4 id="2-安装gitee插件"><a href="#2-安装gitee插件" class="headerlink" title="2. 安装gitee插件"></a>2. 安装gitee插件</h4><h5 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h5><p>首先下载稳定版<a href="https://nodejs.org/dist/v9.11.1/node-v9.11.1-x64.msi" target="_blank" rel="noopener">Node.js</a>，我这里给的是64位的。</p><p>安装选项全部默认，一路点击<code>Next</code>。</p><p>最后安装好之后，按<code>Win+R</code>打开命令提示符，输入<code>node -v</code>和<code>npm -v</code>，如果出现版本号，那么就安装成功了</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200401185856.png" alt=""></p><h5 id="安装picgo插件"><a href="#安装picgo插件" class="headerlink" title="安装picgo插件"></a>安装picgo插件</h5><p>选择最底下的插件设置，搜索<strong>gitee</strong>，点击右边的gitee-uploader 1.1.2开始安装。</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200401190044.png" alt=""></p><h3 id="2-配置Gitee图片仓库"><a href="#2-配置Gitee图片仓库" class="headerlink" title="2. 配置Gitee图片仓库"></a>2. 配置Gitee图片仓库</h3><ol><li>新建仓库</li></ol><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200401190319.png" alt=""></p><ol start="2"><li>新建仓库要点<ul><li>输入一个仓库名称</li><li>其次将仓库设为公开</li><li>勾选使用Readme文件初始化这个仓库<ul><li><strong>这个选项勾上，这样码云会自动给你的仓库建立master分支，这点很重要!!!</strong> </li></ul></li></ul></li></ol><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200401190542.png" alt=""></p><ol start="3"><li><p>配置<code>picgo</code>的<code>gitee</code>插件</p><ul><li><p><code>repo</code>: 仓库名称</p><ul><li><code>gitee</code>用户名/仓库名</li><li>最开始前面没有<code>/</code></li></ul><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200401191157.png" alt=""></p></li><li><p><code>banch</code>: <code>master</code></p></li><li><p><code>token</code>: 见第4点</p></li></ul></li></ol><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200401191005.png" alt=""></p><ol start="4"><li><p>获取token</p><ul><li><p>点击头像，进入设置 </p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200401191545.png" alt=""></p></li><li><p>找到右边安全设置里面的私人令牌</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200401191619.png" alt=""></p></li><li><p>点击<code>生成新令牌</code>，把<strong>projects</strong>这一项勾上，其他的不用勾，然后提交</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200401191713.png" alt=""></p></li><li><p>这里需要验证一下密码，验证密码之后会出来一串数字，这一串数字就是你的<code>token</code>，将这串数字复制到刚才的配置里面去。 </p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200401191750.png" alt=""></p><ul><li>注意：这个令牌只会明文显示一次，建议在配置插件的时候再来生成令牌，直接复制进去，搞丢了又要重新生成一个。 可以将这个<code>token</code>收藏到微信中</li><li>现在保存你刚才的配置，然后将它设置为默认图床，大功告成</li></ul></li></ul></li></ol><h3 id="3-关于Gitee-1-2-2-beta插件的设置有点区别"><a href="#3-关于Gitee-1-2-2-beta插件的设置有点区别" class="headerlink" title="3. 关于Gitee 1.2.2.beta插件的设置有点区别"></a>3. 关于Gitee 1.2.2.beta插件的设置有点区别</h3><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200401191912.png" alt=""></p><p>配置界面：</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200401192127.png" alt=""></p><ul><li>url：图床网站，这里写码云的主页 <a href="https://link.zhihu.com/?target=https%3A//gitee.com">https://gitee.com</a> </li><li>owner：所有者，写上你的码云账号名 </li><li>repo：仓库名称，只要写上仓库名称就行，比如我自己的仓库blogImage </li><li>path：写上路径，一般是img，<strong>这几个项都不用加“ / “符号</strong> </li><li>token：刚才你获取的个人令牌，两个插件是通用的，如果你用了另一个再来用这个，它会自动读取另一个插件的部分配置，不用重新申请 </li><li>message：不用填 </li></ul><h2 id="2-测试"><a href="#2-测试" class="headerlink" title="2. 测试"></a>2. 测试</h2><ul><li><code>picgo</code>支持剪切板直接上传</li><li><code>win10</code>的<code>Snipaste</code>是截图神器 </li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp; 很快！比<code>github</code>快很多，0.1秒上传，而且导入到你的<code>markdown</code>编辑器里面也是秒识别你的图片内容，而如果是github图床上传太慢不说可能还会出现下面这样识别不出来的问题！</p><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h2><p>&nbsp;&nbsp;&nbsp;&nbsp; 博客写作套件<code>Typora + PicGo + Snipaste：</code></p><ul><li><code>Typora</code>写文档</li><li><code>Snipaste</code>一键截图</li><li><code>PicGo</code>一键上传图片返回链接。 </li></ul><h2 id="4-参考"><a href="#4-参考" class="headerlink" title="4. 参考"></a>4. 参考</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/102594554" target="_blank" rel="noopener">LeonG:PicGo + Gitee(码云) 实现markdown图床</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> blog工具 </tag>
            
            <tag> 质量网站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于TensorFolw2的Yolov1程序实现</title>
      <link href="/2020/04/01/20200401-100427/"/>
      <url>/2020/04/01/20200401-100427/</url>
      
        <content type="html"><![CDATA[<h2 id="完整程序实现"><a href="#完整程序实现" class="headerlink" title="完整程序实现"></a>完整程序实现</h2><p>本编程环境使用<code>anaconda</code>+<code>pycharm</code>进行搭建。</p><ul><li><p>python 版本 3.6.1</p></li><li><p>tensorflow版本：2.0.0</p><p>本文给出了Yolov1算法的TensoFlow实现代码。</p></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp; <a href="https://pan.baidu.com/s/1AlPwx8u-mOVVfSCek85B5Q" target="_blank" rel="noopener">权重代码链接:</a> 提取码: <code>d4hd</code></p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""引入相关package"""</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true"># tensorFlow 使用版本1</span><span class="token keyword">import</span> tensorflow<span class="token punctuation">.</span>compat<span class="token punctuation">.</span>v1 <span class="token keyword">as</span> tf<span class="token keyword">import</span> cv2<span class="token comment" spellcheck="true"># 关闭tf的即时执行模式</span>tf<span class="token punctuation">.</span>disable_v2_behavior<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">YOLO</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""定义YOLO class"""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> weights_file<span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""构造函数"""</span>        <span class="token comment" spellcheck="true"># 后面程序打印描述功能的标志位</span>        self<span class="token punctuation">.</span>verbose <span class="token operator">=</span> verbose        <span class="token comment" spellcheck="true"># 检测参数</span>        self<span class="token punctuation">.</span>grid <span class="token operator">=</span> <span class="token number">7</span> <span class="token comment" spellcheck="true"># grid cell CNN输出图片的cell</span>        self<span class="token punctuation">.</span>box <span class="token operator">=</span> <span class="token number">2</span>  <span class="token comment" spellcheck="true"># bounding box 预测框个数</span>        <span class="token comment" spellcheck="true"># 物体检测类别</span>        self<span class="token punctuation">.</span>classes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"aeroplane"</span><span class="token punctuation">,</span> <span class="token string">"bicycle"</span><span class="token punctuation">,</span> <span class="token string">"bird"</span><span class="token punctuation">,</span> <span class="token string">"boat"</span><span class="token punctuation">,</span> <span class="token string">"bottle"</span><span class="token punctuation">,</span>                        <span class="token string">"bus"</span><span class="token punctuation">,</span> <span class="token string">"car"</span><span class="token punctuation">,</span> <span class="token string">"cat"</span><span class="token punctuation">,</span> <span class="token string">"chair"</span><span class="token punctuation">,</span> <span class="token string">"cow"</span><span class="token punctuation">,</span> <span class="token string">"diningtable"</span><span class="token punctuation">,</span>                        <span class="token string">"dog"</span><span class="token punctuation">,</span> <span class="token string">"horse"</span><span class="token punctuation">,</span> <span class="token string">"motorbike"</span><span class="token punctuation">,</span> <span class="token string">"person"</span><span class="token punctuation">,</span> <span class="token string">"pottedplant"</span><span class="token punctuation">,</span>                        <span class="token string">"sheep"</span><span class="token punctuation">,</span> <span class="token string">"sofa"</span><span class="token punctuation">,</span> <span class="token string">"train"</span><span class="token punctuation">,</span> <span class="token string">"tvmonitor"</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># class numbers</span>        self<span class="token punctuation">.</span>class_num <span class="token operator">=</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>classes<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># confidence threshold</span>        self<span class="token punctuation">.</span>conf_threshold <span class="token operator">=</span> <span class="token number">0.2</span>        <span class="token comment" spellcheck="true"># iou threshold</span>        self<span class="token punctuation">.</span>iou_threshold <span class="token operator">=</span> <span class="token number">0.5</span>        <span class="token comment" spellcheck="true"># &lt;class 'tuple'>(7,7,2)</span>        <span class="token comment" spellcheck="true"># 边界框的中心坐标 (x,y) -- 此坐标是相对于per cell 的左上角 而言的</span>        <span class="token comment" spellcheck="true"># 范围(0,1)</span>        self<span class="token punctuation">.</span>x_offset <span class="token operator">=</span> np<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>                                    np<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>                                                <span class="token comment" spellcheck="true"># (7,7,2)</span>                                                np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span>self<span class="token punctuation">.</span>grid<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>grid <span class="token operator">*</span> self<span class="token punctuation">.</span>box<span class="token punctuation">)</span><span class="token punctuation">,</span>                                                <span class="token punctuation">[</span>self<span class="token punctuation">.</span>box<span class="token punctuation">,</span> self<span class="token punctuation">.</span>grid<span class="token punctuation">,</span> self<span class="token punctuation">.</span>grid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># &lt;class 'tuple'>(7,7,2)</span>        self<span class="token punctuation">.</span>y_offset <span class="token operator">=</span> np<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>self<span class="token punctuation">.</span>x_offset<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># shape (7,7,2)</span>        self<span class="token punctuation">.</span>sess <span class="token operator">=</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 创建会话</span>        self<span class="token punctuation">.</span>_build_net<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 构建卷积神经网络</span>        self<span class="token punctuation">.</span>_load_weights<span class="token punctuation">(</span>weights_file<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 加载权重文件</span>    <span class="token keyword">def</span> <span class="token function">_build_net</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""主体网络模型"""</span>        <span class="token comment" spellcheck="true"># 打印神经网络状态信息</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>verbose<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Start to build the network……"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 占位 (None,448,448,3)</span>        <span class="token comment" spellcheck="true"># None是输入的图片的个数</span>        <span class="token comment" spellcheck="true"># 后面三个主要是使用图像的格式 大小：448x448 通道数为3</span>        self<span class="token punctuation">.</span>images <span class="token operator">=</span> tf<span class="token punctuation">.</span>placeholder<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>float32<span class="token punctuation">,</span> <span class="token punctuation">[</span>None<span class="token punctuation">,</span> <span class="token number">448</span><span class="token punctuation">,</span> <span class="token number">448</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        net <span class="token operator">=</span> self<span class="token punctuation">.</span>_conv_layer<span class="token punctuation">(</span>self<span class="token punctuation">.</span>images<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输入张量，卷积核尺寸，步长，数量，层id</span>        net <span class="token operator">=</span> self<span class="token punctuation">.</span>_maxpool_layer<span class="token punctuation">(</span>net<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输入张量，池化核尺寸，步长，层id</span>        net <span class="token operator">=</span> self<span class="token punctuation">.</span>_conv_layer<span class="token punctuation">(</span>net<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">192</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>        net <span class="token operator">=</span> self<span class="token punctuation">.</span>_maxpool_layer<span class="token punctuation">(</span>net<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>        net <span class="token operator">=</span> self<span class="token punctuation">.</span>_conv_layer<span class="token punctuation">(</span>net<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>        net <span class="token operator">=</span> self<span class="token punctuation">.</span>_conv_layer<span class="token punctuation">(</span>net<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>        net <span class="token operator">=</span> self<span class="token punctuation">.</span>_conv_layer<span class="token punctuation">(</span>net<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>        net <span class="token operator">=</span> self<span class="token punctuation">.</span>_conv_layer<span class="token punctuation">(</span>net<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>        net <span class="token operator">=</span> self<span class="token punctuation">.</span>_maxpool_layer<span class="token punctuation">(</span>net<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>        net <span class="token operator">=</span> self<span class="token punctuation">.</span>_conv_layer<span class="token punctuation">(</span>net<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span>        net <span class="token operator">=</span> self<span class="token punctuation">.</span>_conv_layer<span class="token punctuation">(</span>net<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>        net <span class="token operator">=</span> self<span class="token punctuation">.</span>_conv_layer<span class="token punctuation">(</span>net<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span>        net <span class="token operator">=</span> self<span class="token punctuation">.</span>_conv_layer<span class="token punctuation">(</span>net<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>        net <span class="token operator">=</span> self<span class="token punctuation">.</span>_conv_layer<span class="token punctuation">(</span>net<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span>        net <span class="token operator">=</span> self<span class="token punctuation">.</span>_conv_layer<span class="token punctuation">(</span>net<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span>        net <span class="token operator">=</span> self<span class="token punctuation">.</span>_conv_layer<span class="token punctuation">(</span>net<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span>        net <span class="token operator">=</span> self<span class="token punctuation">.</span>_conv_layer<span class="token punctuation">(</span>net<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span>        net <span class="token operator">=</span> self<span class="token punctuation">.</span>_conv_layer<span class="token punctuation">(</span>net<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span>        net <span class="token operator">=</span> self<span class="token punctuation">.</span>_conv_layer<span class="token punctuation">(</span>net<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>        net <span class="token operator">=</span> self<span class="token punctuation">.</span>_maxpool_layer<span class="token punctuation">(</span>net<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>        net <span class="token operator">=</span> self<span class="token punctuation">.</span>_conv_layer<span class="token punctuation">(</span>net<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span>        net <span class="token operator">=</span> self<span class="token punctuation">.</span>_conv_layer<span class="token punctuation">(</span>net<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>        net <span class="token operator">=</span> self<span class="token punctuation">.</span>_conv_layer<span class="token punctuation">(</span>net<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span>        net <span class="token operator">=</span> self<span class="token punctuation">.</span>_conv_layer<span class="token punctuation">(</span>net<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>        net <span class="token operator">=</span> self<span class="token punctuation">.</span>_conv_layer<span class="token punctuation">(</span>net<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span>        net <span class="token operator">=</span> self<span class="token punctuation">.</span>_conv_layer<span class="token punctuation">(</span>net<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span>        net <span class="token operator">=</span> self<span class="token punctuation">.</span>_conv_layer<span class="token punctuation">(</span>net<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span>        net <span class="token operator">=</span> self<span class="token punctuation">.</span>_conv_layer<span class="token punctuation">(</span>net<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输出[None,7,7,1024]</span>        net <span class="token operator">=</span> self<span class="token punctuation">.</span>_flatten<span class="token punctuation">(</span>net<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 将输入张量展开为一维 [batch, 7*7*124]</span>        net <span class="token operator">=</span> self<span class="token punctuation">.</span>_fc_layer<span class="token punctuation">(</span>net<span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> activation<span class="token operator">=</span>self<span class="token punctuation">.</span>_leak_relu<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输入张量，神经元数量，激活函数，层id</span>        net <span class="token operator">=</span> self<span class="token punctuation">.</span>_fc_layer<span class="token punctuation">(</span>net<span class="token punctuation">,</span> <span class="token number">4096</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> activation<span class="token operator">=</span>self<span class="token punctuation">.</span>_leak_relu<span class="token punctuation">)</span>        net <span class="token operator">=</span> self<span class="token punctuation">.</span>_fc_layer<span class="token punctuation">(</span>net<span class="token punctuation">,</span> self<span class="token punctuation">.</span>grid <span class="token operator">*</span> self<span class="token punctuation">.</span>grid <span class="token operator">*</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>class_num <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>box<span class="token punctuation">)</span><span class="token punctuation">,</span>                             <span class="token number">27</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 神经元数量7*7*(20+5*2)=7*7*30 = 1470</span>        <span class="token comment" spellcheck="true"># {TensorShape} (?,1470)</span>        self<span class="token punctuation">.</span>predicts <span class="token operator">=</span> net        <span class="token keyword">if</span> self<span class="token punctuation">.</span>verbose<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Finished build the network……"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_conv_layer</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> filter_size<span class="token punctuation">,</span> stride<span class="token punctuation">,</span> filter_num<span class="token punctuation">,</span> layer_id<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        卷积层的实现过程        :param x: 输入图像        :param filter_size: kernel的大小        :param stride: 步长        :param filter_num: kernel的个数        :param layer_id: 网络层数        :return: 经过神经网络的图像输出 四维中三维都发生变化 [None, width,height,kernel个数]        """</span>        input_channel <span class="token operator">=</span> x<span class="token punctuation">.</span>get_shape<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>as_list<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 输入通道数</span>        <span class="token comment" spellcheck="true"># 总共的权值初始化均值为0 标准差为0.1的正态分布</span>        weight <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span>            tf<span class="token punctuation">.</span>truncated_normal<span class="token punctuation">(</span><span class="token punctuation">[</span>filter_size<span class="token punctuation">,</span> filter_size<span class="token punctuation">,</span> input_channel<span class="token punctuation">,</span> filter_num<span class="token punctuation">]</span><span class="token punctuation">,</span> stddev<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 权重节点</span>        bias <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">[</span>filter_num<span class="token punctuation">,</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 偏置项</span>        <span class="token comment" spellcheck="true"># 手动padding，不能使用`SAME`,否则会导致坐标计算错误</span>        pad_size <span class="token operator">=</span> filter_size <span class="token operator">//</span> <span class="token number">2</span>        <span class="token comment" spellcheck="true"># 要理解的话需要理解每一维的意义：eg:[None, 7,7,3]</span>        <span class="token comment" spellcheck="true"># 如果要padding的话，就padding 图像的宽度和高度</span>        pad_mat <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>pad_size<span class="token punctuation">,</span> pad_size<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>pad_size<span class="token punctuation">,</span> pad_size<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        x_pad <span class="token operator">=</span> tf<span class="token punctuation">.</span>pad<span class="token punctuation">(</span>x<span class="token punctuation">,</span> pad_mat<span class="token punctuation">)</span>        conv <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>conv2d<span class="token punctuation">(</span>x_pad<span class="token punctuation">,</span> weight<span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> stride<span class="token punctuation">,</span> stride<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">"VALID"</span><span class="token punctuation">)</span>        conv_bias <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>bias_add<span class="token punctuation">(</span>conv<span class="token punctuation">,</span> bias<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 激活函数</span>        output <span class="token operator">=</span> self<span class="token punctuation">.</span>_leak_relu<span class="token punctuation">(</span>conv_bias<span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>verbose<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">" Layer %d : Type=Convolutional Layer, Filter_size=%d, Stride=%d, Filter_num=%d, Output_shape=%s"</span> \                  <span class="token operator">%</span> <span class="token punctuation">(</span>layer_id<span class="token punctuation">,</span> filter_size<span class="token punctuation">,</span> stride<span class="token punctuation">,</span> filter_num<span class="token punctuation">,</span> str<span class="token punctuation">(</span>output<span class="token punctuation">.</span>get_shape<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> output    <span class="token keyword">def</span> <span class="token function">_leak_relu</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        激活函数        :param x: 输入图像        :param alpha: 从leak_relu的图像可以看到        :return: 经过激活函数的输出图像        """</span>        <span class="token comment" spellcheck="true"># 返回alpha * x 和x两者之间的最大值</span>        <span class="token keyword">return</span> tf<span class="token punctuation">.</span>maximum<span class="token punctuation">(</span>alpha <span class="token operator">*</span> x<span class="token punctuation">,</span> x<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_maxpool_layer</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> pool_size<span class="token punctuation">,</span> stride<span class="token punctuation">,</span> layer_id<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        最大池化层        :param x: 输入图像        :param pool_size: 池化尺寸        :param stride: 池化步长        :param layer_id: 层数索引        :return: 输出图像        """</span>        output <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>max_pool<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> pool_size<span class="token punctuation">,</span> pool_size<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> stride<span class="token punctuation">,</span> stride<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">"SAME"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>verbose<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">" Layer %d : Type=Maxpool, Pool_size=%d, Stride=%d, Output_shape=%s"</span> \                  <span class="token operator">%</span> <span class="token punctuation">(</span>layer_id<span class="token punctuation">,</span> pool_size<span class="token punctuation">,</span> stride<span class="token punctuation">,</span> str<span class="token punctuation">(</span>output<span class="token punctuation">.</span>get_shape<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> output    <span class="token keyword">def</span> <span class="token function">_flatten</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        将四维的图像信心展开        eg: [None,7,7,32] ->[None,7*7*32]        :param x: [batch, row, column,channels]        :return: [batch, row * column * channels]        """</span>        x_trans <span class="token operator">=</span> tf<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 转置</span>        nums <span class="token operator">=</span> np<span class="token punctuation">.</span>product<span class="token punctuation">(</span>x<span class="token punctuation">.</span>get_shape<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>as_list<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 列表元素全部相乘</span>        <span class="token keyword">return</span> tf<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>x_trans<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> nums<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_fc_layer</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> neuron_num<span class="token punctuation">,</span> layer_id<span class="token punctuation">,</span> activation<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        全连接层        :param x: [batch, row * column * channels]        :param neuron_num: 权重数量，可也以说是输出尺寸        :param layer_id: 层数索引        :param activation: 激活函数        :return: neuron_num        """</span>        <span class="token comment" spellcheck="true"># 通道数/维数</span>        input_num <span class="token operator">=</span> x<span class="token punctuation">.</span>get_shape<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>as_list<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 均差为0，标准差为0.1的正态分布</span>        weight <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>truncated_normal<span class="token punctuation">(</span><span class="token punctuation">[</span>input_num<span class="token punctuation">,</span> neuron_num<span class="token punctuation">]</span><span class="token punctuation">,</span> stddev<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        bias <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">[</span>neuron_num<span class="token punctuation">,</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        output <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>xw_plus_b<span class="token punctuation">(</span>x<span class="token punctuation">,</span> weight<span class="token punctuation">,</span> bias<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 相当于matmul(x, weights) + biases</span>        <span class="token comment" spellcheck="true"># 正常的全连接城市leak_relu激活函数</span>        <span class="token comment" spellcheck="true"># 最后一层是liner函数</span>        <span class="token keyword">if</span> activation<span class="token punctuation">:</span>            output <span class="token operator">=</span> activation<span class="token punctuation">(</span>output<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 打印该层信心</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>verbose<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Layer %d : Type=Full_connect_layer, Neuron_num=%d, output_shape=%s"</span> \                  <span class="token operator">%</span> <span class="token punctuation">(</span>layer_id<span class="token punctuation">,</span> neuron_num<span class="token punctuation">,</span> str<span class="token punctuation">(</span>output<span class="token punctuation">.</span>get_shape<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> output    <span class="token keyword">def</span> <span class="token function">_load_weights</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> weights_file<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        加载权重文件        :param weights_file: 权重文件        :return: 无        """</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>verbose<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Start to laod the weights file:%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>weights_file<span class="token punctuation">)</span><span class="token punctuation">)</span>        saver <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>Saver<span class="token punctuation">(</span><span class="token punctuation">)</span>        saver<span class="token punctuation">.</span>restore<span class="token punctuation">(</span>self<span class="token punctuation">.</span>sess<span class="token punctuation">,</span> weights_file<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># -----------------------------------------------------------------------------------</span>    <span class="token keyword">def</span> <span class="token function">detect_from_file</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> image<span class="token punctuation">,</span> imshow<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                         detected_boxes_file<span class="token operator">=</span><span class="token string">'boxes_file.txt'</span><span class="token punctuation">,</span> detected_image_file<span class="token operator">=</span><span class="token string">'detected_image.jpg'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        检测图像，并且将边界框 分类结果 坐标保存为txt        :param image: 输入图像        :param imshow: 是否显示        :param detected_boxes_file: 坐标记录        :param detected_image_file: 图像检测结果        :return:        """</span>        image <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>image<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 读入图像</span>        img_h<span class="token punctuation">,</span> img_w<span class="token punctuation">,</span> _ <span class="token operator">=</span> image<span class="token punctuation">.</span>shape  <span class="token comment" spellcheck="true"># 图片的高度和宽度</span>        predicts <span class="token operator">=</span> self<span class="token punctuation">.</span>_detect_from_image<span class="token punctuation">(</span>image<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 将图像输入卷积神经网络进行前向传播计算&lt;class 'tuple'> (1470,)</span>        predict_boxes <span class="token operator">=</span> self<span class="token punctuation">.</span>_interpret_predicts<span class="token punctuation">(</span>predicts<span class="token punctuation">,</span> img_h<span class="token punctuation">,</span> img_w<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 解析预测结果，得到检测框</span>        self<span class="token punctuation">.</span>show_results<span class="token punctuation">(</span>image<span class="token punctuation">,</span> predict_boxes<span class="token punctuation">,</span> imshow<span class="token punctuation">,</span> detected_boxes_file<span class="token punctuation">,</span> detected_image_file<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_detect_from_image</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> image<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        将图像输入卷积神经网络进行前向传播计算        :param image: 原始符合网络规格的图像        :return: 预测结果        """</span>        img_resize <span class="token operator">=</span> cv2<span class="token punctuation">.</span>resize<span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">448</span><span class="token punctuation">,</span> <span class="token number">448</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 缩放图片，使用网络的输入尺寸要求</span>        img_RGB <span class="token operator">=</span> cv2<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>img_resize<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>COLOR_BGR2RGB<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 颜色空间转为RGB</span>        img_np <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>img_RGB<span class="token punctuation">)</span>        _images <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">448</span><span class="token punctuation">,</span> <span class="token number">448</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>        _images<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>img_np <span class="token operator">/</span> <span class="token number">255.0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">-</span> <span class="token number">1.0</span>  <span class="token comment" spellcheck="true"># 图像转数组</span>        <span class="token comment" spellcheck="true"># self.predicts (?,1470)</span>        predicts <span class="token operator">=</span> self<span class="token punctuation">.</span>sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>self<span class="token punctuation">.</span>predicts<span class="token punctuation">,</span> feed_dict<span class="token operator">=</span><span class="token punctuation">{</span>self<span class="token punctuation">.</span>images<span class="token punctuation">:</span> _images<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># including :  7x7x30 = 1470</span>        <span class="token comment" spellcheck="true"># per grid cell:box_classes(20) \scores(2)\ bounding_box(8)</span>        <span class="token keyword">return</span> predicts    <span class="token keyword">def</span> <span class="token function">_interpret_predicts</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> predicts<span class="token punctuation">,</span> img_h<span class="token punctuation">,</span> img_w<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        解析预测结果，得到检测框        :param predicts: 预测结果 7x7x30 = 1470 per grid cell:box_classes(20) \scores(2)\ bounding_box(8)        :param img_h: 原始图像的高度 448        :param img_w: 原始图像的宽度 448        :return: 预测框数据为：[概率,x,y,w,h,类别置信度]        """</span>        <span class="token comment" spellcheck="true"># idx1 = 7x7x20 = 980</span>        idx1 <span class="token operator">=</span> self<span class="token punctuation">.</span>grid <span class="token operator">*</span> self<span class="token punctuation">.</span>grid <span class="token operator">*</span> self<span class="token punctuation">.</span>class_num  <span class="token comment" spellcheck="true"># 7*7* 20类</span>        <span class="token comment" spellcheck="true"># idx2 = 7x7x2 = 98</span>        idx2 <span class="token operator">=</span> idx1 <span class="token operator">+</span> self<span class="token punctuation">.</span>grid <span class="token operator">*</span> self<span class="token punctuation">.</span>grid <span class="token operator">*</span> self<span class="token punctuation">.</span>box  <span class="token comment" spellcheck="true"># 7*7* 2预测框的置信度</span>        <span class="token comment" spellcheck="true"># &lt;class 'tuple'>(7,7,20)</span>        <span class="token comment" spellcheck="true"># predicts[:7x7x20 = 980]</span>        class_prob <span class="token operator">=</span> np<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>predicts<span class="token punctuation">[</span><span class="token punctuation">:</span>idx1<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>grid<span class="token punctuation">,</span> self<span class="token punctuation">.</span>grid<span class="token punctuation">,</span> self<span class="token punctuation">.</span>class_num<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 类别概率</span>        <span class="token comment" spellcheck="true"># &lt;class 'tuple'>(7,7,2)</span>        <span class="token comment" spellcheck="true"># predicts[980: 980+98]</span>        confidence <span class="token operator">=</span> np<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>predicts<span class="token punctuation">[</span>idx1<span class="token punctuation">:</span>idx2<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>grid<span class="token punctuation">,</span> self<span class="token punctuation">.</span>grid<span class="token punctuation">,</span> self<span class="token punctuation">.</span>box<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 检测框置信度</span>        <span class="token comment" spellcheck="true">#&lt;class 'tuple'>(7,7,2,4)</span>        <span class="token comment" spellcheck="true"># predicts[980+98: 1469]</span>        <span class="token comment" spellcheck="true"># 7x7x4x2 = 392</span>        boxes <span class="token operator">=</span> np<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>predicts<span class="token punctuation">[</span>idx2<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>grid<span class="token punctuation">,</span> self<span class="token punctuation">.</span>grid<span class="token punctuation">,</span> self<span class="token punctuation">.</span>box<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 检测框坐标</span>        <span class="token comment" spellcheck="true"># 类别置信度分数</span>        <span class="token comment" spellcheck="true"># (7,7,2,1) x(7,7,1,20) = (7,7,2,20)</span>        scores <span class="token operator">=</span> np<span class="token punctuation">.</span>expand_dims<span class="token punctuation">(</span>confidence<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>expand_dims<span class="token punctuation">(</span>class_prob<span class="token punctuation">,</span>                                                                 <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 扩展维度再相乘 [7,7,2,1]*[7,7,1,20] = [7,7,2,20]</span>        <span class="token comment" spellcheck="true">#(7*7*2 = 98,20)</span>        scores <span class="token operator">=</span> np<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>scores<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>class_num<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># [S*S*B, C] 7*7*2个预测框，每个20个类别预测值 [7*7*2,20]</span>        <span class="token comment" spellcheck="true"># 转换检测框中心的坐标</span>        boxes<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+=</span> self<span class="token punctuation">.</span>x_offset        boxes<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> self<span class="token punctuation">.</span>y_offset        boxes<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">/=</span> self<span class="token punctuation">.</span>grid        <span class="token comment" spellcheck="true"># 检测框的高和宽</span>        boxes<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>square<span class="token punctuation">(</span>boxes<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 相对坐标转为绝对坐标(乘图像的高和宽)</span>        boxes<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*=</span> img_w        boxes<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*=</span> img_h        boxes<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">*=</span> img_w        boxes<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">*=</span> img_h        <span class="token comment" spellcheck="true"># (7,7,2,4) -> (98,4)</span>        boxes <span class="token operator">=</span> np<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>boxes<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 将类别置信度分数过低的置为0</span>        scores<span class="token punctuation">[</span>scores <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>conf_threshold<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.0</span>        <span class="token comment" spellcheck="true"># 非极大值抑制</span>        self<span class="token punctuation">.</span>_non_max_suppression<span class="token punctuation">(</span>scores<span class="token punctuation">,</span> boxes<span class="token punctuation">)</span>        predict_boxes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># (class, x, y, w, h, scores)</span>        <span class="token comment" spellcheck="true">#(98,) 这里找到了分类置信度最大的索引值</span>        max_idxs <span class="token operator">=</span> np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>scores<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 每一个预测框的最大类别置信分数的索引 scores形状[7*7*2,30]</span>        <span class="token comment" spellcheck="true"># len(scores) = 98</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>scores<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 遍历每个预测框</span>            max_idx <span class="token operator">=</span> max_idxs<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token comment" spellcheck="true"># 遍历scores</span>            <span class="token keyword">if</span> scores<span class="token punctuation">[</span>i<span class="token punctuation">,</span> max_idx<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0.0</span><span class="token punctuation">:</span>                predict_boxes<span class="token punctuation">.</span>append<span class="token punctuation">(</span>                    <span class="token punctuation">(</span>self<span class="token punctuation">.</span>classes<span class="token punctuation">[</span>max_idx<span class="token punctuation">]</span><span class="token punctuation">,</span> boxes<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> boxes<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> boxes<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> boxes<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> scores<span class="token punctuation">[</span>i<span class="token punctuation">,</span> max_idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> predict_boxes    <span class="token keyword">def</span> <span class="token function">_non_max_suppression</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> scores<span class="token punctuation">,</span> boxes<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        非极大值抑制,针对每一类        :param scores: (98,20)        :param boxes: (98,4)        :return:        """</span>        <span class="token comment" spellcheck="true"># 针对于每一类</span>        <span class="token keyword">for</span> c <span class="token keyword">in</span> range<span class="token punctuation">(</span>self<span class="token punctuation">.</span>class_num<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># argsort 从小到大的索引值</span>            <span class="token comment" spellcheck="true"># scores[:, c] 得到全部的98列</span>            <span class="token comment" spellcheck="true"># np.argsort(scores[:, c]) 从小到大的全部98列的索引</span>            sorted_idxs <span class="token operator">=</span> np<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span>scores<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> c<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 排序后的索引</span>            <span class="token comment" spellcheck="true"># 得到每一列的最大值</span>            last <span class="token operator">=</span> len<span class="token punctuation">(</span>sorted_idxs<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>  <span class="token comment" spellcheck="true"># 取最大值用</span>            <span class="token keyword">while</span> last <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># sorted_idxs[last] 每一列的最大值</span>                <span class="token comment" spellcheck="true"># 每一类</span>                <span class="token comment" spellcheck="true"># 如果 第c 类的最大置信分数 直接跳过</span>                <span class="token keyword">if</span> scores<span class="token punctuation">[</span>sorted_idxs<span class="token punctuation">[</span>last<span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">1e</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 类c的最大置信分数scores[sorted_idxs[last], c]</span>                    <span class="token keyword">break</span>                <span class="token comment" spellcheck="true">#</span>                <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>last<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 逐个取最大置信分数，计算iou，超过阈值置为0（如两辆车，各自有多个预测框）</span>                    <span class="token keyword">if</span> scores<span class="token punctuation">[</span>sorted_idxs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">1e</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span>                        <span class="token keyword">continue</span>                    <span class="token keyword">if</span> self<span class="token punctuation">.</span>_iou<span class="token punctuation">(</span>boxes<span class="token punctuation">[</span>sorted_idxs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> boxes<span class="token punctuation">[</span>sorted_idxs<span class="token punctuation">[</span>last<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> self<span class="token punctuation">.</span>iou_threshold<span class="token punctuation">:</span>                        scores<span class="token punctuation">[</span>sorted_idxs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.0</span>                last <span class="token operator">-=</span> <span class="token number">1</span>    <span class="token keyword">def</span> <span class="token function">_iou</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> box1<span class="token punctuation">,</span> box2<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># [x,y,w,h]</span>        <span class="token triple-quoted-string string">"""计算两个预测框的交并比"""</span>        inter_w <span class="token operator">=</span> np<span class="token punctuation">.</span>minimum<span class="token punctuation">(</span>box1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">0.5</span> <span class="token operator">*</span> box1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> box2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">0.5</span> <span class="token operator">*</span> box2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> \                  np<span class="token punctuation">.</span>maximum<span class="token punctuation">(</span>box1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">0.5</span> <span class="token operator">*</span> box1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> box2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">0.5</span> <span class="token operator">*</span> box2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        inter_h <span class="token operator">=</span> np<span class="token punctuation">.</span>minimum<span class="token punctuation">(</span>box1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">0.5</span> <span class="token operator">*</span> box1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> box2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">0.5</span> <span class="token operator">*</span> box2<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> \                  np<span class="token punctuation">.</span>maximum<span class="token punctuation">(</span>box1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">0.5</span> <span class="token operator">*</span> box1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> box2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">0.5</span> <span class="token operator">*</span> box2<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> inter_h <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">or</span> inter_w <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>            inter_area <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            inter_area <span class="token operator">=</span> inter_w <span class="token operator">*</span> inter_h        union_area <span class="token operator">=</span> box1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">*</span> box1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> box2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">*</span> box2<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">-</span> inter_area        <span class="token keyword">return</span> inter_area <span class="token operator">/</span> union_area    <span class="token keyword">def</span> <span class="token function">show_results</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> image<span class="token punctuation">,</span> predict_boxes<span class="token punctuation">,</span> imshow<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> detected_boxes_file<span class="token operator">=</span>None<span class="token punctuation">,</span> detected_image_file<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""在图片上绘制检测框"""</span>        results <span class="token operator">=</span> predict_boxes        img_copy <span class="token operator">=</span> image<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> detected_boxes_file<span class="token punctuation">:</span>            f <span class="token operator">=</span> open<span class="token punctuation">(</span>detected_boxes_file<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 遍历检测框，获取每个的信息</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># i [class,x,y,w,h,scores]</span>            x <span class="token operator">=</span> int<span class="token punctuation">(</span>results<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            y <span class="token operator">=</span> int<span class="token punctuation">(</span>results<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            w <span class="token operator">=</span> int<span class="token punctuation">(</span>results<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>            h <span class="token operator">=</span> int<span class="token punctuation">(</span>results<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>verbose<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">" Class: %s, [x, y, w, h]=[%d, %d, %d, %d], Confidence=%f"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>                results<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> w<span class="token punctuation">,</span> h<span class="token punctuation">,</span> results<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            cv2<span class="token punctuation">.</span>rectangle<span class="token punctuation">(</span>img_copy<span class="token punctuation">,</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> w<span class="token punctuation">,</span> y <span class="token operator">-</span> h<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> w<span class="token punctuation">,</span> y <span class="token operator">+</span> h<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 画检测框</span>            cv2<span class="token punctuation">.</span>rectangle<span class="token punctuation">(</span>img_copy<span class="token punctuation">,</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> w<span class="token punctuation">,</span> y <span class="token operator">-</span> h <span class="token operator">-</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> w<span class="token punctuation">,</span> y <span class="token operator">-</span> h<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 画文本框</span>            cv2<span class="token punctuation">.</span>putText<span class="token punctuation">(</span>img_copy<span class="token punctuation">,</span> results<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'%.2f'</span> <span class="token operator">%</span> results<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> w <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">,</span> y <span class="token operator">-</span> h <span class="token operator">-</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        cv2<span class="token punctuation">.</span>FONT_HERSHEY_SIMPLEX<span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 照片/添加的文字/左上角坐标/字体/字体大小/颜色/字体粗细</span>            <span class="token keyword">if</span> detected_boxes_file<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 将检测框信息写入文件</span>                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>results<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">','</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">','</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">','</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>w<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">','</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>h<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">','</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>                    results<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> imshow<span class="token punctuation">:</span>            cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">'YOLO_small detection'</span><span class="token punctuation">,</span> img_copy<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 显示图片（窗口名称，图片）</span>            cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 等待毫秒数，0表示无限等待</span>        <span class="token keyword">if</span> detected_image_file<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 保存图片</span>            cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span>detected_image_file<span class="token punctuation">,</span> img_copy<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 参数：保存文件名，读入图片</span>        <span class="token keyword">if</span> detected_boxes_file<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 关闭检测框信息文件</span>            f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    yolo <span class="token operator">=</span> YOLO<span class="token punctuation">(</span><span class="token string">"./weights/YOLO_small.ckpt"</span><span class="token punctuation">)</span>    yolo<span class="token punctuation">.</span>detect_from_file<span class="token punctuation">(</span><span class="token string">"./test/car2.jpg"</span><span class="token punctuation">)</span></code></pre><p>参考资料:</p><ul><li><a href="https://zhuanlan.zhihu.com/p/32525231" target="_blank" rel="noopener">目标检测|YOLO原理与实现</a></li><li><a href="https://github.com/xiaohu2015/DeepLearning_tutorials/blob/master/ObjectDetections/yolo/yolo_tf.py" target="_blank" rel="noopener">DeepLearning_tutorials</a> </li><li><a href="https://lanpeihui.top/" target="_blank" rel="noopener">lanpeihui</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Yolov1 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> tensorflow </tag>
            
            <tag> Yolov1Programing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写于2020年3月31日深夜</title>
      <link href="/2020/03/31/20200331-230851/"/>
      <url>/2020/03/31/20200331-230851/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&nbsp;&nbsp;&nbsp;&nbsp; <code>2020年3月31日23:09:52</code> ，即将进入春天的四月份，恰逢今天晚上把自己的小窝(<code>Blog</code>)搭建的差不多了。看着黑夜中的点点灯光，听着汽车在马路上的喧嚣之身，忽然感阵阵焦虑。</p><h2 id="回首"><a href="#回首" class="headerlink" title="回首"></a>回首</h2><p>&nbsp;&nbsp;&nbsp;&nbsp; 回首研究生的第一个学期，竟然没有学习到新的技能，不能太把老师的任务当回事，还是得自己学好自己的东西。在这半年了，环境变了，身边的人不同了，自己也变得浮躁了，不能静下心来积累知识。自己制定的学习计划一次也没有完成过，总是吊儿郎当。慢慢的和优秀的人的差距越来越大，和比自己差的人的差距变得越来越小，人生就是这样，不进则退。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 信誓旦旦的在研究生开学之前定好学习计划，到今天才发现是一场空，一点都没有完成，今天焦虑的原因很大一部分就是因为这吧，还有一部分就是没钱….。</p><h2 id="翘首以望"><a href="#翘首以望" class="headerlink" title="翘首以望"></a>翘首以望</h2><p>&nbsp;&nbsp;&nbsp;&nbsp; 距离2020年结束，还有275天，也就意味着我的研究生毕设的题目已经定下了，我也做过了研究生一半的时光。我不想在2021年的第一天在遗憾2020年的每一天，遗憾为什么不认真完成自己制定的学习计划。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 在这周之前的周末制定了一份学习计划，学习强度特别大，但是我真的想认真地完成这份计划。如果能够完成，我一定会变得很有底气。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 写的有些乱七八糟，和自己现在的心情一样，可能自己无法用语言无法表达，但是我真的希望我能实现这份学习计划中的内容。</p><h2 id="最大不足之处"><a href="#最大不足之处" class="headerlink" title="最大不足之处"></a>最大不足之处</h2><p>睡觉过多：晚上睡5个半小时足够了，中午30min足够了</p><p>看视频：尤其是虎牙直播的LOL比赛和一起看</p><p>走路和吃饭的时间刷抖音</p><p>试着克服下吧，毕竟离我被卖给企业的时间真的不多了…..</p><h2 id="关于学习计划"><a href="#关于学习计划" class="headerlink" title="关于学习计划"></a>关于学习计划</h2><p>&nbsp;&nbsp;&nbsp;&nbsp; 算了，想了想还是不发了，怕被人看到。其实这篇文章并不想被别人看到的</p><p>学习计划是<code>EXCEL</code>做的，剩下的自己看着玩吧</p><h2 id="关于兼职问题"><a href="#关于兼职问题" class="headerlink" title="关于兼职问题"></a>关于兼职问题</h2><p>&nbsp;&nbsp;&nbsp;&nbsp; 我现在尝试着在知乎上回答问题，开一个公众号，咸鱼卖资源，抖音记录日常，不过我现在想要学习手机摄影和PS操作，毕竟之前P了个效果不满意的图都得要20元</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>&nbsp;&nbsp;&nbsp;&nbsp; 算了，不说了，新更新的逆天邪神还没看，洗洗脸，敷张面膜，就睡吧。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 希望我能记得住今天的这种感受。。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; <code>结束于2020年3月31日23:42:07</code></p><p>&nbsp;&nbsp;&nbsp;&nbsp; 希望以后的每天都是充实的日子。</p><h2 id="每日知识总结"><a href="#每日知识总结" class="headerlink" title="每日知识总结"></a>每日知识总结</h2><ol><li>新建md文件</li><li>添加参考</li><li>有空就仔细写，没空就copy过来</li></ol>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 以笔谈心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>质量网站</title>
      <link href="/2020/03/31/20200331-202916/"/>
      <url>/2020/03/31/20200331-202916/</url>
      
        <content type="html"><![CDATA[<h2 id="网站汇总"><a href="#网站汇总" class="headerlink" title="网站汇总"></a>网站汇总</h2><h3 id="1-设计类"><a href="#1-设计类" class="headerlink" title="1.设计类"></a>1.设计类</h3><ol><li><p><a href="https://www.designevo.com/cn/" target="_blank" rel="noopener">designEvo</a></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/1.png" alt=""></p></li></ol><p>&nbsp;&nbsp;&nbsp;&nbsp; 可制作<code>Logo</code>,能够免费下载低质量的，自己设计的<code>logo</code></p><p>&nbsp;&nbsp;&nbsp;&nbsp; 此博客的<code>logo</code>就是通过这个网站制作的</p><h3 id="2-6个桌面壁纸网站"><a href="#2-6个桌面壁纸网站" class="headerlink" title="2. 6个桌面壁纸网站"></a>2. 6个桌面壁纸网站</h3><ul><li><a href="http://wallls.com/" target="_blank" rel="noopener">wallls.com</a><ul><li>至少网页名字很好记住，在这个网站当中，首先就给了你相应的主题 </li><li>最好的方式是，你可以根据喜欢的颜色来找到喜欢的壁纸，比如这种类似 蒂芙尼蓝，选择好相应壁纸之后，直接点击下载即可 </li></ul></li><li><a href="https://www.wallpaperup.com/" target="_blank" rel="noopener">wallpaperup</a><ul><li>在这个网站上，你可以选择通过分类来找到想要的壁纸，也可以通过屏幕分辨率，适配你本身的电脑屏幕，甚至手机。 </li></ul></li><li><a href="http://simpledesktops.com/" target="_blank" rel="noopener">simpledesktops.com</a><ul><li>如果你喜欢极简设计的壁纸，这个网站就不要错过啦，找到你想要的壁纸，直接下载即可，当然，还能在这里，选择选择 Mac、iOS或者安卓等不同屏幕的适配 </li></ul></li><li><a href="https://stocksnap.io/" target="_blank" rel="noopener">stocksnap</a><ul><li>可自由下载使用的高清晰数码作品素材库，你随时都可以下载自己免费的资源 </li></ul></li><li><a href="https://www.pexels.com/" target="_blank" rel="noopener">pexels</a><ul><li>常用</li><li>高清无码、免费商用，如果还有一个特点，那就是网站好看 </li></ul></li></ul><p>参考：</p><p><a href="https://www.zhihu.com/question/21757507/answer/288387063" target="_blank" rel="noopener">你平时在哪找免费的可商业使用的图片素材？</a></p>]]></content>
      
      
      <categories>
          
          <category> website </category>
          
      </categories>
      
      
        <tags>
            
            <tag> website </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ps技巧</title>
      <link href="/2020/03/31/20200331-201841/"/>
      <url>/2020/03/31/20200331-201841/</url>
      
        <content type="html"><![CDATA[<h2 id="PS技巧汇总"><a href="#PS技巧汇总" class="headerlink" title="PS技巧汇总"></a>PS技巧汇总</h2><p>&nbsp;&nbsp;&nbsp;&nbsp; 用到什么学什么，主要是没时间学啊…</p><h3 id="1-底色透明"><a href="#1-底色透明" class="headerlink" title="1. 底色透明"></a>1. 底色透明</h3><blockquote><p>需求：是为了将<code>Blog</code>的<code>logo</code>和<code>Favicon</code>变为底色透明的图</p></blockquote><ol><li><code>PS</code>中打开图片，并解锁图层</li><li>顶部导航栏：选择 -&gt;色彩范围，点击</li><li>将鼠标放到左边图片白色部分，鼠标变成采集颜色的笔，然后左键点击白色位置，然后再点击右侧确定。这时候图片处白色背景以外，都变成选定状态。 </li><li>步骤四：按<code>Delete</code>键删除白底，这时候图片呈透明状态 </li><li>保存即可</li></ol><h4 id="2-PS图片放大缩小"><a href="#2-PS图片放大缩小" class="headerlink" title="2. PS图片放大缩小"></a>2. PS图片放大缩小</h4><p><code>ctrl+T(自由变换)</code></p><p><code>alt+shift</code>等比缩放</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      <categories>
          
          <category> ps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pycharm使用记录</title>
      <link href="/2020/03/30/20200330-194036/"/>
      <url>/2020/03/30/20200330-194036/</url>
      
        <content type="html"><![CDATA[<h2 id="1-pycharm的调试功能"><a href="#1-pycharm的调试功能" class="headerlink" title="1. pycharm的调试功能"></a>1. pycharm的调试功能</h2><ul><li><p>设置断点</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/%E8%AE%BE%E7%BD%AE%E6%96%AD%E7%82%B9.png" alt=""></p></li><li><p>开始<code>debug</code></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/debug.png" alt=""></p></li><li><p>代码执行页面</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/debug1.png" alt=""></p><ul><li><code>step over</code>（F8快捷键）：在单步执行时，在函数内遇到子函数时不会进入子函数内单步执行，而是将子函数整个执行完再停止，也就是把子函数整个作为一步。在不存在子函数的情况下是和step into效果一样的。简单的说就是，<strong>程序代码越过子函数，但子函数会执行，且不进入。</strong> </li><li><code>step into</code>（F7快捷键）：在单步执行时，遇到子函数就进入并且继续单步执行，有的会跳到源代码里面去执行。 </li><li><code>step into my code</code>（Alt+Shift+F7快捷键）：在单步执行时，遇到子函数就进入并且继续单步执行，不会进入到源码中。 </li><li><code>step out</code>（Shift+F8快捷键）：假如进入了一个函数体中，你看了两行代码，不想看了，跳出当前函数体内，返回到调用此函数的地方，即使用此功能即可。 </li></ul></li></ul><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p> <code>pycharm</code> 为什么在工程性的程序中颇受欢迎，因为它实在是太强大了。。。还有一些拓展功能，大家可以去慕课网上搜下<strong>IntelliJ IDEA神器使用技巧</strong> ,老师讲的非常详细，涉及到许多技巧，<code>idea</code>和<code>pycharm</code>是一家公司出的，所以使用上的技巧也是一样的，可以融会贯通。 </p><h2 id="2-批量删除代码注释"><a href="#2-批量删除代码注释" class="headerlink" title="2.批量删除代码注释"></a>2.批量删除代码注释</h2><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/%E6%89%B9%E9%87%8F%E6%B3%A8%E9%87%8A.png" alt=""></p><h2 id="3-pycharm-取消连按两下shift出现的全局搜索"><a href="#3-pycharm-取消连按两下shift出现的全局搜索" class="headerlink" title="3. pycharm 取消连按两下shift出现的全局搜索"></a>3. pycharm 取消连按两下shift出现的全局搜索</h2><p>在来回切换中英文输入法的时候连按两下shift总是会蹦出来全局搜索框</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200410094735.png" alt="">真的很是麻烦，现在是把这个框给禁用掉</p><p>1.按<code>ctrl+shift+a</code>，弹出搜索框<br>2.输入<code>registry</code>，然后按回车</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200410094757.png" alt="">3.找到<code>ide.suppress.double.click.handler</code>，将后面的复选框勾上<br>4.勾选上复选框后直接点击<code>close</code>，然后双击<code>shift</code>的时候就不会再出现全局搜索框了</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200410100202.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pycharm </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>YoloV1 基于tensorflow2的代码编写过程记录</title>
      <link href="/2020/03/27/20200327-092117/"/>
      <url>/2020/03/27/20200327-092117/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&nbsp;&nbsp;&nbsp;&nbsp; 本来打算使用<code>jupyter</code>来写，但是之间使用<code>jupyter</code>调用<code>opencv</code>的<code>imshow</code>函数显示图片时会卡顿，图像显示的<code>GUI</code>窗体无响应，所以还是使用<code>pycharm</code>来写吧</p><h2 id="pycharm-IDE的基本配置"><a href="#pycharm-IDE的基本配置" class="headerlink" title="pycharm IDE的基本配置"></a>pycharm IDE的基本配置</h2><ol><li><p>setting 在File中</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/setting.png" alt=""></p></li><li><p>设置主题，最好设置为Darcula的主题，偏黑灰色，属于护眼模式，当然也能够装..</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/setting1.png" alt=""></p></li><li><p>显示行号，不解释</p><p>选择-<code>Editor-General-Appearance</code> 选择<code>show line numbers</code>显示行号 </p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/setting2.png" alt=""></p></li><li><p>修改字体大小，默认的字体太不友好了</p><p>选择<code>Editor-Colors&amp;Font-Font</code>，我们可以选择<code>Consolas</code> 字体，字号修改为18</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/setting3.png" alt=""></p></li></ol><h2 id="机器学习相关知识整理"><a href="#机器学习相关知识整理" class="headerlink" title="机器学习相关知识整理"></a>机器学习相关知识整理</h2><h3 id="理解卷积网络中的通道channel"><a href="#理解卷积网络中的通道channel" class="headerlink" title="理解卷积网络中的通道channel"></a>理解卷积网络中的通道channel</h3><p>&nbsp;&nbsp;&nbsp;&nbsp; 在深度学习的算法学习中，都会提到 <code>channels</code> 这个概念。在一般的深度学习框架的 <code>conv2d</code> 中，如 <code>channels</code> 都是必填的一个参数。 </p><p>&nbsp;&nbsp;&nbsp;&nbsp; <code>channels</code> 该如何理解？</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 首先，是<code>tensorflow</code>中给出的，对于输入样本中 <code>channels</code> 的含义。一般的RGB图片，<code>channels</code> 数量是 3 （红、绿、蓝） ;</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 其次，<code>mxnet</code>中提到的，一般 <code>channels</code> 的含义是，<strong>每个卷积层中卷积核的数量</strong>。 </p><h3 id="直观理解channel"><a href="#直观理解channel" class="headerlink" title="直观理解channel"></a>直观理解channel</h3><blockquote><p>图片使用Ng老师的深度学习课程</p></blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp; 如下图，假设现有一个为 6x6x3 的图片样本，使用 3×3×3 的卷积核（filter）进行卷积操作。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 此时输入图片的 <code>channels</code>为 3 ，而卷积核中的 <code>in_channels</code> 与 需要进行卷积操作的数据的<code>channels</code> 一致（这里就是图片样本，为3）。</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/channel1.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp; 接下来，进行卷积操作，卷积核中的（3<em>3</em>3 = 27）27个数字与分别与样本对应相乘后，再进行求和，得到第一个结果。依次进行，最终得到 4×4x1 的上图所示的结果。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; <strong>注意</strong>：在这里有一个让人迷惑的部分，<code>input_image</code>的通道数为3，所以卷积核中的 <code>in_channels</code>的数值也应该为3，这是因为卷积核和图像的相应通道要进行卷积操作，最后还要在加到一块，形成上图所示的4x4x1的输出。</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/channel2.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp; 在实际应用过程中，会使用多个卷积核，这里如果在添加一个3x3x3的卷积核，就会得到4x4x2的结果。</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/channel3.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp; 总结：可以把一个卷积核理解为一个特征，一个物体肯定会有多个特征，所以要使用多个卷积核。</p><ol><li>最初输入的图片样本的<code>channel</code>取决于图片的类型,例如上面的<code>RGB</code>图片的<code>channel</code>=3</li><li>卷积操作完成后输出的<code>out_channels</code>，取决于卷积核的数量。此时的<code>out_channels</code>为下一层<code>conv</code>的卷积核的<code>in_channels</code>。</li><li>如上面，<code>6x6x3</code>的图片需要经过卷积核为<strong>[3x3x3(<code>channel</code>)]</strong>的卷积网络,得到4x4x2的输出，其<code>out_channel</code>=2;此时下一层的卷积核的<code>in_channel</code> = <code>out_channel</code>=2。</li></ol><h3 id="关于tensorflow的get-shape-as-list-函数"><a href="#关于tensorflow的get-shape-as-list-函数" class="headerlink" title="关于tensorflow的get_shape().as_list()函数"></a>关于<code>tensorflow</code>的<code>get_shape().as_list()</code>函数</h3><ul><li><p><code>ndarray</code>是多维数组类型，可以使用<code>x.shape</code>来获得<code>x</code>的维数信息</p></li><li><p><code>Tensor</code>类型，可以使用<code>x.get_shape()</code>来获得维数信息,属于<code>TensorShape</code>的元组类型</p></li><li><p><code>x.get_shape().as_list()</code>是将<code>TensorShape</code>类型转换为<code>list</code>类型</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true"># 这里使用v1版本</span><span class="token keyword">import</span> tensorflow<span class="token punctuation">.</span>compat<span class="token punctuation">.</span>v1 <span class="token keyword">as</span> tf<span class="token keyword">import</span> cv2<span class="token comment" spellcheck="true"># 关闭v2版本</span>tf<span class="token punctuation">.</span>disable_v2_behavior<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""测试x.get_shape().as_list()[-1]"""</span>x <span class="token operator">=</span> tf<span class="token punctuation">.</span>constant<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'x:'</span><span class="token punctuation">,</span>type<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>get_shape<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>y <span class="token operator">=</span> x<span class="token punctuation">.</span>get_shape<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>as_list<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token triple-quoted-string string">""" Result:x: &lt;class 'tensorflow.python.framework.ops.Tensor'>(2, 5)&lt;class 'list'> 5&lt;class 'numpy.ndarray'> (2, 2)"""</span></code></pre></li></ul><h3 id="关于CNN网络中的权值weights和偏置bias的问题"><a href="#关于CNN网络中的权值weights和偏置bias的问题" class="headerlink" title="关于CNN网络中的权值weights和偏置bias的问题"></a>关于CNN网络中的权值<code>weights</code>和偏置<code>bias</code>的问题</h3><p>卷积层计算输出层的大小：</p><ol><li><code>Input_Image</code>：<code>WxHxD</code></li><li><code>kernel</code>：<ul><li><code>filter_num</code>:<code>K</code></li><li><code>filter_size</code>:<code>F</code></li><li><code>stride</code>:<code>S</code></li></ul></li><li>通过参数共享，每一个<code>filter</code>共携带<code>FxFxD</code>个权值，对于整个卷积层，共携带<code>FxFxDxK</code>个权值，此外还有<code>K</code>个偏置（<code>bias</code>）</li></ol><p><strong>CNN调整的是所有卷积核中的数值和偏置</strong></p><h3 id="关于tf-truncated-normal-shape-mean-0-0-stddev-1-0"><a href="#关于tf-truncated-normal-shape-mean-0-0-stddev-1-0" class="headerlink" title="关于tf.truncated_normal(shape, mean=0.0, stddev=1.0)"></a>关于<code>tf.truncated_normal(shape, mean=0.0, stddev=1.0)</code></h3><p>&nbsp;&nbsp;&nbsp;&nbsp; 作用：从阶段的正态分布中输出随机值，生成的值服从具有指定均值和标准差的正态分布，如果生成的值大于平均值2个标准偏差的值将被丢弃重新选择。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 在正态分布的曲线中，横轴区间<code>（μ-σ，μ+σ）</code>内的面积为<code>68.268949%</code>。 </p><p>&nbsp;&nbsp;&nbsp;&nbsp; 横轴区间<code>（μ-2σ，μ+2σ）</code>内的面积为<code>95.449974%</code>。 </p><p>&nbsp;&nbsp;&nbsp;&nbsp; 横轴区间<code>（μ-3σ，μ+3σ）</code>内的面积为<code>99.730020%</code>。 </p><p>&nbsp;&nbsp;&nbsp;&nbsp; X落在<code>（μ-3σ，μ+3σ）</code>以外的概率小于千分之三，在实际问题中常认为相应的事件是不会发生的。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 基本上可以把区间<code>（μ-3σ，μ+3σ）</code>看作是随机变量X实际可能的取值区间，这称之为正态分布的<code>“3σ”</code>原则。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 在<code>tf.truncated_normal</code>中如果x的取值在区间<code>（μ-2σ，μ+2σ）</code>之外则重新进行选择。这样保证了生成的值都在均值附近 。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'使用的计算图模式'</span><span class="token punctuation">)</span>matrix4 <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>truncated_normal<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>mean<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">,</span>stddev<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>init <span class="token operator">=</span> tf<span class="token punctuation">.</span>global_variables_initializer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">with</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span>    sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>init<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>matrix4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""[[[-0.07482259  0.01712328]  [ 0.01182383 -0.09702285]] [[ 0.09984504  0.01924772]  [-0.13555853  0.0730053 ]]]"""</span></code></pre><h3 id="tf-pad-的理解"><a href="#tf-pad-的理解" class="headerlink" title="tf.pad()的理解"></a><code>tf.pad()</code>的理解</h3><ul><li><code>paddings</code> 代表每一维度的最开始和最后面要添加多少行/列</li><li><strong>传入的列数一定要和<code>Tensor</code>的维度一致</strong></li><li>默认填充<code>0</code></li></ul><pre class=" language-python"><code class="language-python">t<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">with</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>pad<span class="token punctuation">(</span>t<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"CONSTANT"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""[[0 0 0 0 0 0 0] [0 0 2 3 4 0 0] [0 0 5 6 7 0 0] [0 0 0 0 0 0 0]]"""</span></code></pre><p>多维数组中的：</p><ul><li>第一个<code>[1,1]</code>表示行<code>paddings</code>，前面添加1行，后面添加1行</li><li>第二个<code>[2,2]</code>表示列<code>paddings</code>，左边添加2列，右边添加2列</li></ul><h3 id="tf-conv2d-input-filter-strides-padding-use-cudnn-on-gpu-No"><a href="#tf-conv2d-input-filter-strides-padding-use-cudnn-on-gpu-No" class="headerlink" title="tf.conv2d(input, filter, strides,padding,use_cudnn_on_gpu=No)"></a><code>tf.conv2d(input, filter, strides,padding,use_cudnn_on_gpu=No)</code></h3><ul><li><p><code>param input</code>: 指需要做卷积的输入图像，它要求是一个<code>Tensor</code>，具有<code>[batch, in_height, in_width, in_channels]</code>这样的<code>shape</code>，具体含义是<code>[训练时一个batch的图片数量, 图片高度, 图片宽度, 图像通道数]</code>，注意这是一个4维的<code>Tensor</code>，要求类型为<code>float32</code>和<code>float64</code>其中之一</p></li><li><p><code>filter</code>:相当于<code>CNN</code>中的卷积核，它要求是一个<code>ensor</code>，具有<code>[filter_height, filter_width, in_channels, out_channels]</code>这样的<code>shape</code>，具体含义是<code>[卷积核的高度，卷积核的宽度，图像通道数，卷积核个数]</code>，要求类型与参数<code>input</code>相同，<strong>有一个地方需要注意，第三维<code>in_channels</code>，就是参数<code>input</code>的第四维</strong></p><p>这个问题详细可见<a href="#直观理解channel">直观理解channel</a></p></li><li><p><code>strides</code>:卷积时在图像每一维的步长，这是一个一维的向量，长度4 </p></li><li><p><code>padding</code>:<code>string</code>类型的量，只能是<code>&quot;SAME&quot;</code>,<code>&quot;VALID&quot;</code>其中之一，这个值决定了不同的卷积方式</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/padding.jpg" alt=""></p><ul><li><code>VALID</code>是采用丢弃的方式,比如上述的<code>input_width=13</code>,只允许滑动2次,多余的元素全部丢掉 </li><li><code>SAME</code>的方式,采用的是补全的方式,对于上述的情况,允许滑动3次,但是需要补3个元素,左奇右偶,在左边补一个0,右边补2个0 </li></ul></li><li><p><code>use_cudnn_on_gpu</code>:<code>use_cudnn_on_gpu:bool</code>类型，是否使用<code>cudnn</code>加速，默认为<code>true</code>,结果返回一个<code>Tensor</code>，这个输出，就是我们常说的<code>feature map</code></p></li><li><p><font style="color:red">题外话：markdown的锚点设置跳转:</font></p><pre><code>[直观理解channel](#直观理解channel)</code></pre></li></ul><h3 id="关于激活函数reluand-leak-relu"><a href="#关于激活函数reluand-leak-relu" class="headerlink" title="关于激活函数reluand leak_relu"></a>关于激活函数<code>relu</code>and <code>leak_relu</code></h3><ul><li><p><code>ReLU</code>是将所有的负值都设为零，正区间为<code>y=x</code></p></li><li><p><code>leak_relu</code>:是给所有的赋值赋予一个非零斜率</p><p>​    <img src="https://gitee.com/homewyk/cloudimg/raw/master/leak_relu.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/relu.png" alt=""></p></li></ul><h3 id="CNN中卷积层的计算细节"><a href="#CNN中卷积层的计算细节" class="headerlink" title="CNN中卷积层的计算细节"></a>CNN中卷积层的计算细节</h3><blockquote><p>搞清楚卷积层中输入和输出之间的尺寸关系</p></blockquote><h4 id="卷积层尺寸的计算原理"><a href="#卷积层尺寸的计算原理" class="headerlink" title="卷积层尺寸的计算原理"></a>卷积层尺寸的计算原理</h4><ul><li><p>输入矩阵格式：4维度 <code>[batch_size, width, height, in_channel]</code></p></li><li><p>输出矩阵格式：4维度<code>[batch_size, width, height, out_channel]</code></p><ul><li>其中<code>width and height</code>的尺寸发生变化</li><li><code>out_channel</code>的大小为卷积核的大小</li></ul></li><li><p>权重矩阵格式： 4维度 <code>[width, height, in_channel, out_channel]</code></p><ul><li>这个是卷积层内部计算使用</li><li><code>width height</code>: 卷积核宽度和高度</li><li><code>in_channel</code>: 这个参数和输入矩阵的<code>in_channel</code>(第四维)</li><li><code>out_channel</code>:这个参数为卷积核的个数</li></ul></li><li><p>上述三者之间的关系：</p><ul><li>卷积核的输入通道数（<code>in Channel</code>）由输入矩阵的输入通道数（<code>In Channel</code>）所决定。（红色标注） </li><li>输出矩阵的通道数（<code>Out Channel</code>）由卷积核的个数(<code>kernel-&gt;Out Channel</code>)所决定。（绿色标注） </li><li>输出矩阵的高度和宽度（<code>height, width</code>）这两个维度的尺寸由输入矩阵、卷积核、扫描方式所共同决定。计算公式如下。（蓝色标注）</li></ul><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/relation.png" alt=""></p><blockquote><p>严格来说还有一个bias ,这里省略掉了,具体例子如下图所示</p></blockquote></li></ul><h4 id="卷积计算举例"><a href="#卷积计算举例" class="headerlink" title="卷积计算举例"></a>卷积计算举例</h4><blockquote><p>以 AlexNet 模型的第一个卷积层为例，</p><p>输入图片的尺寸统一为 227 x 227 x 3 （高度 x 宽度 x 颜色通道数），</p><p>本层一共具有96个卷积核， </p><p>每个卷积核的尺寸都是 11 x 11 x 3。 </p><p>已知 stride = 4， padding = 0， </p><p>假设 batch_size = 256，</p><p>则输出矩阵的高度/宽度为 (227 - 11) / 4 + 1 = 55 </p></blockquote><p><strong>注意一点:</strong> kernel的<code>out channel</code>需要被理解为<code>kernel numbers</code></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/eg1.png" alt=""></p><h5 id="1x1卷积举例"><a href="#1x1卷积举例" class="headerlink" title="1x1卷积举例"></a>1x1卷积举例</h5><blockquote><p>后期 GoogLeNet、ResNet 等经典模型中普遍使用一个像素大小的卷积核作为降低参数复杂度的手段。 </p><p>从下面的运算可以看到，其实 1 x 1 卷积没有什么神秘的，其作用就是将输入矩阵的通道数量缩减后输出（512 降为 32），</p><p>并保持它在宽度和高度维度上的尺寸（227 x 227）。 </p></blockquote><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/eg2.png" alt=""></p><h5 id="全连接层计算举例"><a href="#全连接层计算举例" class="headerlink" title="全连接层计算举例"></a>全连接层计算举例</h5><blockquote><p>实际上，全连接层也可以被视为是一种极端情况的卷积层，</p><p>其卷积核尺寸就是输入矩阵尺寸，因此输出矩阵的高度和宽度尺寸都是1。 </p></blockquote><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/eg3.png" alt=""></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li>总结下来，其实只需要认识到:<ul><li>虽然输入的每一张图像本身具有三个维度，</li><li>但是对于卷积核来讲依然只是一个一维向量。</li><li>卷积核做的，其实就是与感受野范围内的像素点进行点积（而不是矩阵乘法）。</li><li>卷积核个数是查论文查的,如果自己玩,卷积核个数可以随便设置 </li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Yolov1 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> tensorflow </tag>
            
            <tag> 目标识别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录使用Hexo打造个人博客系统二</title>
      <link href="/2020/03/26/20200326-112507/"/>
      <url>/2020/03/26/20200326-112507/</url>
      
        <content type="html"><![CDATA[<blockquote><p>第一篇链接：</p><p>:arrow_down_small: :arrow_down_small:</p><p><a href="https://homewyk.com//2020/03/26/20200326-112506/">记录使用Hexo打造个人博客系统一</a></p></blockquote><h2 id="个性化配置（matery-theme）"><a href="#个性化配置（matery-theme）" class="headerlink" title="个性化配置（matery_theme）"></a>个性化配置（matery_theme）</h2><h3 id="博客的目录结构"><a href="#博客的目录结构" class="headerlink" title="博客的目录结构"></a>博客的目录结构</h3><pre><code>- node_modules- public- scaffolds- source    - _data    - _posts    - about    - archives    - categories    - friends    - tags- themes</code></pre><ul><li><code>node_modules</code>是<code>node.js</code>各种库的目录</li><li><code>public</code>是生成的网页文件目录</li><li><code>scaffolds</code>里面就三个文件，存储着新文章和新页面的初始设置</li><li><code>source</code>是我们最常用到的一个目录，里面存放着文章、各类页面、图像等文件</li><li><code>themes</code>存放着主题文件，一般也用不到</li><li>我们平时写文章只需要关注<code>source/_posts</code>这个文件夹就行了</li></ul><h4 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h4><p>在文件根目录下的<code>_config.yml</code>，就是整个<code>hexo</code>框架的配置文件了。可以在里面修改大部分的配置。详细可参考官方的<a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">配置描述</a> </p><h5 id="网站相关信息"><a href="#网站相关信息" class="headerlink" title="网站相关信息"></a>网站相关信息</h5><p>参数描述：</p><ul><li><code>title</code>网站标题</li><li><code>subtitle</code>网站副标题</li><li><code>description</code>网站描述</li><li><code>author</code>您的名字</li><li><code>language</code>网站使用的语言</li><li><code>timezone</code>网站时区。<code>Hexo</code> 默认使用您电脑的时区。时区列表。比如说：<code>America/New_York, Japan</code>, 和 <code>UTC</code> 。</li></ul><p>其中：</p><ul><li><code>description</code>主要用于<code>SEO</code>，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。</li><li><code>author</code>参数用于主题显示文章的作者。</li></ul><h5 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h5><p>参数描述：</p><ul><li><code>url</code>网址</li><li><code>root</code>网站根目录</li><li><code>permalink</code>文章的<a href="https://hexo.io/zh-cn/docs/permalinks" target="_blank" rel="noopener">永久链接</a>格式</li><li><code>permalink_defaults</code>永久链接中各部分的默认值</li></ul><p>在这里，你需要把<code>url</code>改成你的<strong>网站域名</strong>。</p><p><code>permalink</code>，也就是你生成某个文章时的那个链接格式。</p><p>比如我新建一个文章叫<code>temp.md</code>，那么这个时候他自动生成的地址就是<code>http://yoursite.com/2018/09/05/temp</code>。</p><p>再往下翻，中间这些都默认就好了。 </p><h4 id="theme"><a href="#theme" class="headerlink" title="theme"></a><code>theme</code></h4><p> <code>theme</code>就是选择什么主题，也就是在<code>themes</code>这个文件夹下，在官网上有很多个主题，默认给你安装的是<code>lanscape</code>这个主题。当你需要更换主题时，在官网上下载，把主题的文件放在<code>themes</code>文件夹下，再修改这个主题参数就可以了。 </p><h4 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h4><h5 id="post"><a href="#post" class="headerlink" title="post"></a><code>post</code></h5><p>当你每一次使用代码 </p><pre class=" language-bash"><code class="language-bash">hexo new XXX</code></pre><p>它其实默认使用的是<code>post</code>这个布局，也就是在<code>source</code>文件夹下的<code>_post</code>里面。</p><p><code>Hexo</code>有三种默认布局：<code>post</code>、<code>page</code>和<code>draft</code>，它们分别对应不同的路径，而您自定义的其他布局和<code>post</code>相同，都将储存到<code>source/_posts</code>文件夹。</p><p>而new这个命令其实是：</p><pre class=" language-bash"><code class="language-bash">hexo new <span class="token punctuation">[</span>layout<span class="token punctuation">]</span> <span class="token punctuation">[</span>title<span class="token punctuation">]</span></code></pre><p>只不过这个<code>layout</code>默认是<code>post</code>罢了。 </p><h5 id="page"><a href="#page" class="headerlink" title="page"></a><code>page</code></h5><p>如果你想另起一页，那么可以使用 :</p><pre class=" language-bash"><code class="language-bash">hexo new page newpage</code></pre><p>系统会自动给你在<code>source</code>文件夹下创建一个<code>newpage</code>文件夹，以及<code>newpage</code>文件夹中的<code>index.md</code>，这样你访问的<code>newpage</code>对应的链接就是<a href="http://xxx.xxx/newpage" target="_blank" rel="noopener">http://xxx.xxx/newpage</a> </p><h5 id="draft"><a href="#draft" class="headerlink" title="draft"></a><code>draft</code></h5><p><code>draft</code>是草稿的意思，也就是你如果想写文章，又不希望被看到，那么可以 :</p><pre class=" language-bash"><code class="language-bash">hexo server --draft</code></pre><p>在本地端口中开启服务预览。</p><p>如果你的草稿文件写完了，想要发表到<code>post</code>中:</p><pre class=" language-bash"><code class="language-bash">hexo publish draft newdraft</code></pre><p>就会自动把<code>newdraft.md</code>发送到<code>post</code>中 。</p><h3 id="更改导航栏颜色"><a href="#更改导航栏颜色" class="headerlink" title="更改导航栏颜色"></a>更改导航栏颜色</h3><p>在主题文件的theme/matery /source/css/matery.css 文件中，搜索 .bg-color 来修改背景颜色：  </p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.bg-color</span> </span><span class="token punctuation">{</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right, <span class="token hexcode">#103945</span> <span class="token number">0%</span>, <span class="token hexcode">#c1baa7</span> <span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0.6</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>效果：</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200401204906.png" alt=""></p><h3 id="取消蒙版特效"><a href="#取消蒙版特效" class="headerlink" title="取消蒙版特效"></a>取消蒙版特效</h3><p>在主题文件的 theme/matery /source/css/matery.css 文件中，搜索 .bg-cover:after 注释它： </p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.bg-cover</span><span class="token pseudo-element">:after</span> </span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*-webkit-animation: rainbow 60s infinite;*/</span>    <span class="token comment" spellcheck="true">/*animation: rainbow 60s infinite;*/</span><span class="token punctuation">}</span></code></pre><h3 id="设置首页显示部分"><a href="#设置首页显示部分" class="headerlink" title="设置首页显示部分"></a>设置首页显示部分</h3><pre><code># index page dream text,# 配置首页显示&quot;梦想&quot;的语句.dream:  enable: true  showTitle: true  title: 吉檀迦利  text: &lt;p&gt;离你最近的地方，路途最远，&lt;/p&gt;&lt;br /&gt;&lt;p&gt;最简单的音调，需要最艰苦的练习。&lt;/p&gt;&lt;br /&gt;&lt;p&gt;旅客要在每个生人门口敲叩，才能敲到自己的家门,&lt;/p&gt;&lt;br /&gt;&lt;p&gt;人要在外面到处漂流，最后才能走到最深的内殿。&lt;/p&gt;&lt;br /&gt;&lt;p&gt;我的眼睛向空阔处四望，最后才合上眼说：“你原来住在这里！”。&lt;/p&gt;&lt;br /&gt;&lt;p align=&quot;right&quot; style=&quot;margin-right:100px&quot;&gt;——泰戈尔(Rabindranath Thakur)&lt;/p&gt;</code></pre><p>效果显示：</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200401213211.png" alt=""></p><h3 id="设置打字效果副标题"><a href="#设置打字效果副标题" class="headerlink" title="设置打字效果副标题"></a>设置打字效果副标题</h3><pre><code># 打字效果副标题.# 如果有符号 ‘ ，请在 ’ 前面加上 \subtitle:  enable: true  loop: true # 是否循环  showCursor: true # 是否显示光标  startDelay: 300 # 开始延迟  typeSpeed: 100 # 打字速度  backSpeed: 50 # 删除速度  sub1: 天空没有留下鸟的痕迹，但我已飞过  sub2: I leave no trace of wings in the air,but I am glad I have had my flight.</code></pre><p>效果展示：</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200401213337.png" alt=""></p><h3 id="添加404页面"><a href="#添加404页面" class="headerlink" title="添加404页面"></a>添加404页面</h3><p>原来的主题没有<code>404</code>页面，我们加一个。首先在<code>/source/</code>目录下新建一个<code>404.md</code>，非主题目录下的<code>source</code>内容如下： </p><pre class=" language-json"><code class="language-json">title<span class="token operator">:</span> <span class="token number">404</span>date<span class="token operator">:</span> <span class="token number">2019</span>-<span class="token number">08</span>-<span class="token number">5</span> <span class="token number">16</span><span class="token operator">:</span><span class="token number">41</span><span class="token operator">:</span><span class="token number">10</span>type<span class="token operator">:</span> <span class="token string">"404"</span>layout<span class="token operator">:</span> <span class="token string">"404"</span>description<span class="token operator">:</span> <span class="token string">"Oops～，我崩溃了！找不到你想要的页面 :("</span></code></pre><p>然后在<code>/themes/matery/layout/</code>目录下新建一个<code>404.ejs</code>文件，内容如下： </p><pre><code>&lt;style type=&quot;text/css&quot;&gt;    /* don&#39;t remove. */    .about-cover {        height: 75vh;    }&lt;/style&gt;&lt;div class=&quot;bg-cover pd-header about-cover&quot;&gt;    &lt;div class=&quot;container&quot;&gt;        &lt;div class=&quot;row&quot;&gt;            &lt;div class=&quot;col s10 offset-s1 m8 offset-m2 l8 offset-l2&quot;&gt;                &lt;div class=&quot;brand&quot;&gt;                    &lt;div class=&quot;title center-align&quot;&gt;                        404                    &lt;/div&gt;                    &lt;div class=&quot;description center-align&quot;&gt;                        &lt;%= page.description %&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;        &lt;/div&gt;    &lt;/div&gt;&lt;/div&gt;&lt;script&gt;    // 每天切换 banner 图.  Switch banner image every day.    $(&#39;.bg-cover&#39;).css(&#39;background-image&#39;, &#39;url(/medias/banner/&#39; + new Date().getDay() + &#39;.jpg)&#39;);&lt;/script&gt;</code></pre><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><h3 id="1-hexo的网页的TOC的目录显示"><a href="#1-hexo的网页的TOC的目录显示" class="headerlink" title="1. hexo的网页的TOC的目录显示"></a>1. hexo的网页的TOC的目录显示</h3><p>是从二级标题开始能够正常实现的，<code>##</code></p><p>一级标题不能在<code>toc</code>目录中正常显示<code>#</code></p><h3 id="2-博文中添加image"><a href="#2-博文中添加image" class="headerlink" title="2. 博文中添加image"></a>2. 博文中添加<code>image</code></h3><p><strong>好方法：</strong></p><p>通过图床的方式来做</p><p>详情请看<a href="https://homewyk.com/2020/04/01/20200401-122211/">写作四剑客</a></p><p>结束上述配置以后，就可以实现markdowm的img图片的插入了，还能够预览，比下面的方法好多了。</p><hr><p>不好的方法：</p><p>采用相对路径的方法：</p><ol><li><p>配置文件：<code>_config.yml</code></p><pre><code>post_asset_folder: true</code></pre></li><li><p>将<code>_config.yml</code>文件中的配置项<code>post_asset_folder</code>设为<code>true</code>后，执行命令<code>$ hexo new post_name</code>，在<code>source/_posts</code>中会生成文章<code>post_name.md</code>和同名文件夹<code>post_name</code>。将图片资源放在<code>post_name</code>中，文章就可以使用相对路径引用图片资源了。 </p></li><li><p>引用的时候还是和之前的markdown语法是不一样的:</p><pre><code>![](image.jpg)</code></pre></li><li><p>当<code>hexo g</code>的时候，会将.md文件和图片文件一块发布到以时间命名的文件夹中。</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/%E5%8F%91%E5%B8%83%E6%95%88%E6%9E%9C.png" alt=""></p></li></ol><h3 id="3-添加首页和推荐页部分的Img设置"><a href="#3-添加首页和推荐页部分的Img设置" class="headerlink" title="3. 添加首页和推荐页部分的Img设置"></a>3. 添加首页和推荐页部分的<code>Img</code>设置</h3><p>需要在文章头部添加：</p><pre><code>img： url链接coverImg: url链接</code></pre><p>或者直接在scaffolds文件夹中的post中添加全局：</p><pre><code>title: {{ title }}id:img:coverImg: date: {{ date }}top: falsecover: falsepassword:toc: truemathjax: truesummary:tags:categories:</code></pre><p>截图：</p><p>本篇博文使用的文件头部：</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200401182625.png" alt=""></p><p>公共头部信息：</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200401182801.png" alt=""></p><p><strong>注意：图床的Image的大小要在1MB以内，要不然会出现加载失败的情况</strong></p><h3 id="4-Hexo-添加自定义静态HTML的解决方法"><a href="#4-Hexo-添加自定义静态HTML的解决方法" class="headerlink" title="4. Hexo 添加自定义静态HTML的解决方法"></a>4. Hexo 添加自定义静态HTML的解决方法</h3><p>使用<code>hexo</code>创建的静态博客，所有博文内容都是有<code>markdown</code>生成，且页面样式也是由下载的主题自动化生成的，那么想要在独立页面中大展身手的前端小伙伴，如何将写好的静态页面引入到<code>hexo</code>博客中呢？<code>html</code>，<code>css</code>，<code>js</code>等文件在<code>hexo</code>项目里如何避免被自动渲染呢？ </p><pre><code>hexo├─ public|  └┈ demo|     ├─ new_file.html|     ├─ css|     └┈ js├─ source|  ├─ _posts|  ├─ demo|  |  ├─ new_file.html|  |  ├─ css|  |  └┈ js|  └┈ space├─ themes|  └┈ next|     └┈ source└┈ _config.yml</code></pre><p>&nbsp;&nbsp;&nbsp;&nbsp; 首先，在根目录下的<code>source</code>文件夹下，新建一个文件夹，用来存放静态页面文件。这里假设文件夹叫<code>demo</code>。 </p><p>&nbsp;&nbsp;&nbsp;&nbsp; 然后，在<code>demo</code>文件夹中放入所需的<code>html</code>文件。这里为<code>new_file.html</code>。 </p><p>&nbsp;&nbsp;&nbsp;&nbsp; <code>hexo -g</code>，<code>public</code>文件夹中就会有相应的<code>demo</code>文件夹和其包含的文件生成。 </p><p>&nbsp;&nbsp;&nbsp;&nbsp; 此时，再在某个<code>md</code>文件中添加一个链接，直接在浏览器中访问地址<code>&quot;xxx/demo/new_file.html&quot;</code>，即可链接到我们新建的<code>new_file</code>页面了。 </p><p>&nbsp;&nbsp;&nbsp;&nbsp; 这时你会发现，我们访问到的<code>new_file</code>页面和在本地打开的并不相同，原因就是，<code>hexo</code>的<code>source</code>文件夹下的所有文件都会自动编译。 </p><p>&nbsp;&nbsp;&nbsp;&nbsp; 这种形式我们也可能用到，就是新引入的页面作为一篇博文的内容展示。这样做的话，就和写一篇<code>md</code>文章相差无几。<br>&nbsp;&nbsp;&nbsp;&nbsp; 当然，使用<code>html</code>的好处就是可以随意修改<code>css</code>和<code>js</code>。这里就不建议使用外链的形式引入<code>css</code>、<code>js</code>，因为上面提到过，<code>source</code>文件下的文件都会被编译，从而导致<code>css</code>、<code>js</code>的编译错误。</p><p>那么，有没有方法可以避免文件被编译呢？</p><p>答案是肯定的。只要在文件开头加上 </p><pre><code>---layout: false---</code></pre><p>即可。只是这个方法只适用于<code>html</code>文件，而且每个文件都要加，还是有很大的局限性。除此之外，有个还笨办法，就是把要引用的文件放到<code>themes/(主题名)/source</code>文件夹下，这样也会避免被编译，但本人不建议使用。</p><p>那么没有更好地办法了？</p><hr><p>&nbsp;&nbsp;&nbsp;&nbsp; 打开hexo项目根目录下的配置文件<code>_config.yml</code>，找到<code>skip_render:</code>，在这里就可以配置需要跳过渲染的文件。 </p><p>&nbsp;&nbsp;&nbsp;&nbsp; 例如，我们把所有静态页面放到<code>source</code>文件夹下的<code>demo</code>文件夹中，只要配置 </p><pre><code>skip_render: demo/**</code></pre><p>&nbsp;&nbsp;&nbsp;&nbsp; 就可以使<code>demo</code>下的所有文件（包括子文件）避免被编译。这样的匹配规则在许多前端框架和自动化工具中都有用到，前端小伙伴应该都很熟悉。举几个例子： </p><pre><code>skip_render: demo/*             # 屏蔽demo文件夹下的文件，不包括子文件夹内的内容skip_render: demo/**            # 屏蔽demo文件夹下的所有文件，包括子文件夹内的内容skip_render: demo/index.html    # 屏蔽demo文件夹下的index.html，特指一个文件skip_render: demo/*.html        # 屏蔽demo文件夹下的所有html文件</code></pre><p>写多个筛选条件时，要这样： </p><pre><code>skip_render:    - space/**    - demo/*</code></pre><p>&nbsp;&nbsp;&nbsp;&nbsp; 配置文件写好后，重新生成代码，就可以通过链接访问未经编码的原生页面了。这里有个小问题，在<code>markdown</code>页面里的链接只能在本页面打开，如果想实现以新标签打开链接，可以直接在<code>markdown</code>写<code>&lt;a target=&quot;_blank&quot; href=&quot;#&quot;&gt;&lt;/a&gt;</code>，或者通过<code>js</code>控制。 </p><p><strong>注意：</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp; 在执行<code>hexo g</code>生成代码之前，建议先执行<code>hexo clean</code>将原有代码清空，以免造成混乱。 </p><p>&nbsp;&nbsp;&nbsp;&nbsp; 通过这种方法其实可以有多重实践，在此文件下放很多可以从博客链接过来的东西。比如首页的视频可以直接链接到这个文件夹下。</p><h3 id="5-更换Hexo的网页图标-小图片"><a href="#5-更换Hexo的网页图标-小图片" class="headerlink" title="5.更换Hexo的网页图标/小图片"></a>5.更换Hexo的网页图标/小图片</h3><p>本文介绍的是主题theme配置文件中的修改方式，也就是说仅适用于被修改的主题。 </p><h4 id="制作favicon图标"><a href="#制作favicon图标" class="headerlink" title="制作favicon图标"></a>制作favicon图标</h4><ol><li>备好用作标签页/网页小图标favicon的图片</li><li>搜索<code>favicon 在线</code>，可以看到一些在线图片转favicon的工具<br>我用的是这个（link）： <a href="http://www.bitbug.net/" target="_blank" rel="noopener">bitbug</a></li><li>利用工具做成图标。<br>我做了16x16，与32x32的。</li></ol><h4 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h4><pre><code>favicon: /favicon.png</code></pre><p>直接在相应文件下进行替换</p><p><strong>注意</strong>：是以<code>sources</code>为根目录的</p><h4 id="如何确定favicon信息"><a href="#如何确定favicon信息" class="headerlink" title="如何确定favicon信息"></a>如何确定<code>favicon</code>信息</h4><p>查看网页图标的信息：</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/favicon.png" alt=""></p><h3 id="6-Hexo博客网址变得简洁，使用英文路径"><a href="#6-Hexo博客网址变得简洁，使用英文路径" class="headerlink" title="6. Hexo博客网址变得简洁，使用英文路径"></a>6. Hexo博客网址变得简洁，使用英文路径</h3><h4 id="为什么要是用英文网址"><a href="#为什么要是用英文网址" class="headerlink" title="为什么要是用英文网址"></a>为什么要是用英文网址</h4><p>&nbsp;&nbsp;&nbsp;&nbsp; 一般来说，URL只能使用英文和数字和一些标点符号表示。这是因为网络标准<code>RFC 1738</code> 做了硬性规定。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 虽然在<code>Hexo</code>中的全局配置文件中的网址的构成引用了<code>:title</code>(其实就是markdown的文件名称)可以显示中文的网址，但是复制粘贴到记事本会发现得到的是一大串百分号之类的“乱码”（其实这并不是乱码，而是中文被转码成十六进制编码的结果），看起来不怎么好看。</p><h4 id="解决方法-经使用不大好，使用法2"><a href="#解决方法-经使用不大好，使用法2" class="headerlink" title="解决方法(经使用不大好，使用法2)"></a>解决方法(经使用不大好，使用法2)</h4><p>我们可以在生成<code>markdown</code>文件名称的时候，使用全英文作为文件名称。</p><p>在博客根目录下的配置文件中(<code>_config.yml</code>)中进行修改:</p><pre><code>#permalink: :year/:month/:day/:title # 这是原配置permalink: :year/:title/ # 替换为此新配置</code></pre><h4 id="解决方法2"><a href="#解决方法2" class="headerlink" title="解决方法2"></a>解决方法2</h4><p>通过添加文章<code>id</code>来实现</p><p>需要修改2个部分：</p><p>我们可以在博客根目录的配置文件（<code>_config.yml</code>）中这样修改：</p><pre><code>#permalink: :year/:month/:day/:title # 这是原配置permalink: :year/:id/ # 替换为此新配置</code></pre><p>并且在<code>.\scaffolds\post.md</code>中修改为：</p><p>（注意新增了一个<code>id:</code>）</p><pre><code>title: {{ title }}id: date: {{ date }}updated: {{ date }}categories:tags:permalink: ---</code></pre><p>在写文档时需要添加id信息:</p><pre><code>title: 如何让你的Hexo博客网址使用全英文路径id: 123456789-abcddate: 2017-12-30 20:57:46updated: 2017-12-30categories: 后台01 文档管理tags:permalink:---</code></pre><p>不过为了命名规范（同时也是为了方便记忆），我的做法是使用创建日期中的<code>月+日+时+分+秒</code>来定义一个id，比如使用<code>1230-205746</code>作为<code>id</code>。 </p><h3 id="7-解决Mathjax的换行问题"><a href="#7-解决Mathjax的换行问题" class="headerlink" title="7. 解决Mathjax的换行问题"></a>7. 解决Mathjax的换行问题</h3><p>我们平时使用markdown写文档的时候，免不了会碰到数学公式，好在有强大的<a href="https://www.mathjax.org/" target="_blank" rel="noopener">Mathjax</a>,可以解析网页上的数学公式，与hexo的结合也很简单，可以手动加入js，或者直接使用<a href="https://github.com/akfish/hexo-math" target="_blank" rel="noopener">hexo-math</a>插件.大部分情况下都是可以的，但是Markdwon本身的特殊符号与Latex中的符号会出现冲突的时候:</p><ul><li><code>—</code>的转义，在markdown中，<code>_</code>是斜体，但是在latex中，却有下标的意思，就会出现问题。</li><li>\的换行，在markdown中，\会被转义为\,这样也会影响影响mathjax对公式中的\进行渲染</li></ul><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>hexo默认使用<code>marked.js</code>去解析我们写的markdown，比如一些符号，<code>_</code>代表斜体，会被处理为<code>&lt;em&gt;</code>标签， 比如<code>x_i</code>在开始被渲染的时候，处理为<code>x&lt;em&gt;i&lt;/em&gt;</code>，这个时候mathjax就无法渲染成下标了。 很多符号都有这个问题，比如粗体<code>*</code>,也是无法在mathjax渲染出来的，好在有替代的乘法等,包括<code>\\</code>同理。 所以说到底，是hexo使用的markdown引擎的锅，因为很多其它引擎在这方面处理的很好。 </p><h4 id="解决方法：更换Hexo的markdown引擎"><a href="#解决方法：更换Hexo的markdown引擎" class="headerlink" title="解决方法：更换Hexo的markdown引擎"></a><del>解决方法：更换Hexo的markdown引擎</del></h4><p>这个是我目前使用的方法，直接换发动机,就是把hexo默认的渲染markdown的引擎换掉。查到了有如下几个插件可以使用: </p><p><a href="https://github.com/wzpan/hexo-renderer-pandoc" target="_blank" rel="noopener">hexo-renderer-pandoc</a>, 很强大的解析器，Pandoc的语法完全没有上述问题。 </p><p>下面说一下如何使用pandoc渲染。</p><ol><li><p>首先安装Pandoc，官网提供了Ubuntu的deb安装包，按照官网教程就可以安装完成。</p></li><li><p>就是卸载hexo默认的markd,再安装新的:</p><pre><code>npm uninstall hexo-renderer-marked --savenpm install hexo-renderer-pandoc --save</code></pre></li></ol><p>如果决定要换的话，还是更换为Pandoc吧，虽然比较笨重，需要首先安装Pandoc, 不过的确可以完美解决上述的不兼容问题，虽然它的语法与markdown有些微的差异，不过常用的几乎都一样。</p><p><a href="https://segmentfault.com/a/1190000007261752" target="_blank" rel="noopener">解决Mathjax的换行问题</a></p><p>上述的实现会造成代码块出现底部横线的情况！！！</p><p>不推荐使用！！！</p><h4 id="好的解决方法"><a href="#好的解决方法" class="headerlink" title="好的解决方法"></a>好的解决方法</h4><ol><li><p>还是使用原来的：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> uninstall hexo-renderer-pandoc --save<span class="token function">npm</span> <span class="token function">install</span> hexo-renderer-marked --save</code></pre></li><li><p>直接修改正则表达式：</p><p><code>E:\blog\node_modules\marked\lib\marked.js</code></p><pre><code>//escape出修改为：escape: /^\\([`*\[\]()#$+\-.!_&gt;])/,</code></pre><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200408193016.png" alt=""></p><pre><code>//em处修改为：em: /^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</code></pre><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200408193127.png" alt=""></p><p><strong>注意：</strong></p><ul><li>这时在文章里写数学公式基本没有问题了 </li><li><strong>数学公式中如果出现了连续两个{，中间一定要加空格</strong> </li></ul></li></ol><h3 id="8-Hexo-中使用-emoji-和-tasks"><a href="#8-Hexo-中使用-emoji-和-tasks" class="headerlink" title="8. Hexo 中使用 emoji 和 tasks"></a>8. Hexo 中使用 emoji 和 tasks</h3><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md" target="_blank" rel="noopener">github-hexo-theme-matery</a></p><p><a href="https://www.jianshu.com/p/0bfc3029c980" target="_blank" rel="noopener">Hexo中使用emoji和tasks</a></p><p><a href="https://kinboyw.github.io/2018/10/29/Hexo-NexT-%E5%BC%80%E5%90%AF-emoji/" target="_blank" rel="noopener">Hexo开启emoji</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> theme-matery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录使用Hexo打造个人博客系统一</title>
      <link href="/2020/03/26/20200326-112506/"/>
      <url>/2020/03/26/20200326-112506/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&nbsp;&nbsp;&nbsp;&nbsp; 2020年3月26日，开始搭建了第一个自己的独立博客，并且打算坚持持续使用并且进行不断的优化。 </p><p>&nbsp;&nbsp;&nbsp;&nbsp;  关于我：我是一个正在不断学习计算机相关的菜鸟小硕。2020年由于新冠肺炎疫情的影响，以在家3个月有余，每天在家坚持学习（有时效率贼低）。我现在最大的愿望就是毕业的时候能卖个好价格。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 很多人应该也想过搭建一个自己的博客，网上也有一堆详细教程。<strong>我在此打算将这篇文章集百家之长，将自己能够了解到的相关hexo搭建博客的知识整合在这一篇文章中。</strong>这篇文章将不断的进行更新。</p><h2 id="关于搭建博客的工具-Hexo"><a href="#关于搭建博客的工具-Hexo" class="headerlink" title="关于搭建博客的工具-Hexo"></a>关于搭建博客的工具-Hexo</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;  首先要了解一下我们搭建博客要用到的框架。<code>Hexo</code>是高效的静态站点生成框架，它基于<code>Node.js</code>。通过<code>Hexo</code>，你可以直接使用<code>Markdown</code>语法来书写博客。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;   当然你可能对上面的这些概念比较陌生，不用过分担心，其实就是使用工具搭建博客系统罢了。请记住大部分都是满满的套路，直接按部就班就好。 你无需关心网页源代码的具体细节，你只需要用心写好你的博客内容就行。</p><h2 id="搭建博客的步骤"><a href="#搭建博客的步骤" class="headerlink" title="搭建博客的步骤"></a>搭建博客的步骤</h2><h3 id="1-安装Node-js"><a href="#1-安装Node-js" class="headerlink" title="1.安装Node.js"></a>1.安装Node.js</h3><p>首先下载稳定版<a href="https://nodejs.org/dist/v9.11.1/node-v9.11.1-x64.msi" target="_blank" rel="noopener">Node.js</a>，我这里给的是64位的。</p><p>安装选项全部默认，一路点击<code>Next</code>。</p><p>最后安装好之后，按<code>Win+R</code>打开命令提示符，输入<code>node -v</code>和<code>npm -v</code>，如果出现版本号，那么就安装成功了。</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200401185856.png" alt=""></p><h3 id="2-添加国内镜像源"><a href="#2-添加国内镜像源" class="headerlink" title="2. 添加国内镜像源"></a>2. 添加国内镜像源</h3><p>如果没有梯子的话，可以使用阿里的国内镜像进行加速。 </p><pre class=" language-js"><code class="language-js">npm config <span class="token keyword">set</span> registry https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>registry<span class="token punctuation">.</span>npm<span class="token punctuation">.</span>taobao<span class="token punctuation">.</span>org</code></pre><h3 id="3-安装Git"><a href="#3-安装Git" class="headerlink" title="3. 安装Git"></a>3. 安装Git</h3><p>为了把本地的网页文件上传到github上面去，我们需要用到分布式版本控制工具————<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">Git</a>。</p><p>安装选项还是全部默认，只不过最后一步添加路径时选择<code>Use Git from the Windows Command Prompt</code>，这样我们就可以直接在命令提示符里打开git了。</p><p>安装完成后在命令提示符中输入<code>git --version</code>验证是否安装成功</p><h3 id="4-注册Github账号-amp-新建仓库repository"><a href="#4-注册Github账号-amp-新建仓库repository" class="headerlink" title="4.注册Github账号&amp;新建仓库repository"></a>4.注册Github账号&amp;新建仓库repository</h3><ol><li>注册一个<code>Github</code>账号。</li><li>新建项目</li><li>项目名称以<code>你的GitHub账号名字.github.io</code>!! 注意一定要这样写！！</li></ol><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93.png" alt=""></p><h3 id="5-安装Hexo"><a href="#5-安装Hexo" class="headerlink" title="5.安装Hexo"></a>5.安装Hexo</h3><ol><li><p>在合适的地方新建一个文件夹，用来存放自己的博客文件，比如我的博客文件都存放在<code>E:\MyBlog\</code>目录下。</p></li><li><p>在该目录下右键点击<code>Git Bash Here</code>，打开git的控制台窗口，以后我们所有的操作都在<code>git</code>控制台进行，就不要用<code>Windows</code>自带的控制台了。</p></li><li><p>定位到该目录下，输入<code>npm i hexo-cli -g</code>安装Hexo。会有几个报错，无视它就行。</p></li><li><p>安装完后输入<code>hexo -v</code>验证是否安装成功。</p></li><li><p>然后就要初始化我们的网站，输入<code>hexo init</code>初始化文件夹，接着输入<code>npm install</code>安装必备的组件。</p></li><li><p>这样本地的网站配置也弄好啦，输入<code>hexo g</code>（g 为 generator的缩写）生成静态网页，然后输入<code>hexo s</code>（s 为services的缩写）打开本地服务器，然后浏览器打开<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a>，就可以看到我们的博客啦，效果如下:</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/%E5%8E%9F%E5%A7%8B%E6%95%88%E6%9E%9C.jpg" alt=""></p><ol start="7"><li>使用<code>ctrl+c</code>可以关闭本地服务器</li></ol></li></ol><h3 id="6-连接Github和本地"><a href="#6-连接Github和本地" class="headerlink" title="6. 连接Github和本地"></a>6. 连接Github和本地</h3><ol><li>首先右键打开git bash，然后输入下面命令： </li></ol><pre><code>git config --global user.name &quot;YongKunWang&quot;git config --global user.email &quot;Wang_YongKun@yeah.net&quot;</code></pre><p>用户名和邮箱根据你注册github的信息自行修改。</p><ol start="2"><li>然后生成密钥SSH key：</li></ol><pre><code>ssh-keygen -t rsa -C &quot;Wang_YongKun@yeah.net&quot;</code></pre><ol start="3"><li>打开<a href="http://github.com/" target="_blank" rel="noopener">github</a>，在头像下面点击<code>settings</code>，再点击<code>SSH and GPG keys</code>，新建一个SSH，名字随便。 </li><li>git bash中输入 :</li></ol><pre><code>cat ~/.ssh/id_rsa.pub</code></pre><ol start="5"><li><p>将输出的内容复制到框中，点击确定保存。 </p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/ssh%E8%AE%BE%E7%BD%AE.png" alt=""></p></li><li><p>输入<code>ssh -T git@github.com</code>，如果如下图所示，出现你的用户名，那就成功了。</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/20200403114408.png" alt=""></p></li><li><p>打开博客根目录下的<code>_config.yml</code>文件，这是博客的配置文件，在这里你可以修改与博客相关的各种信息。 </p><p>修改最后一行的配置： </p><pre><code>deploy:  type: git  repository: https://github.com/godweiyang/YongKunWang.github.io  branch: master</code></pre><p><code>repository</code>修改为你自己的<code>github</code>项目地址。 </p></li></ol><p><strong>经过以上7个步骤，必要的环境配置条件基本已经完成了！！</strong></p><h3 id="7-测试本地写文章、发布文章"><a href="#7-测试本地写文章、发布文章" class="headerlink" title="7.测试本地写文章、发布文章"></a>7.测试本地写文章、发布文章</h3><p>首先在博客根目录下右键打开git bash，安装一个扩展<code>npm i hexo-deployer-git</code>。</p><p>然后输入<code>hexo new post &quot;article title&quot;</code>，新建一篇文章。</p><p>然后打开<code>E:\MyBlog\source\_posts</code>的目录，可以发现下面多了一个<code>.md</code>文件，可以新建一个<code>images</code>文件用来存放你的图片等数据，另一个就是你的文章文件啦。</p><p>编写完<code>markdown</code>文件后，根目录下输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>可以本地预览效果，最后输入<code>hexo d</code>上传到github上。这时打开你的github.io主页就能看到发布的文章啦。</p><p><strong>我们经常用的关于hexo的4个指令：</strong></p><pre><code>//不需要添加后缀，hexo会自动生成title.md文件hexo new post &quot;title&quot; // g:generatorhexo g// s: servicehexo s// d: deployhexo d</code></pre><h3 id="8-绑定域名"><a href="#8-绑定域名" class="headerlink" title="8. 绑定域名"></a>8. 绑定域名</h3><p>&nbsp;&nbsp;&nbsp;&nbsp; 现在默认的域名还是<code>xxx.github.io</code>，可以直接通过<code>xxx.github.io</code>访问自己搭建的博客系统。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 如果想要绑定自己的域名，可以通过网络购买一个域名，然后进行配置。本人在阿里云购买的域名，如下图所示，并且添加两条解析记录：</p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90.png" alt=""></p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%901.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp; 然后打开自己新建的仓库，点击<code>settings</code>，拉到下面<code>Custom domain</code>处，填上你自己的域名，保存： </p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/%E5%9F%9F%E5%90%8D%E7%BB%91%E5%AE%9A.png" alt=""></p><p>此时在你的<code>github</code>仓库的根目录下会生成一个名字为<code>CNAME</code>的文件，如果没有的话（其实如果本地没有这个文件的话，<code>hexo d</code>会将全部文件上传，此时github仓库会丢失这个文件，所以<code>CNAME</code>这个文件本地一定要有的 ）打开你本地博客<code>/source</code>目录，我的是<code>E:\Myblog\source</code>，新建<code>CNAME</code>文件，注意没有后缀。然后在里面写上你的域名<code>homewyk.com</code>，保存。最后运行<code>hexo g</code>、<code>hexo d</code>上传到github。 </p><h3 id="9-主题推荐"><a href="#9-主题推荐" class="headerlink" title="9.主题推荐"></a>9.主题推荐</h3><p>主题的原地址在这里：<a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">hexo-theme-matery</a>，它的文档写得也非常的详细，还有中英文两个版本，作者回复也很及时。效果图如下，可以看出非常合我的口味： </p><p><img src="https://gitee.com/homewyk/cloudimg/raw/master/theme.png" alt=""></p><p><strong>下转第二篇：个性化设置以及出现的问题：</strong></p><p>:arrow_double_down: :arrow_double_down:</p><p><a href="https://homewyk.com//2020/03/26/20200326-112507/">记录使用Hexo打造个人博客系统二</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md" target="_blank" rel="noopener">github-hexo-theme-matery</a></p><p><a href="https://edfus.xyz/2019/12/blog/" target="_blank" rel="noopener">HexoBlog搭建</a></p><p><a href="https://godweiyang.com/2018/04/13/hexo-blog/#toc-heading-2" target="_blank" rel="noopener">韦阳的博客</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> theme-matery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Blog</title>
      <link href="/2020/03/23/20200323-140000/"/>
      <url>/2020/03/23/20200323-140000/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp; <code>Hello Blog!</code></p><p>&nbsp;&nbsp;&nbsp;&nbsp;测试一下：</p><p><input type="checkbox" checked="checked">  完成基本的Blog搭建</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 完成基本的Blog搭建</p><p><input type="checkbox" checked="checked"> Blog的持续搭建</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 开启新的学习旅程！</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 这将是我研究生乃至后续时间写作的主要地方！</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 互联网虽大，仍旧需要一个小窝来记录！</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 为了排版，再加一行 !</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
