<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Ubuntu的虚拟机设置</title>
      <link href="/2020/04/04/20200404-163009/"/>
      <url>/2020/04/04/20200404-163009/</url>
      
        <content type="html"><![CDATA[<h2 id="VM的安装"><a href="#VM的安装" class="headerlink" title="VM的安装"></a>VM的安装</h2><ul><li>网上软件+破解秘钥</li></ul><h2 id="Ubuntu的安装"><a href="#Ubuntu的安装" class="headerlink" title="Ubuntu的安装"></a>Ubuntu的安装</h2><p>待续…</p><h2 id="系统软件更新"><a href="#系统软件更新" class="headerlink" title="系统软件更新"></a>系统软件更新</h2><h3 id="更新源"><a href="#更新源" class="headerlink" title="更新源"></a>更新源</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 进入目录</span><span class="token function">cd</span> /etc/apt/<span class="token comment" spellcheck="true"># 备份文件</span><span class="token function">cp</span> sources.list sources.list.backup<span class="token comment" spellcheck="true"># 修改文件</span><span class="token function">sudo</span> gedit sources.list<span class="token comment" spellcheck="true"># 将文件里面的东西删除，且将下面链接中的文字复制进去</span><span class="token comment" spellcheck="true"># 保存关闭</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> update<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> upgrade<span class="token comment" spellcheck="true"># 如果出现锁的问题，看下面！！</span></code></pre><p><a href="https://mirror.tuna.tsinghua.edu.cn/help/ubuntu/" target="_blank" rel="noopener">清华大学镜像</a></p><p>###全屏铺满|与主机互通</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> open-vm*</code></pre><h2 id="常见设置"><a href="#常见设置" class="headerlink" title="常见设置"></a>常见设置</h2><h3 id="1-修改主机名"><a href="#1-修改主机名" class="headerlink" title="1. 修改主机名"></a>1. 修改主机名</h3><p>在Ubuntu系统中，快速查看主机名有多种方法： </p><p>其一：打开一个GNOME终端窗口，在命令提示符中可以看到主机名，主机名通常位于“@”符号后； </p><p><strong>如下图所示： test表示用户名 machine表示主机名</strong> </p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200404195220.png" alt=""></p><p>其二:在终端窗口中输入命令：hostname可以查看到当前主机的主机名。</p><pre class=" language-bash"><code class="language-bash">test@machine:桌面$ <span class="token function">hostname</span>machine</code></pre><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200404195742.png" alt=""></p><p>永久修改主机名：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;在Ubuntu系统中永久修改主机名也比较简单。主机名存放在<strong>/etc/hostname</strong>文件中，修改主机名时，编辑hostname文件，在文件中输入新的主机名并保存该文件即可。重启系统后，参照上面介绍的快速查看主机名的办法来确认主机名有没有修改成功。 </p><p>&nbsp;&nbsp;&nbsp;&nbsp; 值的指出的是，在其它Linux发行版中，并非都存在/etc/hostname文件。如Fedora发行版将主机名存放在/etc/sysconfig/network文件中。所以，修改主机名时应注意区分是哪种Linux发行版。 </p><p>第一步：</p><pre class=" language-bash"><code class="language-bash">test@machine:桌面$ <span class="token function">sudo</span> vim /etc/hostname</code></pre><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200404200052.png" alt=""></p><p><strong>第二步：修改/etc/hosts配置文件（可选）</strong></p><p> /etc/hosts存放的是域名与ip的对应关系，域名与主机名没有任何关系，你可以为任何一个IP指定任意一个名字。 </p><pre class=" language-bash"><code class="language-bash">test@machine:桌面$ <span class="token function">sudo</span> vim /etc/hosts</code></pre><p><img src="C:%5CUsers%5Casdw1%5CAppData%5CLocal%5CTemp%5C1586001700445.png" alt="1586001700445"></p><h3 id="2-dash-gt-bash"><a href="#2-dash-gt-bash" class="headerlink" title="2. dash -> bash"></a>2. dash -&gt; bash</h3><p><code>linux shell</code>报错<code>Syntax error: Bad for loop variable:</code></p><pre class=" language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment" spellcheck="true">################################</span><span class="token comment" spellcheck="true"># 9x9 multiplication</span><span class="token comment" spellcheck="true">################################</span><span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">))</span></span><span class="token keyword">do</span>    <span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">))</span></span>    <span class="token keyword">do</span>        <span class="token keyword">echo</span> -ne <span class="token string">" <span class="token variable">${j}</span> * <span class="token variable">${i}</span> = <span class="token variable"><span class="token variable">$((</span> i<span class="token operator">*</span>j <span class="token variable">))</span></span> \t "</span>    <span class="token keyword">done</span><span class="token keyword">echo</span><span class="token keyword">done</span></code></pre><p>执行：sh test.sh 报下面的错误． </p><p><code>Syntax error: Bad for loop variable</code></p><p>因为Ubuntu为了加快开机速度，用dash代替了传统的bash，所以我们这样执行就没问题．</p><pre class=" language-bash"><code class="language-bash"><span class="token function">bash</span> test.sh</code></pre><p>那如果我们只想用sh test.sh 这样的方式执行，怎么办呢？</p><p>解决方法：取消dash</p><pre class=" language-bash"><code class="language-bash">dpkg-reconfigure dash</code></pre><p>出现弹框，选择NO</p><h3 id="3-短路径显示"><a href="#3-短路径显示" class="headerlink" title="3. 短路径显示"></a>3. 短路径显示</h3><p>平时我们使用linux终端命令行的时候，常常会被一个问题困扰，那就是文件路径过长，有时候甚至超过了一行，这样看起来非常别扭，其实只要两步就可以解决这个问题： </p><pre class=" language-bash"><code class="language-bash">test@machine:桌面$ vim ~/.bashrc</code></pre><p>将上面这行代码中的小写w改为大写的W，保存退出(wq) </p><p>vim的查找指令： </p><pre class=" language-bash"><code class="language-bash">:/PS1    </code></pre><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200404200427.png" alt=""></p><pre class=" language-bash"><code class="language-bash"> <span class="token function">source</span> .bashrc </code></pre><p>完成上面两步操作之后，重新进入到一个目录，此时在终端下只显示当前文件所在目录名称。 </p><p>\w ：完整的工作目录名称。家目录会以 ~代替</p><p>\W ：利用basename取得工作目录名称，所以只会列出最后一个目录</p><h3 id="4-vim配置"><a href="#4-vim配置" class="headerlink" title="4. vim配置"></a>4. vim配置</h3><p>Vim 的全局配置一般在<code>/etc/vim/vimrc</code>或者<code>/etc/vimrc</code>，对所有用户生效。用户个人的配置在<code>~/.vimrc</code>。</p><p>如果只对单次编辑启用某个配置项，可以在命令模式下，先输入一个冒号，再输入配置。举例来说，<code>set number</code>这个配置可以写在<code>.vimrc</code>里面，也可以在命令模式输入。</p><p><a href="https://www.ruanyifeng.com/blog/2018/09/vimrc.html" target="_blank" rel="noopener">Vim 配置入门阮一峰</a></p><h3 id="5-apt-get锁的问题"><a href="#5-apt-get锁的问题" class="headerlink" title="5.  apt-get锁的问题"></a>5.  apt-get锁的问题</h3><p>无法获得锁 /var/lib/apt/lists/lock - open (11: 资源暂时不可用)</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">apt-get</span> upgrade<span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># E: 无法获得锁 /var/lib/apt/lists/lock - open (11: 资源暂时不可用)</span><span class="token comment" spellcheck="true"># E: 无法对目录 /var/lib/apt/lists/ 加锁</span><span class="token comment" spellcheck="true"># E: 无法获得锁 /var/lib/dpkg/lock - open (11: 资源暂时不可用)</span><span class="token comment" spellcheck="true"># E: 无法锁定管理目录(/var/lib/dpkg/)，是否有其他进程正占用它？</span></code></pre><p>出现这个问题的原因可能是有另外一个程序正在运行，由于它在运行时，会占用软件源更新时的系统锁（以下称“系统更新锁”，此锁文件在“/var/lib/apt/lists/”目录下），而当有新的apt-get进程生成时，就会因为得不到系统更新锁而出现”E: 无法获得锁 /var/lib/apt/lists/lock - open (11: Resource temporarily unavailable)”错误提示！</p><p>而导致资源被锁的原因，可能是上次安装时没正常完成，而导致出现此状况。</p><p>因此，我们只要将原先的apt-get进程杀死，从新激活新的apt-get进程，就可以让新的软件管理器正常工作了</p><p>方法一：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">ps</span> -e<span class="token operator">|</span><span class="token function">grep</span> apt</code></pre><p>结果：</p><pre class=" language-bash"><code class="language-bash">11669 ?        00:00:02 aptd25379 ?        00:00:00 update-apt-xapi</code></pre><p>执行kill指令</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">kill</span> 25379<span class="token function">sudo</span> <span class="token function">apt-get</span> update</code></pre><p>方法二：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">rm</span> /var/lib/apt/lists/lock<span class="token function">sudo</span> <span class="token function">rm</span> /var/lib/dpkg/lock</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 软件安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> VM </tag>
            
            <tag> 系统安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Yolov1论文翻译中文版本</title>
      <link href="/2020/04/04/20200404-104201/"/>
      <url>/2020/04/04/20200404-104201/</url>
      
        <content type="html"><![CDATA[<h1 id="You-Only-Look-Once-Unified-Real-Time-Object-Detection"><a href="#You-Only-Look-Once-Unified-Real-Time-Object-Detection" class="headerlink" title="You Only Look Once: Unified, Real-Time Object Detection"></a>You Only Look Once: Unified, Real-Time Object Detection</h1><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>&nbsp;&nbsp;&nbsp;&nbsp; 我们提出了YOLO，一种新的目标检测方法。以前的目标检测工作重新利用分类器来执行检测。相反，我们将目标检测框架看作回归问题从空间上分割边界框和相关的类别概率。单个神经网络在一次评估中直接从完整图像上预测边界框和类别概率。由于整个检测流水线是单一网络，因此可以直接对检测性能进行端到端的优化。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 我们的统一架构非常快。我们的基础YOLO模型以45帧/秒的速度实时处理图像。网络的一个较小版本，快速YOLO，每秒能处理惊人的155帧，同时实现其它实时检测器两倍的mAP。与最先进的检测系统相比，YOLO产生了更多的定位误差，但不太可能在背景上的预测假阳性。最后，YOLO学习目标非常通用的表示。当从自然图像到艺术品等其它领域泛化时，它都优于其它检测方法，包括DPM和R-CNN。</p><h2 id="1-引言"><a href="#1-引言" class="headerlink" title="1. 引言"></a>1. 引言</h2><p>&nbsp;&nbsp;&nbsp;&nbsp; 人们瞥一眼图像，立即知道图像中的物体是什么，它们在哪里以及它们如何相互作用。人类的视觉系统是快速和准确的，使我们能够执行复杂的任务，如驾驶时没有多少有意识的想法。快速，准确的目标检测算法可以让计算机在没有专门传感器的情况下驾驶汽车，使辅助设备能够向人类用户传达实时的场景信息，并表现出对一般用途和响应机器人系统的潜力。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 目前的检测系统重用分类器来执行检测。为了检测目标，这些系统为该目标提供一个分类器，并在不同的位置对其进行评估，并在测试图像中进行缩放。像可变形部件模型（DPM）这样的系统使用滑动窗口方法，其分类器在整个图像的均匀间隔的位置上运行[10]。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 最近的方法，如R-CNN使用区域提出方法首先在图像中生成潜在的边界框，然后在这些提出的框上运行分类器。在分类之后，后处理用于细化边界框，消除重复的检测，并根据场景中的其它目标重新定位边界框[13]。这些复杂的流程很慢，很难优化，因为每个单独的组件都必须单独进行训练。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 我们将目标检测重新看作单一的回归问题，直接从图像像素到边界框坐标和类概率。使用我们的系统，您只需要在图像上看一次（YOLO），以预测出现的目标和位置。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; YOLO很简单：参见图1。单个卷积网络同时预测这些盒子的多个边界框和类概率。YOLO在全图像上训练并直接优化检测性能。这种统一的模型比传统的目标检测方法有一些好处。</p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200404105307.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp; <strong>图1：YOLO检测系统。</strong>用YOLO处理图像简单直接。我们的系统（1）将输入图像调整为448×448，（2）在图像上运行单个卷积网络，以及（3）由模型的置信度对所得到的检测进行阈值处理。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 首先，YOLO速度非常快。由于我们将检测视为回归问题，所以我们不需要复杂的流程。测试时我们在一张新图像上简单的运行我们的神经网络来预测检测。我们的基础网络以每秒45帧的速度运行，在Titan X GPU上没有批处理，快速版本运行速度超过150fps。这意味着我们可以在不到25毫秒的延迟内实时处理流媒体视频。此外，YOLO实现了其它实时系统两倍以上的平均精度。关于我们的系统在网络摄像头上实时运行的演示，请参阅我们的项目网页：<a href="http://pjreddie.com/yolo/" target="_blank" rel="noopener">http://pjreddie.com/yolo/</a>。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 其次，YOLO在进行预测时，会对图像进行全局推理。与基于滑动窗口和区域提出的技术不同，YOLO在训练期间和测试时会看到整个图像，所以它隐式地编码了关于类的上下文信息以及它们的外观。快速R-CNN是一种顶级的检测方法[14]，因为它看不到更大的上下文，所以在图像中会将背景块误检为目标。与快速R-CNN相比，YOLO的背景误检数量少了一半。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 第三，YOLO学习目标的泛化表示。当在自然图像上进行训练并对艺术作品进行测试时，YOLO大幅优于DPM和R-CNN等顶级检测方法。由于YOLO具有高度泛化能力，因此在应用于新领域或碰到意外的输入时不太可能出故障。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; YOLO在精度上仍然落后于最先进的检测系统。虽然它可以快速识别图像中的目标，但它仍在努力精确定位一些目标，尤其是小的目标。我们在实验中会进一步检查这些权衡。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 我们所有的训练和测试代码都是开源的。各种预训练模型也都可以下载。</p><h2 id="2-统一检测"><a href="#2-统一检测" class="headerlink" title="2. 统一检测"></a>2. 统一检测</h2><p>&nbsp;&nbsp;&nbsp;&nbsp; 我们将目标检测的单独组件集成到单个神经网络中。我们的网络使用整个图像的特征来预测每个边界框。它还可以同时预测一张图像中的所有类别的所有边界框。这意味着我们的网络全面地推理整张图像和图像中的所有目标。YOLO设计可实现端到端训练和实时的速度，同时保持较高的平均精度。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 我们的系统将输入图像分成$S$ x $S$的网格。如果一个目标的中心落入一个网格单元中，该网格单元负责检测该目标。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 每个网格单元预测这些盒子的B个边界框和置信度分数。这些置信度分数反映了该模型对盒子是否包含目标的信心，以及它预测盒子的准确程度。在形式上，我们将置信度定义为$Pr(Object)∗IOU^{truth}_{pred}$。如果该单元格中不存在目标，则置信度分数应为零。否则，我们希望置信度分数等于预测框与真实值之间联合部分的交集（IOU）。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 每个边界框包含5个预测：x，y，w，h和置信度。(x，y)坐标表示边界框相对于网格单元边界框的中心。宽度和高度是相对于整张图像预测的。最后，置信度预测表示预测框与实际边界框之间的IOU。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;每个网格单元还预测CC个条件类别概率$Pr(Classi|Object)$。这些概率以包含目标的网格单元为条件。每个网格单元我们只预测的一组类别概率，而不管边界框的的数量B是多少。</p><p>在测试时，我们乘以条件类概率和单个盒子的置信度预测，</p><p>$Pr(Classi|Object)∗Pr(Object)∗IOU^{truth}<em>{pred}=Pr(Class</em>{i})∗IOU^{truth}_{pred}$</p><p>为了在Pascal VOC上评估YOLO，我们使用S=7，B=2。Pascal VOC有20个标注类，所以C=20。我们最终的预测是7×7×30的张量。</p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200404105915.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp; <strong>模型。</strong> 我们的系统将检测建模为回归问题。它将图像分成S×S的网格，并且每个网格单元预测B个边界框，这些边界框的置信度以及C个类别概率。这些预测被编码为S×S×(B∗5+C)的张量。</p><h3 id="2-1-网络设计"><a href="#2-1-网络设计" class="headerlink" title="2.1. 网络设计"></a>2.1. 网络设计</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;我们将此模型作为卷积神经网络来实现，并在Pascal VOC检测数据集[9]上进行评估。网络的初始卷积层从图像中提取特征，而全连接层预测输出概率和坐标。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;我们的网络架构受到GoogLeNet图像分类模型的启发[34]。我们的网络有24个卷积层，后面是2个全连接层。我们只使用1×1降维层，后面是3×3卷积层，这与Lin等人[22]类似，而不是GoogLeNet使用的Inception模块。完整的网络如图3所示。</p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200404110013.png" alt=""></p><p><strong>&nbsp;&nbsp;&nbsp;&nbsp;图3：架构。</strong>我们的检测网络有24个卷积层，其次是2个全连接层。交替1×1卷积层减少了前面层的特征空间。我们在ImageNet分类任务上以一半的分辨率（224×224的输入图像）预训练卷积层，然后将分辨率加倍来进行检测。</p><p>我们还训练了快速版本的YOLO，旨在推动快速目标检测的界限。快速YOLO使用具有较少卷积层（9层而不是24层）的神经网络，在这些层中使用较少的滤波器。除了网络规模之外，YOLO和快速YOLO的所有训练和测试参数都是相同的。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;我们网络的最终输出是7×7×30的预测张量。</p><h3 id="2-2-训练"><a href="#2-2-训练" class="headerlink" title="2.2. 训练"></a>2.2. 训练</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;我们在ImageNet 1000类竞赛数据集[30]上预训练我们的卷积图层。对于预训练，我们使用图3中的前20个卷积层，接着是平均池化层和全连接层。我们对这个网络进行了大约一周的训练，并且在ImageNet 2012验证集上获得了单一裁剪图像88%的<code>top-5</code>准确率，与Caffe模型池中的GoogLeNet模型相当。我们使用Darknet框架进行所有的训练和推断[26]。</p><p>然后我们转换模型来执行检测。Ren等人表明，预训练网络中增加卷积层和连接层可以提高性能[29]。按照他们的例子，我们添加了四个卷积层和两个全连接层，并且具有随机初始化的权重。检测通常需要细粒度的视觉信息，因此我们将网络的输入分辨率从224×224变为448×448。</p><p>我们的最后一层预测类概率和边界框坐标。我们通过图像宽度和高度来规范边界框的宽度和高度，使它们落在0和1之间。我们将边界框x和y坐标参数化为特定网格单元位置的偏移量，所以它们边界也在0和1之间。</p><p>我们对最后一层使用线性激活函数，所有其它层使用下面的漏泄修正线性激活：</p><p>​                                                 $ϕ(x)= \begin{cases} x,&amp; \text{ if $x$ &gt;0} \ 0.1x, &amp; \text{otherwise} \end{cases}$</p><p>我们优化了模型输出中的平方和误差。我们使用平方和误差，因为它很容易进行优化，但是它并不完全符合我们最大化平均精度的目标。分类误差与定位误差的权重是一样的，这可能并不理想。另外，在每张图像中，许多网格单元不包含任何对象。这将这些单元格的“置信度”分数推向零，通常压倒了包含目标的单元格的梯度。这可能导致模型不稳定，从而导致训练早期发散。</p><p>为了改善这一点，我们增加了边界框坐标预测损失，并减少了不包含目标边界框的置信度预测损失。我们使用两个参数λcoordλcoord和λnoobjλnoobj来完成这个工作。我们设置λcoord=5λcoord=5和λnoobj=.5λnoobj=.5。</p><p>平方和误差也可以在大盒子和小盒子中同样加权误差。我们的错误指标应该反映出，大盒子小偏差的重要性不如小盒子小偏差的重要性。为了部分解决这个问题，我们直接预测边界框宽度和高度的平方根，而不是宽度和高度。</p><p>YOLO每个网格单元预测多个边界框。在训练时，每个目标我们只需要一个边界框预测器来负责。我们指定一个预测器“负责”根据哪个预测与真实值之间具有当前最高的IOU来预测目标。这导致边界框预测器之间的专业化。每个预测器可以更好地预测特定大小，方向角，或目标的类别，从而改善整体召回率。</p><p>在训练期间，我们优化以下多部分损失函数：</p><p>λcoord∑i=0S2∑j=0B1objij[(xi−x^i)2+(yi−y^i)2]+λcoord∑i=0S2∑j=0B1objij[(wi−−√−w^i−−√)2+(hi−−√−h^i−−√)2]+∑i=0S2∑j=0B1objij(Ci−C^i)2+λnoobj∑i=0S2∑j=0B1noobjij(Ci−C^i)2+∑i=0S21obji∑c∈classes(pi(c)−p^i(c))2λcoord∑i=0S2∑j=0B1ijobj[(xi−x^i)2+(yi−y^i)2]+λcoord∑i=0S2∑j=0B1ijobj[(wi−w^i)2+(hi−h^i)2]+∑i=0S2∑j=0B1ijobj(Ci−C^i)2+λnoobj∑i=0S2∑j=0B1ijnoobj(Ci−C^i)2+∑i=0S21iobj∑c∈classes(pi(c)−p^i(c))2</p><p>1obji1iobj</p><p>ii</p><p>1objij1ijobj</p><p>ii</p><p>jj</p><p>注意，如果目标存在于该网格单元中（前面讨论的条件类别概率），则损失函数仅惩罚分类错误。如果预测器“负责”实际边界框（即该网格单元中具有最高IOU的预测器），则它也仅惩罚边界框坐标错误。</p><p>我们对Pascal VOC 2007和2012的训练和验证数据集进行了大约135个迭代周期的网络训练。在Pascal VOC 2012上进行测试时，我们的训练包含了Pascal VOC 2007的测试数据。在整个训练过程中，我们使用了6464的批大小，0.90.9的动量和0.00050.0005的衰减。</p><p>我们的学习率方案如下：对于第一个迭代周期，我们慢慢地将学习率从10−310−3提高到10−210−2。如果我们从高学习率开始，我们的模型往往会由于不稳定的梯度而发散。我们继续以10−210−2的学习率训练75个迭代周期，然后用10−310−3的学习率训练30个迭代周期，最后用10−410−4的学习率训练30个迭代周期。</p><p>为了避免过度拟合，我们使用丢弃和大量的数据增强。在第一个连接层之后，丢弃层使用=.5=.5的比例，防止层之间的互相适应[18]。对于数据增强，我们引入高达原始图像20%20%大小的随机缩放和转换。我们还在HSV色彩空间中使用高达1.51.5的因子来随机调整图像的曝光和饱和度。</p><h3 id="2-3-推断"><a href="#2-3-推断" class="headerlink" title="2.3. 推断"></a>2.3. 推断</h3><p>就像在训练中一样，预测测试图像的检测只需要一次网络评估。在Pascal VOC上，每张图像上网络预测98个边界框和每个框的类别概率。YOLO在测试时非常快，因为它只需要一次网络评估，不像基于分类器的方法。</p><p>网格设计强化了边界框预测中的空间多样性。通常很明显一个目标落在哪一个网格单元中，而网络只能为每个目标预测一个边界框。然而，一些大的目标或靠近多个网格单元边界的目标可以被多个网格单元很好地定位。非极大值抑制可以用来修正这些多重检测。对于R-CNN或DPM而言，性能不是关键的，非最大抑制会增加2−3%2−3%的mAP。</p><h3 id="2-4-YOLO的限制"><a href="#2-4-YOLO的限制" class="headerlink" title="2.4. YOLO的限制"></a>2.4. YOLO的限制</h3><p>YOLO对边界框预测强加空间约束，因为每个网格单元只预测两个盒子，只能有一个类别。这个空间约束限制了我们的模型可以预测的邻近目标的数量。我们的模型与群组中出现的小物体（比如鸟群）进行斗争。</p><p>由于我们的模型学习从数据中预测边界框，因此它很难泛化到新的、不常见的方向比或配置的目标。我们的模型也使用相对较粗糙的特征来预测边界框，因为我们的架构具有来自输入图像的多个下采样层。</p><p>最后，当我们训练一个近似检测性能的损失函数时，我们的损失函数会同样的对待小边界框与大边界框的误差。大边界框的小误差通常是良性的，但小边界框的小误差对IOU的影响要大得多。我们的主要错误来源是不正确的定位。</p><h3 id="3-与其它检测系统的比较"><a href="#3-与其它检测系统的比较" class="headerlink" title="3. 与其它检测系统的比较"></a>3. 与其它检测系统的比较</h3><p>目标检测是计算机视觉中的核心问题。检测流程通常从输入图像上（Haar [25]，SIFT [23]，HOG [4]，卷积特征[6]）提取一组鲁棒特征开始。然后，分类器[36,21,13,10]或定位器[1,32]被用来识别特征空间中的目标。这些分类器或定位器在整个图像上或在图像中的一些子区域上以滑动窗口的方式运行[35,15,39]。我们将YOLO检测系统与几种顶级检测框架进行比较，突出了关键的相似性和差异性。</p><p><strong>可变形部件模型。</strong>可变形零件模型（DPM）使用滑动窗口方法进行目标检测[10]。DPM使用不相交的流程来提取静态特征，对区域进行分类，预测高评分区域的边界框等。我们的系统用单个卷积神经网络替换所有这些不同的部分。网络同时进行特征提取，边界框预测，非极大值抑制和上下文推理。代替静态特征，网络内嵌地训练特征并为检测任务优化它们。我们的统一架构导致了比DPM更快，更准确的模型。</p><p><strong>R-CNN。</strong>R-CNN及其变种使用区域提出而不是滑动窗口来查找图像中的目标。选择性搜索[35]产生潜在的边界框，卷积网络提取特征，SVM对边界框进行评分，线性模型调整边界框，非极大值抑制消除重复检测。这个复杂流程的每个阶段都必须独立地进行精确调整，所得到的系统非常慢，测试时每张图像需要超过40秒[14]。</p><p>YOLO与R-CNN有一些相似之处。每个网格单元提出潜在的边界框并使用卷积特征对这些框进行评分。但是，我们的系统对网格单元提出进行了空间限制，这有助于缓解对同一目标的多次检测。我们的系统还提出了更少的边界框，每张图像只有98个，而选择性搜索则只有2000个左右。最后，我们的系统将这些单独的组件组合成一个单一的，共同优化的模型。</p><p><strong>其它快速检测器。</strong>快速和更快的R-CNN通过共享计算和使用神经网络替代选择性搜索来提出区域加速R-CNN框架[14]，[28]。虽然它们提供了比R-CNN更快的速度和更高的准确度，但两者仍然不能达到实时性能。</p><p>许多研究工作集中在加快DPM流程上[31] [38] [5]。它们加速HOG计算，使用级联，并将计算推动到GPU上。但是，实际上只有30Hz的DPM [31]可以实时运行。</p><p>YOLO不是试图优化大型检测流程的单个组件，而是完全抛弃流程，被设计为快速检测。</p><p>像人脸或行人等单类别的检测器可以高度优化，因为他们必须处理更少的变化[37]。YOLO是一种通用的检测器，可以学习同时检测多个目标。</p><p><strong>Deep MultiBox。</strong>与R-CNN不同，Szegedy等人训练了一个卷积神经网络来预测感兴趣区域[8]，而不是使用选择性搜索。MultiBox还可以通过用单类预测替换置信度预测来执行单目标检测。然而，MultiBox无法执行通用的目标检测，并且仍然只是一个较大的检测流程中的一部分，需要进一步的图像块分类。YOLO和MultiBox都使用卷积网络来预测图像中的边界框，但是YOLO是一个完整的检测系统。</p><p><strong>OverFeat。</strong>Sermanet等人训练了一个卷积神经网络来执行定位，并使该定位器进行检测[32]。OverFeat高效地执行滑动窗口检测，但它仍然是一个不相交的系统。OverFeat优化了定位，而不是检测性能。像DPM一样，定位器在进行预测时只能看到局部信息。OverFeat不能推断全局上下文，因此需要大量的后处理来产生连贯的检测。</p><p><strong>MultiGrasp。</strong>我们的工作在设计上类似于Redmon等[27]的抓取检测。我们对边界框预测的网格方法是基于MultiGrasp系统抓取的回归分析。然而，抓取检测比目标检测任务要简单得多。MultiGrasp只需要为包含一个目标的图像预测一个可以抓取的区域。不必估计目标的大小，位置或目标边界或预测目标的类别，只找到适合抓取的区域。YOLO预测图像中多个类别的多个目标的边界框和类别概率。</p><h2 id="4-实验"><a href="#4-实验" class="headerlink" title="4. 实验"></a>4. 实验</h2><p>首先，我们在PASCAL VOC 2007上比较YOLO和其它的实时检测系统。为了理解YOLO和R-CNN变种之间的差异，我们探索了YOLO和R-CNN性能最高的版本之一Fast R-CNN[14]在VOC 2007上错误率。根据不同的误差曲线，我们显示YOLO可以用来重新评估Fast R-CNN检测，并减少背景假阳性带来的错误，从而显著提升性能。我们还展示了在VOC 2012上的结果，并与目前最先进的方法比较了mAP。最后，在两个艺术品数据集上我们显示了YOLO可以比其它检测器更好地泛化到新领域。</p><h3 id="4-1-与其它实时系统的比较"><a href="#4-1-与其它实时系统的比较" class="headerlink" title="4.1. 与其它实时系统的比较"></a>4.1. 与其它实时系统的比较</h3><p>目标检测方面的许多研究工作都集中在快速制定标准检测流程上[5]，[38]，[31]，[14]，[17]，[28]。然而，只有Sadeghi等实际上产生了一个实时运行的检测系统（每秒30帧或更好）[31]。我们将YOLO与DPM的GPU实现进行了比较，其在30Hz或100Hz下运行。虽然其它的努力没有达到实时性的里程碑，我们也比较了它们的相对mAP和速度来检查目标检测系统中精度——性能权衡。</p><p>快速YOLO是PASCAL上最快的目标检测方法；据我们所知，它是现有的最快的目标检测器。具有52.7%52.7%的mAP，实时检测的精度是以前工作的两倍以上。YOLO将mAP推到63.4%63.4%的同时保持了实时性能。</p><p>我们还使用VGG-16训练YOLO。这个模型比YOLO更准确，但也比它慢得多。对于依赖于VGG-16的其它检测系统来说，它是比较有用的，但由于它比实时的YOLO更慢，本文的其它部分将重点放在我们更快的模型上。</p><p>最快的DPM可以在不牺牲太多mAP的情况下有效地加速DPM，但仍然会将实时性能降低2倍[38]。与神经网络方法相比，DPM相对低的检测精度也受到限制。</p><p>减去R的R-CNN用静态边界框提出取代选择性搜索[20]。虽然速度比R-CNN更快，但仍然不能实时，并且由于没有好的边界框提出，准确性受到了严重影响。</p><p>快速R-CNN加快了R-CNN的分类阶段，但是仍然依赖选择性搜索，每张图像需要花费大约2秒来生成边界框提出。因此，它具有很高的mAP，但是0.50.5的fps仍离实时性很远。</p><p>最近更快的R-CNN用神经网络替代了选择性搜索来提出边界框，类似于Szegedy等[8]。在我们的测试中，他们最精确的模型达到了7fps，而较小的，不太精确的模型以18fps运行。VGG-16版本的Faster R-CNN要高出10mAP，但比YOLO慢6倍。Zeiler-Fergus的Faster R-CNN只比YOLO慢了2.5倍，但也不太准确。</p><p>最近更快的R-CNN用神经网络替代了选择性搜索来提出边界框，类似于Szegedy等[8]。在我们的测试中，他们最精确的模型达到了7fps，而较小的，不太精确的模型以18fps运行。VGG-16版本的Faster R-CNN要高出10mAP，但比YOLO慢6倍。Zeiler-Fergus的Faster R-CNN只比YOLO慢了2.5倍，但也不太准确。</p><p><a href="http://upload-images.jianshu.io/upload_images/3232548-5166a535a45e96bf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/3232548-5166a535a45e96bf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Table 1"></a></p><p><strong>表1：Pascal VOC 2007上的实时系统。</strong>比较快速检测器的性能和速度。快速YOLO是Pascal VOC检测记录中速度最快的检测器，其精度仍然是其它实时检测器的两倍。YOLO比快速版本更精确10mAP，同时在速度上仍保持实时性。</p><h3 id="4-2-VOC-2007错误率分析"><a href="#4-2-VOC-2007错误率分析" class="headerlink" title="4.2. VOC 2007错误率分析"></a>4.2. VOC 2007错误率分析</h3><p>为了进一步检查YOLO和最先进的检测器之间的差异，我们详细分析了VOC 2007的结果。我们将YOLO与Fast R-CNN进行比较，因为Fast R-CNN是PASCAL上性能最高的检测器之一并且它的检测代码是可公开得到的。</p><p>我们使用Hoiem等人[19]的方法和工具。对于测试时的每个类别，我们看这个类别的前N个预测。每个预测或者是正确的，或者根据错误类型进行分类：</p><ul><li>Correct：正确的类别且IOU&gt;0.5&gt;0.5。</li><li>Localization：正确的类别，0.1&lt;IOU&lt;0.50.1&lt;IOU&lt;0.5。</li><li>Similar：类别相似，IOU &gt;0.1&gt;0.1。</li><li>Other：类别错误，IOU &gt;0.1&gt;0.1。</li><li>Background：任何IOU &lt;0.1&lt;0.1的目标。</li></ul><p>图4显示了在所有的20个类别上每种错误类型平均值的分解图。</p><p><a href="http://upload-images.jianshu.io/upload_images/3232548-f4d72e8fe4048a7e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/3232548-f4d72e8fe4048a7e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Figure 4"></a></p><p><strong>图4，误差分析：Fast R-CNN vs. YOLO。</strong>这些图显示了各种类别的前N个预测中定位错误和背景错误的百分比（N = #表示目标在那个类别中）。</p><p>YOLO努力地正确定位目标。定位错误占YOLO错误的大多数，比其它错误源加起来都多。Fast R-CNN使定位错误少得多，但背景错误更多。它的检测的13.6%13.6%是不包含任何目标的误报。Fast R-CNN比YOLO预测背景检测的可能性高出近3倍。</p><h3 id="4-3-结合Fast-R-CNN和YOLO"><a href="#4-3-结合Fast-R-CNN和YOLO" class="headerlink" title="4.3. 结合Fast R-CNN和YOLO"></a>4.3. 结合Fast R-CNN和YOLO</h3><p>YOLO比Fast R-CNN的背景误检要少得多。通过使用YOLO消除Fast R-CNN的背景检测，我们获得了显著的性能提升。对于R-CNN预测的每个边界框，我们检查YOLO是否预测一个类似的框。如果是这样，我们根据YOLO预测的概率和两个盒子之间的重叠来对这个预测进行提升。</p><p>最好的Fast R-CNN模型在VOC 2007测试集上达到了71.8%71.8%的mAP。当与YOLO结合时，其mAP增加了3.2%3.2%达到了75.0%75.0%。我们也尝试将最好的Fast R-CNN模型与其它几个版本的Fast R-CNN结合起来。这些模型组合产生了0.30.3到0.6%0.6%之间的小幅增加，详见表2。</p><p><a href="http://upload-images.jianshu.io/upload_images/3232548-189837ac32fda26f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/3232548-189837ac32fda26f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Table 2"></a></p><p><strong>表2：VOC 2007模型组合实验。</strong>我们检验了各种模型与Fast R-CNN最佳版本结合的效果。Fast R-CNN的其它版本只提供很小的好处，而YOLO则提供了显著的性能提升。</p><p>来自YOLO的提升不仅仅是模型组合的副产品，因为组合不同版本的Fast R-CNN几乎没有什么好处。相反，正是因为YOLO在测试时出现了各种各样的错误，所以在提高Fast R-CNN的性能方面非常有效。</p><p>遗憾的是，这个组合并没有从YOLO的速度中受益，因为我们分别运行每个模型，然后结合结果。但是，由于YOLO速度如此之快，与Fast R-CNN相比，不会增加任何显著的计算时间。</p><h3 id="4-4-VOC-2012的结果"><a href="#4-4-VOC-2012的结果" class="headerlink" title="4.4. VOC 2012的结果"></a>4.4. VOC 2012的结果</h3><p>在VOC 2012测试集上，YOLO得分为57.9%57.9%的mAP。这低于现有的最新技术，接近于使用VGG-16的原始R-CNN，见表3。我们的系统与其最接近的竞争对手相比，在小目标上努力。在<code>bottle</code>，<code>sheep</code>和<code>tv/monitor</code>等类别上，YOLO的得分比R-CNN或Feature Edit低8−10%8−10%。然而，在<code>cat</code>和<code>train</code>等其它类别上YOLO实现了更高的性能。</p><p><a href="http://upload-images.jianshu.io/upload_images/3232548-bff0418267352b20.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/3232548-bff0418267352b20.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Table 3"></a></p><p><strong>表3：PASCAL VOC 2012排行榜。</strong>截至2015年11月6日，YOLO与完整<code>comp4</code>（允许外部数据）公开排行榜进行了比较。显示了各种检测方法的平均精度均值和每类的平均精度。YOLO是唯一的实时检测器。Fast R-CNN + YOLO是评分第四高的方法，比Fast R-CNN提升了2.3％。</p><p>我们联合的Fast R-CNN + YOLO模型是性能最高的检测方法之一。Fast R-CNN从与YOLO的组合中获得了2.3%2.3%的提高，在公开排行榜上上移了5位。</p><h3 id="4-5-泛化能力：艺术品中的行人检测"><a href="#4-5-泛化能力：艺术品中的行人检测" class="headerlink" title="4.5. 泛化能力：艺术品中的行人检测"></a>4.5. 泛化能力：艺术品中的行人检测</h3><p>用于目标检测的学术数据集以相同分布获取训练和测试数据。在现实世界的应用中，很难预测所有可能的用例，而且测试数据可能与系统之前看到的不同[3]。我们在Picasso数据集上[12]和People-Art数据集[3]上将YOLO与其它的检测系统进行比较，这两个数据集用于测试艺术品中的行人检测。</p><p>图5显示了YOLO和其它检测方法之间的比较性能。作为参考，我们在<code>person</code>上提供VOC 2007的检测AP，其中所有模型仅在VOC 2007数据上训练。在Picasso数据集上的模型在VOC 2012上训练，而People-Art数据集上的模型则在VOC 2010上训练。</p><p><a href="http://upload-images.jianshu.io/upload_images/3232548-ad521e84069f8289.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/3232548-ad521e84069f8289.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Figure 5"></a></p><p>图5：Picasso和People-Art数据集上的泛化结果。</p><p>R-CNN在VOC 2007上有高AP。然而，当应用于艺术品时，R-CNN明显下降。R-CNN使用选择性搜索来调整自然图像的边界框提出。R-CNN中的分类器步骤只能看到小区域，并且需要很好的边界框提出。</p><p>DPM在应用于艺术品时保持了其AP。之前的工作认为DPM表现良好，因为它具有目标形状和布局的强大空间模型。虽然DPM不会像R-CNN那样退化，但它开始时的AP较低。</p><p>YOLO在VOC 2007上有很好的性能，在应用于艺术品时其AP下降低于其它方法。像DPM一样，YOLO建模目标的大小和形状，以及目标和目标通常出现的位置之间的关系。艺术品和自然图像在像素级别上有很大不同，但是它们在目标的大小和形状方面是相似的，因此YOLO仍然可以预测好的边界框和检测结果。</p><p><a href="http://upload-images.jianshu.io/upload_images/3232548-a8fbfeaf0bf7961a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/3232548-a8fbfeaf0bf7961a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Figure 6"></a></p><p><strong>图6：定性结果。</strong>YOLO在网络采样的艺术品和自然图像上的运行结果。虽然它将人误检成了飞机，但它大部分上是准确的。</p><h2 id="5-现实环境下的实时检测"><a href="#5-现实环境下的实时检测" class="headerlink" title="5. 现实环境下的实时检测"></a>5. 现实环境下的实时检测</h2><p>YOLO是一种快速，精确的目标检测器，非常适合计算机视觉应用。我们将YOLO连接到网络摄像头，并验证它是否能保持实时性能，包括从摄像头获取图像并显示检测结果的时间。</p><p>由此产生的系统是交互式和参与式的。虽然YOLO单独处理图像，但当连接到网络摄像头时，其功能类似于跟踪系统，可在目标移动和外观变化时检测目标。系统演示和源代码可以在我们的项目网站上找到：<a href="http://pjreddie.com/yolo/" target="_blank" rel="noopener">http://pjreddie.com/yolo/</a>。</p><h2 id="6-结论"><a href="#6-结论" class="headerlink" title="6. 结论"></a>6. 结论</h2><p>我们介绍了YOLO，一种统一的目标检测模型。我们的模型构建简单，可以直接在整张图像上进行训练。与基于分类器的方法不同，YOLO直接在对应检测性能的损失函数上训练，并且整个模型联合训练。</p><p>快速YOLO是文献中最快的通用目的的目标检测器，YOLO推动了实时目标检测的最新技术。YOLO还很好地泛化到新领域，使其成为依赖快速，强大的目标检测应用的理想选择。</p><p><strong>致谢</strong>：这项工作得到了ONR N00014-13-1-0720，NSF IIS-1338054和艾伦杰出研究者奖的部分支持。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>[1] M. B. Blaschko and C. H. Lampert. Learning to localize objects with structured output regression. In Computer Vision–ECCV 2008, pages 2–15. Springer, 2008. 4</p><p>[2] L. Bourdev and J. Malik. Poselets: Body part detectors trained using 3d human pose annotations. In International Conference on Computer Vision (ICCV), 2009. 8</p><p>[3] H. Cai, Q. Wu, T. Corradi, and P. Hall. The cross-depiction problem: Computer vision algorithms for recognising objects in artwork and in photographs. arXiv preprint arXiv:1505.00110, 2015. 7</p><p>[4] N. Dalal and B. Triggs. Histograms of oriented gradients for human detection. In Computer Vision and Pattern Recognition, 2005. CVPR 2005. IEEE Computer Society Conference on, volume 1, pages 886–893. IEEE, 2005. 4, 8</p><p>[5] T. Dean, M. Ruzon, M. Segal, J. Shlens, S. Vijaya-narasimhan, J. Yagnik, et al. Fast, accurate detection of 100,000 object classes on a single machine. In Computer Vision and Pattern Recognition (CVPR), 2013 IEEE Conference on, pages 1814–1821. IEEE, 2013. 5</p><p>[6] J. Donahue, Y. Jia, O. Vinyals, J. Hoffman, N. Zhang, E. Tzeng, and T. Darrell. Decaf: A deep convolutional activation feature for generic visual recognition. arXiv preprint arXiv:1310.1531, 2013. 4</p><p>[7] J. Dong, Q. Chen, S. Yan, and A. Yuille. Towards unified object detection and semantic segmentation. In Computer Vision–ECCV 2014, pages 299–314. Springer, 2014. 7</p><p>[8] D.Erhan, C.Szegedy, A.Toshev, and D.Anguelov. Scalable object detection using deep neural networks. In Computer Vision and Pattern Recognition (CVPR), 2014 IEEE Conference on, pages 2155–2162. IEEE, 2014. 5, 6</p><p>[9] M. Everingham, S. M. A. Eslami, L. Van Gool, C. K. I. Williams, J. Winn, and A. Zisserman. The pascal visual object classes challenge: A retrospective. International Journal of Computer Vision, 111(1):98–136, Jan. 2015. 2</p><p>[10] P.F.Felzenszwalb, R.B.Girshick, D.McAllester, and D.Ramanan. Object detection with discriminatively trained part based models. IEEE Transactions on Pattern Analysis and Machine Intelligence, 32(9):1627–1645, 2010. 1, 4</p><p>[11] S. Gidaris and N. Komodakis. Object detection via a multi-region &amp; semantic segmentation-aware CNN model. CoRR, abs/1505.01749, 2015. 7</p><p>[12] S. Ginosar, D. Haas, T. Brown, and J. Malik. Detecting people in cubist art. In Computer Vision-ECCV 2014 Workshops, pages 101–116. Springer, 2014. 7</p><p>[13] R. Girshick, J. Donahue, T. Darrell, and J. Malik. Rich feature hierarchies for accurate object detection and semantic segmentation. In Computer Vision and Pattern Recognition (CVPR), 2014 IEEE Conference on, pages 580–587. IEEE, 2014. 1, 4, 7</p><p>[14] R. B. Girshick. Fast R-CNN. CoRR, abs/1504.08083, 2015. 2, 5, 6, 7</p><p>[15] S. Gould, T. Gao, and D. Koller. Region-based segmentation and object detection. In Advances in neural information processing systems, pages 655–663, 2009. 4</p><p>[16] B. Hariharan, P. Arbeláez, R. Girshick, and J. Malik. Simultaneous detection and segmentation. In Computer Vision–ECCV 2014, pages 297–312. Springer, 2014. 7</p><p>[17] K.He, X.Zhang, S.Ren, and J.Sun. Spatial pyramid pooling in deep convolutional networks for visual recognition. arXiv preprint arXiv:1406.4729, 2014. 5</p><p>[18] G.E.Hinton, N.Srivastava, A.Krizhevsky, I.Sutskever, and R. R. Salakhutdinov. Improving neural networks by preventing co-adaptation of feature detectors. arXiv preprint arXiv:1207.0580, 2012. 4</p><p>[19] D.Hoiem, Y.Chodpathumwan, and Q.Dai. Diagnosing error in object detectors. In Computer Vision–ECCV 2012, pages 340–353. Springer, 2012. 6</p><p>[20] K. Lenc and A. Vedaldi. R-cnn minus r. arXiv preprint arXiv:1506.06981, 2015. 5, 6</p><p>[21] R. Lienhart and J. Maydt. An extended set of haar-like features for rapid object detection. In Image Processing. 2002. Proceedings. 2002<br>International Conference on, volume 1, pages I–900. IEEE, 2002. 4</p><p>[22] M. Lin, Q. Chen, and S. Yan. Network in network. CoRR, abs/1312.4400, 2013. 2</p><p>[23] D. G. Lowe. Object recognition from local scale-invariant features. In Computer vision, 1999. The proceedings of the seventh IEEE international conference on, volume 2, pages 1150–1157. Ieee, 1999. 4</p><p>[24] D. Mishkin. Models accuracy on imagenet 2012 val. <a href="https://github.com/BVLC/caffe/wiki/" target="_blank" rel="noopener">https://github.com/BVLC/caffe/wiki/</a> Models-accuracy-on-ImageNet-2012-val. Accessed: 2015-10-2. 3</p><p>[25] C. P. Papageorgiou, M. Oren, and T. Poggio. A general framework for object detection. In Computer vision, 1998. sixth international conference on, pages 555–562. IEEE, 1998. 4</p><p>[26] J. Redmon. Darknet: Open source neural networks in c. <a href="http://pjreddie.com/darknet/" target="_blank" rel="noopener">http://pjreddie.com/darknet/</a>, 2013–2016. 3</p><p>[27] J.Redmon and A.Angelova. Real-time grasp detection using convolutional neural networks. CoRR, abs/1412.3128, 2014. 5</p><p>[28] S. Ren, K. He, R. Girshick, and J. Sun. Faster r-cnn: Towards real-time object detection with region proposal networks. arXiv preprint arXiv:1506.01497, 2015. 5, 6, 7</p><p>[29] S. Ren, K. He, R. B. Girshick, X. Zhang, and J. Sun. Object detection networks on convolutional feature maps. CoRR, abs/1504.06066, 2015. 3, 7</p><p>[30] O. Russakovsky, J. Deng, H. Su, J. Krause, S. Satheesh, S. Ma, Z. Huang, A. Karpathy, A. Khosla, M. Bernstein, A. C. Berg, and L. Fei-Fei. ImageNet Large Scale Visual Recognition Challenge. International Journal of Computer Vision (IJCV), 2015. 3</p><p>[31] M. A. Sadeghi and D. Forsyth. 30hz object detection with dpm v5. In Computer Vision–ECCV 2014, pages 65–79. Springer, 2014. 5, 6</p><p>[32] P. Sermanet, D. Eigen, X. Zhang, M. Mathieu, R. Fergus, and Y. LeCun. Overfeat: Integrated recognition, localization and detection using convolutional networks. CoRR, abs/1312.6229, 2013. 4, 5</p><p>[33] Z.Shen and X.Xue. Do more dropouts in pool5 feature maps for better object detection. arXiv preprint arXiv:1409.6911, 2014. 7</p><p>[34] C. Szegedy, W. Liu, Y. Jia, P. Sermanet, S. Reed, D. Anguelov, D. Erhan, V. Vanhoucke, and A. Rabinovich. Going deeper with convolutions. CoRR, abs/1409.4842, 2014. 2</p><p>[35] J. R. Uijlings, K. E. van de Sande, T. Gevers, and A. W. Smeulders. Selective search for object recognition. International journal of computer vision, 104(2):154–171, 2013. 4, 5</p><p>[36] P. Viola and M. Jones. Robust real-time object detection. International Journal of Computer Vision, 4:34–47, 2001. 4</p><p>[37] P. Viola and M. J. Jones. Robust real-time face detection. International journal of computer vision, 57(2):137–154, 2004. 5</p><p>[38] J. Yan, Z. Lei, L. Wen, and S. Z. Li. The fastest deformable part model for object detection. In Computer Vision and Pattern Recognition (CVPR), 2014 IEEE Conference on, pages 2497–2504. IEEE, 2014. 5, 6</p><p>[39] C.L.Zitnick and P.Dollár.Edgeboxes:Locating object proposals from edges. In Computer Vision–ECCV 2014, pages 391–405. Springer, 2014. 4</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 论文翻译 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> YOLOV1 </tag>
            
            <tag> 论文翻译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用软件集合</title>
      <link href="/2020/04/03/20200403-165757/"/>
      <url>/2020/04/03/20200403-165757/</url>
      
        <content type="html"><![CDATA[<ul><li><p><a href="https://www.compresss.com/cn/compress-video.html" target="_blank" rel="noopener">在线压缩软件</a>: compresss</p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200403170246.png" alt=""></p></li></ul><ul><li><p>屏幕录制软件:</p><ul><li><p><a href="https://github.com/MathewSachin/Captura" target="_blank" rel="noopener">Captura</a></p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200403170413.png" alt=""></p></li></ul></li><li><p>截屏软件:</p><ul><li><p><a href="https://zh.snipaste.com/" target="_blank" rel="noopener">Snipaste</a></p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200403170604.png" alt=""></p></li><li><p>截长图软件<code>FastStone</code></p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200403170720.png" alt=""></p></li></ul></li><li><p>图床软件:</p><ul><li><a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener">picGo</a></li></ul><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200403170642.png" alt=""></p></li><li><p>解压缩软件：</p><ul><li><p><a href="https://www.bandisoft.com/bandizip/" target="_blank" rel="noopener">Bandzip</a></p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200403170750.png" alt=""></p></li></ul></li><li><p>思维导图软件</p><ul><li><a href="https://www.dqrj.name/thread-251-1-1.html" target="_blank" rel="noopener">Mindjet MindManager 2020 v20.0.333 破解版非注册机下载简体中文汉化 </a></li><li>为了防止资源被毁，放在了移动硬盘中</li></ul></li></ul><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200404102245.png" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件 </tag>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unbroken(坚不可摧)</title>
      <link href="/2020/04/03/20200403-171150/"/>
      <url>/2020/04/03/20200403-171150/</url>
      
        <content type="html"><![CDATA[<p>视频资源：</p><p><a href="https://www.youtube.com/watch?v=26U_seo0a1g&amp;t=7s" target="_blank" rel="noopener">youtube</a></p><video src="https://homewyk.com/staticHtml/source/Unbroken1.mp4 " controls="controls" width="680" height="380" autoplay="autoplay">Your browser does not support the video tag.</video><p>&nbsp;&nbsp;&nbsp;&nbsp; 因为压缩了字幕，所以画质感人！！！</p><p><a href="https://homewyk.com/staticHtml/source/Unbroken.mp4">无字幕版</a></p><h1 id="Unbroken——坚不可摧"><a href="#Unbroken——坚不可摧" class="headerlink" title="Unbroken——坚不可摧"></a>Unbroken——坚不可摧</h1><p>You can’t connect the dots looking forward, you can only connect them looking backwards.</p><p>你无法把过去的点滴与未来联系，只有透过回顾才能看见。</p><p>So you have to trust that the dots will somehow connect in your future.</p><p>所以你必须相信过去的点滴能够串联未来。</p><p>You have to trust in something: your gut, destiny, life, karma, whatever.</p><p>你必须有信念，不管那是你的胆识，命运，人生，还是因果报应。</p><p>Because believing that the dots will connect down the road, will give you the confidence to follow your heart, even when it lead you off the well worn path. And that will make all the difference.</p><p>因为唯有把过去的点滴串联起来，你才能有信心忠于自我，即使你的选择和常人不同。这会使你与众不同。</p><p>Your time is limited, so don’t waste it living someone else’s life.</p><p>你的生命有限，所以不要浪费你的时间在别人的生活里。</p><p>Don’t be trapped by dogma, which is living with the results of other people’s thinking.</p><p>不要被教条束缚，不要活在别人对你的期望之中。</p><p>Don’t let the noise of others’ opinions drown out your own inner voice. You’ve got to find what you love.</p><p>不要让来自他人的噪音抹去你自己内心的声音，你必须找到你所爱的东西。</p><p>And that is as true for your work as it is for your lovers.</p><p>包括你热爱的事业和你的伴侣。</p><p>Your work is going to fill a large part of your life and the only way to be truly satisfied is to do what you believe is great work.</p><p>事业将占据你的大半生，唯有相信你所做的工作是对的，你才能发自内心的得到满足。</p><p>And the only way to do great work is to love what you do.</p><p>而唯有爱你所做的事，才能成就不凡。</p><p>If you haven’t found it yet, keep looking, and don’t settle.</p><p>如若你还没有找到，继续寻找，别追去安逸。</p><p>Have the courage to follow your heart and intuition, they somehow already know what you truly want to become.</p><p>有勇气顺从自己的心和直觉，你的内心早就知道你未来的梦想。</p><p>You’re going to have some ups and you’re goning to have some downs.</p><p>你的旅途不可能一帆风顺，必然有起有落。</p><p>Most people give up on themselves easily. You know the human spirit is powerful?!</p><p>大多数人都轻易放弃，但你知道人的意志有多强大吗？</p><p>There is nothing as powerful. It’s hard to kill the human spirit!</p><p>人的意志是无可比拟的坚韧不屈！</p><p>Anybody can feel good when they have their health, their bills are paid, they have happy relationships.</p><p>任何人在财务、生活、感情、健康良好的环境下，都能感到幸福。</p><p>Anybody can be positive then, anybody can have a larger vision then, anybody can have faith under those kinds of circumstances.</p><p>在那样的环境下，任何人都能自得其满，任何人都能有伟大的理想，任何人都能有信念。</p><p>The real challenge of growth, mentally, emotionally and spiritually comes when you get knocked down. It takes courage to act.</p><p>在你被击倒时，你所面临的真正挑战是你的信念、信仰和意志。起身而行需要勇气。</p><p>Part of being hungry when you have been defeated.</p><p>被击倒仍能保持谦虚，</p><p>It takes courage to start over again.</p><p>需要勇气去放下并重新开始。</p><p>Fear kills dreams.</p><p>恐惧扼杀梦想。</p><p>Fear kills hope.Fear, put people in the hospital.</p><p>恐惧扼杀希望，恐惧使人一蹶不振。</p><p>Fear can age you, can hold you back from doing something that you know within yourself that you are capable of doing, but it will paralyze you.</p><p>恐惧使你衰老，阻止你去做你能做到的事，但是它也会使你麻木不仁。</p><p>At the end of your feelings is nothing, but at the end of every principle is a promise.</p><p>你的情绪跌宕起伏，但仍然一事无成，但是在每个原则之后是自我的承诺。</p><p>Behind your little feelings, it might not be absolutely nothing at the end of your little feelings.</p><p>你的喜怒哀乐，最后可能什么都没有。</p><p>But behind every principle is a promise. And some of you in your life, the reason why you not at your goal right now, because you just all about your feelings.</p><p>但是每当你下定决心，就是一种承诺。你们有些人，至今碌碌无为，原因只是你们太过于情绪化。</p><p>All on your feellings, you don’t feel like waking up, so who does?</p><p>你总被情绪所主导，早上不愿起床，谁想呢？</p><p>Everyday you say “no” to your dreams, you might be pushing your dreams back a whole six months, a whole year!</p><p>每天你不愿去面对自己的梦想，你也许会把目标延后六个月，或是一年！</p><p>That one single day, that one day you didn’t get up could have pushed your stuff back, I don’t know how long.</p><p>只是那没有起身鞭策自己的一瞬间，你不知后退了多少。</p><p>Don’t allow your emotions to control you.</p><p>别让你的情感控制你。</p><p>We are emotional, but what you want to begin to discipline your emotion.</p><p>我们是情感的动物，但是你必须控制你的情感。</p><p>If you don’t discipline and contain your emotion, they will use you.</p><p>你若无法控制他，你便将被它吞噬。</p><p>You want it, and you are going to go all out to have it.</p><p>你想要全力以赴，毫无保留。</p><p>It’s not going to be easy, when you want to change. It’s not easy.</p><p>当你尝试改变的时候，不会很容易。</p><p>If it were in fact easy, everybody would do it.</p><p>如果很容易，那人人皆可做到。</p><p>But if you’re serious, you’ll go all out.</p><p>但是你若认真对待，全力以赴。</p><p>I’m in control here.</p><p>我才是自己的主宰者。</p><p>I’m not going to let this get me down, I’m not going to let this destroy me.</p><p>我绝不会让外界事物打击我，摧毁我。</p><p>I’m coming back!</p><p>我将重新站起！</p><p>And I’ll be stronger and better because of it!</p><p>我将会变得更好，更坚强！</p><p>You have got to make a declaration, that this is what you stand for!</p><p>你必须要下定决心，这是你的意义!</p><p>You’re standing up for your dreams, you’re standing up for peace of mind, you’re standing up for health.</p><p>如果这是你想要的梦想，那不论是健康或是功成名就。</p><p>Take full responsibility for your life!</p><p>请对你的人生负完全的责任！</p><p>Accept where you are and the responsibility that you’re going to take yourself where you want to go.</p><p>接受现在的自己，并把坚信自己能够做得更好当作一种责任。</p><p>You can decide that I am going to live each day as if it were my last!</p><p>你可以选择把你的每一天当做最后一天来过！</p><p>Live your life with passion! With some drive!</p><p>活出你的激情！拿出你的魄力！</p><p>Decided that you are going to push yourself.</p><p>不断鞭策自己做得更好！</p><p>The last chapter to your life has not been written yet, and it doen’t matter about what happened yesterday.</p><p>人生的最后一章尚未写下，昨天种种的事情并不重要。</p><p>It doesn’t matter about what happened to you, what matter is: what are you going to do about it?</p><p>你发生了什么也没有关系，重要的是：你接下来打算怎么做？</p><p>This year I will make this goal become a reality.</p><p>今年我将使梦想成为现实。</p><p>I won’t talk about it anymore. I can! I can!! I can!!!</p><p>我已不想再谈论什么，我能行！我能行！！我能行！！！</p><p>To persevere I think is important for everybody, don’t give up, don’t give in.</p><p>我觉得坚持对每个人都很重要，不要放弃，不要妥协。</p><p>There’s always an answer to everything.</p><p>人生的每件事情总是有解答的。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 励志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 励志 </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Yolov1算法解读及其详细实现</title>
      <link href="/2020/04/02/20200402-111922/"/>
      <url>/2020/04/02/20200402-111922/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;将自己这段时间以来的关于Yolov1算法知识做一个总结。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 这篇文章是YOLO的开山之作，理解其思想是十分重要的。</p><p><a href="https://homewyk.com/staticHtml/PDF/essay/Yolov1.pdf">论文原文请移步</a></p><p><a href="https://github.com/gliese581gg/YOLO_tensorflow" target="_blank" rel="noopener">基于<code>Tensorflow</code>版本的<code>Yolov1</code>实现</a></p><h2 id="论文解读"><a href="#论文解读" class="headerlink" title="论文解读"></a>论文解读</h2><h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200402113612.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp; 这篇文章提出了一个新的目标检测的方法。之间的一些框架将目标检测问题转变为分类问题，与之相反的是，<strong>这篇文章提出的YOLO框架最主要的创新点是将目标检测视作为一个回归问题，这个回归问题定义为预测边框和相关的类概率</strong>（我们知道，分类问题处理的对象是离散值，回归问题处理的对象是连续值，在目标检测任务中，有对<code>Bounding box</code>坐标的预测，这篇文章考虑在网络的最后使用2个<code>FC</code>(全连接层)做作为一个线性回归器，对<code>bounding box</code>和所属的物体类别进行回归）。图像仅经过一个神经网络，就可以得到预测框<code>bounding box</code>和每一个预测框中的物体类别概率。正是因为整个的检测网络是一个单一的神经网络，所以他才能够直接进行<code>end-to-end</code>（图像通过神经网络从输入到输出）的优化。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 这篇文章提出的框架检测时间很快，基本<code>YOLO</code>以每秒45帧的速度进行处理，一个更小版本的网络，<code>Fast YOLO</code>，每秒处理155帧，其mAP是其他实时检测系统的2倍。相比于其他先进的检测系统，<code>YOLO</code>在定位时更容易出现错误，很少出现在图片中预测出不存在的物体。最后，YOLO能够学习到物体中的抽象特征，他的性能比其他的目标检测方法<code>DPM</code>、<code>R-CNN</code>的性能要好一些，尤其是从自然图像领域迁移到其他的领域，比如艺术领域。</p><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200402220731.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp; 人们看一眼图像并立即知道图像中的物体是什么，它们在哪里，以及它们是如何相互作用的。人类视觉系统是快速和准确的，使我们能够执行复杂的任务，比如驾驶时几乎没有意识的想法。快速、准确的目标检测算法将允许计算机在没有专用传感器的情况下驾驶汽车，使辅助设备能够将实时场景信息传达给人类用户，并开启通用、响应性机器人系统的潜力。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;当前的物体检测系统使用分类器来完成物体检测任务。为了检测一个物体，这些物体检测系统要在一张测试图的不同位置和不同尺寸的<code>bounding box</code>上使用该物体的分类器去评估是否有该物体。如<code>DPM</code>系统，要使用一个滑窗（<code>sliding window</code>）在整张图像上均匀滑动，用分类器评估是否有物体。<br><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200402225616.png" alt=""></p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200402222058.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp; 在<code>DPM</code>之后提出的其他方法，如R-CNN方法使用<code>region proposal</code>来生成整张图像中可能包含待检测物体的<code>potential bounding boxes</code>，然后用分类器来评估这些<code>boxes</code>，接着通过<code>post-processing</code>来改善<code>bounding boxes</code>，消除重复的检测目标，并基于整个场景中的其他物体重新对<code>boxes</code>进行打分。整个流程执行下来很慢，而且因为这些环节都是分开训练的，检测性能很难进行优化。 </p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200402222617.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp; 本文提出的<code>YOLO</code>（<code>you only look once</code>），将物体检测任务当做回归问题（<code>regression problem</code>）来处理，直接通过整张图片的所有像素得到<code>bounding box</code>的坐标、<code>box</code>中包含物体的<code>confidence</code>和<code>class probabilities</code>。通过<code>YOLO</code>，每张图像只需要输入到神经网络就能得出图像中都有哪些物体和这些物体的位置。  </p><p>&nbsp;&nbsp;&nbsp;&nbsp; <code>YOLO</code>非常简单：参见图1.单个卷积网络可同时预测多个边界框和这些<code>boxes</code>的类概率.<code>YOLO</code>训练全图像并直接优化检测性能。 这种统一的模型与传统的物体检测方法相比有许多优点。 </p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200402225547.png" alt=""></p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200402223007.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp; 图1：<code>YOLO</code>检测系统。 用<code>YOLO</code>处理图像简单而直接。 我们的系统(1)将输入图像的大小调整为<code>448×448</code>，(2)在图像上运行单个卷积网络，以及(3)通过模型的置信度对结果检测进行阈值。 </p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200402223217.png" alt=""></p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200402223246.png" alt=""></p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200402223309.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp; <code>YOLO</code>模型相对于之前的物体检测方法有多个优点： </p><p>&nbsp;&nbsp;&nbsp;&nbsp; 1、<code>YOLO</code>检测物体非常快。 因为没有复杂的检测流程，只需要将图像输入到神经网络就可以得到检测结果，<code>YOLO</code>可以非常快的完成物体检测任务。标准版本的<code>YOLO</code>在<code>Titan X</code> 的 <code>GPU</code>上能达到45<code>FPS</code>。更快的<code>Fast YOLO</code>检测速度可以达到155 <code>FPS</code>。而且，<code>YOLO</code>的<code>mAP</code>是之前其他实时物体检测系统的两倍以上。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;  2、<code>YOLO</code>可以很好的避免背景错误，产生<code>false positives</code>。 不像其他物体检测系统使用了滑窗或<code>region proposal</code>，分类器只能得到图像的局部信息。<code>YOLO</code>在训练和测试时都能够看到一整张图像的信息，因此<code>YOLO</code>在检测物体时能很好的利用上下文信息，从而不容易在背景上预测出错误的物体信息。和<code>Fast-R-CNN</code>相比，<code>YOLO</code>的背景错误不到<code>Fast-R-CNN</code>的一半。 </p><p>&nbsp;&nbsp;&nbsp;&nbsp; 3、<code>YOLO</code>可以学到物体的泛化特征。 当<code>OLO</code>在自然图像上做训练，在艺术作品上做测试时，<code>YOLO</code>表现的性能比<code>DPM</code>、<code>R-CNN</code>等之前的物体检测系统要好很多。因为<code>YOLO</code>可以学习到高度泛化的特征，从而迁移到其他领域。 尽管<code>YOLO</code>有这些优点，它也有一些缺点： 1、<code>YOLO</code>的物体检测精度低于其他<code>state-of-the-art</code>的物体检测系统。 2、<code>YOLO</code>容易产生物体的定位错误。 3、<code>YOLO</code>对小物体的检测效果不好（尤其是密集的小物体，因为一个栅格只能预测2个物体）。 </p><h3 id="统一检测"><a href="#统一检测" class="headerlink" title="统一检测"></a>统一检测</h3><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200402223738.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp; 我们将目标检测单独集成到单个神经网络中。 我们的网络使用整个图像的特征来预测每个边界框。 它还同时预测所有类的所有边界框。 这意味着我们的网络能够在全图范围内全面了解图像中的全部图像和图像中的所有对象。<code>YOLO</code>设计可实现端到端训练和实时速度，同时保持较高的平均精度。 </p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200402225512.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp; <code>YOLO</code>将输入图像划分为<code>S*S</code>的栅格，每个栅格负责检测中心落在该栅格中的物体。</p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200402224011.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp;  每一个栅格预测<code>B</code>个<code>bounding boxes</code>，以及这些<code>bounding boxes</code>的<code>confidence scores</code>。这个 <code>confidence scores</code>反映了模型对于这个栅格的预测：该栅格是否含有物体，以及这个<code>box</code>的坐标预测的有多准。公式定义如下： $Pr(Object)*IOU_{pred}^{truth}$。如果这个栅格中不存在一个<code>object</code>，则<code>confidence score</code>应该为0。否则的话，<code>confidence score</code>则为<code>predicted bounding box</code>与<code>ground truth box</code>之间的<code>IOU</code>（<code>intersection over union</code>）。 </p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200402224232.png" alt=""></p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200402225444.png" alt=""></p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200402224736.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp; <code>YOLO</code>对每个<code>bounding box</code>有5个<code>predictions</code>：<code>x, y, w, h,confidence</code>。 </p><ul><li>坐标<code>x,y</code>代表了预测的<code>bounding box</code>的中心与栅格边界的相对值。 </li><li>坐标<code>w,h</code>代表了预测的<code>bounding box</code>的<code>width、height</code>相对于整幅图像<code>width,heigh</code>t的比例。 </li><li><code>confidence</code>就是预测的<code>bounding box</code>和<code>ground truth box</code>的<code>IOU</code>值。</li><li>每一个栅格还要预测<code>C</code>个<code>conditional class probability</code>（条件类别概率）：<code>Pr(Classi|Object)</code>。<ul><li>即在一个栅格包含一个<code>Object</code>的前提下，它属于某个类的概率。我们只为每个栅格预测一组（<code>C</code>个）类概率，而不考虑框<code>B</code>的数量。整个<code>yolo</code>算法的流程如图2. </li></ul></li></ul><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200402225018.png" alt=""></p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200402225127.png" alt=""></p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200402225202.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp; 图2： 我们的<code>YOLO</code>系统将检测模型化为回归问题。 它将图像划分为<code>S×S</code>网格，并且每个网格单元预测<code>B</code>个边界框，对这些框的置信度以及<code>C</code>类概率。 这些预测值被编码为<code>S×S×（B * 5 + C）</code>张量。为了评估<code>PASCAL VOC</code>上的<code>YOLO</code>，我们使用<code>S = 7</code>，<code>B = 2</code>。<code>PASCAL VOC</code>有<code>20</code>个标记类，因此<code>C = 20</code>。我们的最终预测是<code>7×7×30</code>张量。 </p><p>最终的输出为大小（ 7×7）<code>.cells</code>×（（4.coords+1.confidence）×2.boxes+20.classes）= 7x7x30的张量 。</p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200402234435.png" alt=""></p><h3 id="网络设计"><a href="#网络设计" class="headerlink" title="网络设计"></a>网络设计</h3><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200402225357.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp; 我们将此模型作为卷积神经网络实施并在<code>PASCAL VOC</code>检测数据集上进行评估。 网络的初始卷积层从图像中提取特征，而全连接的层预测输出概率和坐标。 <code>YOLO</code>网络借鉴了<code>GoogLeNet</code>分类网络结构。不同的是，<code>YOLO</code>未使用<code>inception module</code>，而是使用1x1卷积层（此处1x1卷积层的存在是为了跨通道信息整合）+3x3卷积层简单替代。完整的网络结构如图3所示:</p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200402225746.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp; <code>YOLOv1</code>的基本网络结构如上图所示，共有24层卷积层和2层全连接层，图片下方参数中的<code>s-2</code>指的是步长为2，这里要注意以下三点： </p><ul><li>在<code>ImageNet</code>中预训练网络时，使用的输入是<code>224*224</code>，用于检测任务时，输入大小改为<code>448*448</code>，这是通过调整第一个卷积层的步长来实现的； </li><li>网络的设计借鉴了<code>GoogLeNet</code>，使用了很多<code>1*1</code>的卷积层来进行特征降维； </li><li>最后一个卷积层的输出为<code>(7, 7, 1024)</code>，经过flatten后紧跟两个全连接层，形成一个<code>线性回归</code>，最后一个全连接层又被reshape成<code>(7, 7, 30)</code>，形成对2个<code>box</code>坐标及20个物体类别的预测(<code>PASCAL VOC</code>)(源码中实际上是预测了3个<code>box-&gt;7*7*35</code>)。 </li></ul><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200402225821.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp; 最终的输出结果是一个7x7x30的张量。 </p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200402232525.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp; 如上图所示，这就是最后一层全连接经过reshape之后的<code>(7, 7, 30)</code>的张量，这张图需要结合论文中所述的<code>Grid Cell</code>来理解。 我们知道，<code>YOLO</code>网络输入的是<code>448*448</code>的<strong>正方形图片</strong>，最终输出的是一个<code>7*7</code>的特征图，下采样倍数为64倍，在输出的<code>7*7</code>的特征图上，每个格点对应原图中一个<code>64*64</code>的区域，也就是论文中所述的<code>Grid Cell</code>。 在上面的图片中，<code>7*7</code>特征图中的每一个格点都是一个<code>1*30</code>的向量，格点对应原图中的一个<code>64*64</code>的<code>Grid Cell</code>，格点中的参数就是对以该<code>Grid Cell</code>中心的物体类别和<code>bounding box</code>的预测，因此很容易理解，对一张图片，每个格点预测一个物体类别和两个<code>bounding box</code>，这里要注意，每个格点的两个<code>bounding box</code>预测的是同一类物体，要是分别负责预测不同物体，则最后一层的shape应该为<code>7*7*(2*(5+20))=7*7*50</code>(YOLOv2)。 论文中有这样的描述： </p><blockquote><p>If the center of an object falls into a grid cell, that grid cell is responsible for detecting that object. </p></blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp; 对该描述的理解为：在训练阶段，图片中物体的<code>truth box</code>已知，这些<code>box</code>可映射到<code>7*7</code>的特征图的某一个格点上(这也就是计算loss中$I_{ij}$)。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 在训练时，某一个<code>truth box</code>仅由特征图上对应的格点的2个<code>bounding box</code>中与其<code>iou</code>较大的<code>box</code>(记为<code>best box</code>)进行预测，也即在计算<code>loss</code>时，仅计算该<code>best box</code>和相应的<code>truth box</code>之间的坐标损失，这也就是论文中所述的，所在物体中间的格点负责预测该物体。 </p><h3 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h3><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200402225939.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp; 首先利用<code>ImageNet 1000-class</code>的分类任务数据集<code>Pretrain</code>卷积层。使用上述网络中的前<code>20</code>个卷积层，加上一个 <code>average-pooling layer</code>，最后加一个全连接层，作为<code>Pretrain</code>的网络。训练大约一周的时间，使得在<code>ImageNet 2012</code>的验证数据集<code>Top-5</code>的精度达到 <code>88%</code>，这个结果跟<code>GoogleNet</code> 的效果相当。 </p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200402230047.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp; 将<code>Pretrain</code>的结果的前20层卷积层应用到<code>Detection</code>中，并加入剩下的4个卷积层及2个全连接。同时为了获取更精细化的结果，将输入图像的分辨率由 224* 224 提升到 448* 448。 </p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200402230149.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp; 我们的最后一层可以预测类概率和边界框坐标。 我们通过图像的宽度和高度对边界框的宽度和高度进行归一化，使它们落在0和1之间。我们将边界框的x和y坐标参数化为特定网格单元位置的偏移量，因此它们也被限制在0和1之间 。</p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200402230239.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp; 我们对最终层使用线性激活函数，而所有其他层均使用leak relu线性激活函数。</p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200402230431.png" alt=""></p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200402230448.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp; 我们针对模型输出中的平方和误差进行了优化。 我们使用平方和误差是因为它易于优化，但是它并不完全符合我们使平均精度最大化的目标。 它对定位错误的加权平均与分类误差相同，这可能不理想。此外，在每幅图像中，许多网格单元都不包含任何对象。 这会将这些单元格的“置信度”得分推向零，这通常会超过确实包含对象的单元格的梯度。 这可能会导致模型不稳定，导致训练在早期就出现分歧 。</p><ul><li>8维的<code>localization error</code>和20维的<code>classification error</code>同等重要显然是不合理的。 </li><li>如果一些栅格中没有<code>object</code>（一幅图中这种栅格很多），那么就会将这些栅格中的<code>bounding box</code>的<code>confidence</code> 置为0，相比于较少的有object的栅格，这些不包含物体的栅格对梯度更新的贡献会远大于包含物体的栅格对梯度更新的贡献，这会导致网络不稳定甚至发散 。</li></ul><p><img src="C:%5CUsers%5Casdw1%5CAppData%5CLocal%5CTemp%5C1585840559884.png" alt="1585840559884"></p><p>&nbsp;&nbsp;&nbsp;&nbsp; 为了解决这个问题，对于不包含对象的盒子，我们增加了边界框坐标预测的损失，并减少了置信度预测的损失。 我们使用两个参数<code>λcoord</code>和<code>λnoobj</code>来完成此操作。 我们设置<code>λcoord= 5</code>和<code>λnoobj= .5</code>。 </p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200402230950.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp; 平方和误差也平均地加权了大盒子和小盒子中的误差。 我们的误差指标应反映出，大盒子中的小偏差比小盒子中的小偏差要小。 为了部分解决此问题，<strong>我们预测边界框宽度和高度的平方根</strong>，而不是直接预测宽度和高度 。</p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200403000358.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp; 对不同大小的bbox预测中，相比于大bbox预测偏一点，小box预测偏相同的尺寸对IOU的影响更大。而sum-square error loss中对同样的偏移loss是一样。 为了缓和这个问题，作者用了一个巧妙的办法，就是将box的width和height取平方根代替原本的height和width。 如下图：small bbox的横轴值较小，发生偏移时，反应到y轴上的loss（下图绿色）比big box(下图红色)要大。 </p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/%E5%9D%90%E6%A0%87%E7%9A%84%E8%AE%A1%E7%AE%97.png" alt=""></p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200402231146.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp; <code>YOLO</code>预测每个网格单元有多个边界框。在训练时，我们只希望一个边界框预测器对每个对象负责。 我们将一个预测变量指定为“负责任的”预测对象，基于该预测具有与地面真实性最高的当前<code>IOU</code>。 这导致边界框预测变量之间的特殊化。 每个预测器都可以更好地预测某些大小，宽高比或对象类别，从而改善总体召回率 。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;损失函数的定义：</p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200402231328.png" alt=""></p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200403001917.png" alt=""></p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200402233438.png" alt=""></p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200402234818.png" alt=""></p><ul><li>更重视8维的坐标预测，给这些损失前面赋予更大的loss weight, 记为 λcoord ,在pascal VOC训练中取5。（上图蓝色框） </li><li>对没有object的bbox的confidence loss，赋予小的loss weight，记为 λnoobj ，在pascal VOC训练中取0.5。（上图橙色框） </li><li>有object的bbox的confidence loss (上图红色框) 和类别的loss （上图紫色框）的loss weight正常取1。 </li></ul><p><img src="C:%5CUsers%5Casdw1%5CAppData%5CLocal%5CTemp%5C1585842952916.png" alt="1585842952916"></p><p>&nbsp;&nbsp;&nbsp;&nbsp; 通俗地说，在YOLO网络的输出结果中，每个格子会预测B个Bbox，比如2个，损失函数里的‘responsible predictor’ 是指在目标的中心落在的那个格子中，预测的B个Bbox中的与目标物体的truth Bbox的IoU最大的那个Bbox。例如下图中的左一，图片分成7*7的格子，图中狗的truth Bbox是红色的框，网络给出的预测是是绿色的那两个。如图左二，目标“狗”的中心落在绿色的格子里，这个绿色的格子就是文章中说的“responsible for detecting that object”的格子，‘Object appears’的格子就是绿色的这个格子（这只是其中一个目标物体的，还有自行车，汽车也有对应的格子）。训练的时候，这个格子会给出两个预测的Bbox，‘ “responsible” for that prediction ’就是左一图中较大的那个绿色框，它与目标的truth Bbox(红色的)的IoU最大。 计算损失的时候，坐标损失（包括中心坐标，宽，高）只算较大的绿色的那个Bbox；计算类别损失的时候，只计算左二图中绿色的那个格子的类别损失（也看到有代码实现中，计算类别损失时计算的是物体的truth Bbox覆盖到的那些格子，也就是右一图中红色的那些格子）；计算Confidence损失的时候所有的Bbox都计算，但是分成两类，一类是之前用于计算坐标损失的那一个Bbox，另一类是其他所有Bbox的，两者权重有所不同，前者是5，后者是0.5。</p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200402235708.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp; 论文中所说的把目标检测作为一个回归问题，最明显的就是把<code>bounding box</code>的坐标误差作为<code>loss</code>进行计算，从而达到直接使用网络回归出正确的<code>bounding box</code>位置的目的。<code>Loss</code>的计算总体上可分为两部分，即<code>box</code>的<code>loss</code> <code>x, y, w, h, confidence</code>和类别的<code>loss</code>，对<code>box</code>的<code>loss</code>，又可根据当前box中是否包含物体来分别进行计算。 在计算box的loss时，程序遍历每一个格点的每一个box(根据论文中所述，<code>YOLOv1</code>中每张图片应该是<code>7*7*2=98</code>个<code>box</code>)，若当前box中有物体(有<code>truth box</code>投影到当前格点，且该box是当前格点所预测的box中与truth box的iou最大的)，则计算该box与truth box的<code>x, y, w, h, confidence</code>误差，对没有物体的box，则只计算<code>confidence</code>误差。 在计算类别的loss时，程序遍历每一个格点，若当前格点中包含物体，则计算类别误差，否则不计算。 </p><p><img src="E:%5CGithubWareHouse%5CWeb_Learning%5Clearning%5CJavaScript%5Cnote%5C20200403000048.png" alt=""></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://towardsdatascience.com/yolov1-you-only-look-once-object-detection-e1f3ffec8a89" target="_blank" rel="noopener">Review: YOLOv1 — You Only Look Once (Object Detection)</a></p><p><a href="https://blog.csdn.net/m0_37192554/article/details/81092761" target="_blank" rel="noopener">手写loss</a></p><p><a href="https://blog.csdn.net/JerryZhang__/article/details/85471847" target="_blank" rel="noopener">loss</a></p><p><a href="https://blog.csdn.net/baobei0112/article/details/80116260" target="_blank" rel="noopener">推断的详细过程</a></p><p> <a href="https://blog.csdn.net/shuiyixin/article/details/82533849" target="_blank" rel="noopener">水一心</a></p><p><a href="https://github.com/KOD-Chen/YOLOv1-Tensorflow/blob/master/yolo1_tf.py" target="_blank" rel="noopener">注释较好的代码实现</a></p><p><a href="https://blog.csdn.net/m0_37192554/article/details/81092761" target="_blank" rel="noopener">非极大值抑制</a></p><p><a href="https://www.bilibili.com/video/av23354360?from=search&amp;seid=14097781066157427376" target="_blank" rel="noopener">中文Yolo v1全面深度解读 目标检测论文</a></p><p><a href="https://blog.csdn.net/hrsstudy/article/details/70305791" target="_blank" rel="noopener">动态插图</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 目标检测 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> Yolov1 </tag>
            
            <tag> 目标检测 </tag>
            
            <tag> 论文解读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写Blog四剑客：PicGo + Gitee(码云)+Snipaste 实现markdown图床</title>
      <link href="/2020/04/01/20200401-122211/"/>
      <url>/2020/04/01/20200401-122211/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&nbsp;&nbsp;&nbsp;&nbsp; 想使用七牛云作为自己的图床工具，但是域名只给使用1个月，而我自己的域名并没有备案遂放弃。也查询过使用百度云网盘做图床，并不可行，最后便想使用<code>github</code>作为自己的图床，经过配置发现了一个不大好的问题，<code>github</code>的服务器在国外，访问速度时好时慢，这不是自己能够控制的了，还有一个是，使用<code>github</code>做图床，需要频繁的上传<code>image</code>,这就造成了<code>commit</code>的此时太多，会造成一种<code>github</code>十分红火的假象。思来想去，为什么不用国内的码云作为自己的图床,<code>Gitee</code>和国内的<code>github</code>差不多，是代码托管软件,也是国内最大的代码系统。由于服务器在国内，速度也是杠杠的，且只把<code>Gitee</code>作为图床使用，不做他用。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; <code>Markdown</code>是一门易于上手能帮助作者专心写作的文档编辑语言，好处多多，十分建议日常写作使用这种方法，简答易学。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; <code>Markdown</code>编辑器推荐使用<code>Typora</code>,可以编写完毕后立即看到效果。</p><p>本文的重点在<code>Markdown</code>如何插入图片</p><p>&nbsp;&nbsp;&nbsp;&nbsp;  图床是一个便于在博文中插入在线图片连接的个人图片仓库。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 设置图床之后，在自己博客中插入的图片链接就可以随时随地在线预览了，并且不会因为任何意外原因无法查看，除非自己亲自删除。 </p><p><code>PicGo</code>就是为了解决本地图片上传图片仓库这个问题诞生的，它可以将本地图片上传到指定的图床上，然后返回<code>markdown</code>链接，直接粘贴到你的文档中，就搞定啦。</p><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h3><h4 id="安装picgo"><a href="#安装picgo" class="headerlink" title="安装picgo"></a>安装<code>picgo</code></h4><p><a href="https://link.zhihu.com/?target=https%3A//github.com/Molunerfinn/PicGo">picgo仓库</a></p><p><a href="https://molunerfinn.com/PicGo/" target="_blank" rel="noopener">picgo官网</a>，下载<code>.exe</code>执行文件即可</p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200401185537.png" alt=""></p><h4 id="picgo主界面"><a href="#picgo主界面" class="headerlink" title="picgo主界面"></a><code>picgo</code>主界面</h4><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200401185653.png" alt=""></p><h4 id="2-安装gitee插件"><a href="#2-安装gitee插件" class="headerlink" title="2. 安装gitee插件"></a>2. 安装gitee插件</h4><h5 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h5><p>首先下载稳定版<a href="https://nodejs.org/dist/v9.11.1/node-v9.11.1-x64.msi" target="_blank" rel="noopener">Node.js</a>，我这里给的是64位的。</p><p>安装选项全部默认，一路点击<code>Next</code>。</p><p>最后安装好之后，按<code>Win+R</code>打开命令提示符，输入<code>node -v</code>和<code>npm -v</code>，如果出现版本号，那么就安装成功了</p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200401185856.png" alt=""></p><h5 id="安装picgo插件"><a href="#安装picgo插件" class="headerlink" title="安装picgo插件"></a>安装picgo插件</h5><p>选择最底下的插件设置，搜索<strong>gitee</strong>，点击右边的gitee-uploader 1.1.2开始安装。</p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200401190044.png" alt=""></p><h3 id="2-配置Gitee图片仓库"><a href="#2-配置Gitee图片仓库" class="headerlink" title="2. 配置Gitee图片仓库"></a>2. 配置Gitee图片仓库</h3><ol><li>新建仓库</li></ol><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200401190319.png" alt=""></p><ol start="2"><li>新建仓库要点<ul><li>输入一个仓库名称</li><li>其次将仓库设为公开</li><li>勾选使用Readme文件初始化这个仓库<ul><li><strong>这个选项勾上，这样码云会自动给你的仓库建立master分支，这点很重要!!!</strong> </li></ul></li></ul></li></ol><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200401190542.png" alt=""></p><ol start="3"><li><p>配置<code>picgo</code>的<code>gitee</code>插件</p><ul><li><p><code>repo</code>: 仓库名称</p><ul><li><code>gitee</code>用户名/仓库名</li><li>最开始前面没有<code>/</code></li></ul><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200401191157.png" alt=""></p></li><li><p><code>banch</code>: <code>master</code></p></li><li><p><code>token</code>: 见第4点</p></li></ul></li></ol><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200401191005.png" alt=""></p><ol start="4"><li><p>获取token</p><ul><li><p>点击头像，进入设置 </p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200401191545.png" alt=""></p></li><li><p>找到右边安全设置里面的私人令牌</p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200401191619.png" alt=""></p></li><li><p>点击<code>生成新令牌</code>，把<strong>projects</strong>这一项勾上，其他的不用勾，然后提交</p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200401191713.png" alt=""></p></li><li><p>这里需要验证一下密码，验证密码之后会出来一串数字，这一串数字就是你的<code>token</code>，将这串数字复制到刚才的配置里面去。 </p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200401191750.png" alt=""></p><ul><li>注意：这个令牌只会明文显示一次，建议在配置插件的时候再来生成令牌，直接复制进去，搞丢了又要重新生成一个。 可以将这个<code>token</code>收藏到微信中</li><li>现在保存你刚才的配置，然后将它设置为默认图床，大功告成</li></ul></li></ul></li></ol><h3 id="3-关于Gitee-1-2-2-beta插件的设置有点区别"><a href="#3-关于Gitee-1-2-2-beta插件的设置有点区别" class="headerlink" title="3. 关于Gitee 1.2.2.beta插件的设置有点区别"></a>3. 关于Gitee 1.2.2.beta插件的设置有点区别</h3><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200401191912.png" alt=""></p><p>配置界面：</p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200401192127.png" alt=""></p><ul><li>url：图床网站，这里写码云的主页 <a href="https://link.zhihu.com/?target=https%3A//gitee.com">https://gitee.com</a> </li><li>owner：所有者，写上你的码云账号名 </li><li>repo：仓库名称，只要写上仓库名称就行，比如我自己的仓库blogImage </li><li>path：写上路径，一般是img，<strong>这几个项都不用加“ / “符号</strong> </li><li>token：刚才你获取的个人令牌，两个插件是通用的，如果你用了另一个再来用这个，它会自动读取另一个插件的部分配置，不用重新申请 </li><li>message：不用填 </li></ul><h2 id="2-测试"><a href="#2-测试" class="headerlink" title="2. 测试"></a>2. 测试</h2><ul><li><code>picgo</code>支持剪切板直接上传</li><li><code>win10</code>的<code>Snipaste</code>是截图神器 </li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp; 很快！比<code>github</code>快很多，0.1秒上传，而且导入到你的<code>markdown</code>编辑器里面也是秒识别你的图片内容，而如果是github图床上传太慢不说可能还会出现下面这样识别不出来的问题！</p><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h2><p>&nbsp;&nbsp;&nbsp;&nbsp; 博客写作套件<code>Typora + PicGo + Snipaste：</code></p><ul><li><code>Typora</code>写文档</li><li><code>Snipaste</code>一键截图</li><li><code>PicGo</code>一键上传图片返回链接。 </li></ul><h2 id="4-参考"><a href="#4-参考" class="headerlink" title="4. 参考"></a>4. 参考</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/102594554" target="_blank" rel="noopener">LeonG:PicGo + Gitee(码云) 实现markdown图床</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> blog工具 </tag>
            
            <tag> 质量网站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于TensorFolw2的Yolov1程序实现</title>
      <link href="/2020/04/01/20200401-100427/"/>
      <url>/2020/04/01/20200401-100427/</url>
      
        <content type="html"><![CDATA[<h2 id="完整程序实现"><a href="#完整程序实现" class="headerlink" title="完整程序实现"></a>完整程序实现</h2><p>本编程环境使用<code>anaconda</code>+<code>pycharm</code>进行搭建。</p><ul><li><p>python 版本 3.6.1</p></li><li><p>tensorflow版本：2.0.0</p><p>本文给出了Yolov1算法的TensoFlow实现代码。</p></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp; <a href="https://pan.baidu.com/s/1AlPwx8u-mOVVfSCek85B5Q" target="_blank" rel="noopener">权重代码链接:</a> 提取码: <code>d4hd</code></p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""引入相关package"""</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true"># tensorFlow 使用版本1</span><span class="token keyword">import</span> tensorflow<span class="token punctuation">.</span>compat<span class="token punctuation">.</span>v1 <span class="token keyword">as</span> tf<span class="token keyword">import</span> cv2<span class="token comment" spellcheck="true"># 关闭tf的即时执行模式</span>tf<span class="token punctuation">.</span>disable_v2_behavior<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">YOLO</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""定义YOLO class"""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> weights_file<span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""构造函数"""</span>        <span class="token comment" spellcheck="true"># 后面程序打印描述功能的标志位</span>        self<span class="token punctuation">.</span>verbose <span class="token operator">=</span> verbose        <span class="token comment" spellcheck="true"># 检测参数</span>        self<span class="token punctuation">.</span>grid <span class="token operator">=</span> <span class="token number">7</span> <span class="token comment" spellcheck="true"># grid cell CNN输出图片的cell</span>        self<span class="token punctuation">.</span>box <span class="token operator">=</span> <span class="token number">2</span>  <span class="token comment" spellcheck="true"># bounding box 预测框个数</span>        <span class="token comment" spellcheck="true"># 物体检测类别</span>        self<span class="token punctuation">.</span>classes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"aeroplane"</span><span class="token punctuation">,</span> <span class="token string">"bicycle"</span><span class="token punctuation">,</span> <span class="token string">"bird"</span><span class="token punctuation">,</span> <span class="token string">"boat"</span><span class="token punctuation">,</span> <span class="token string">"bottle"</span><span class="token punctuation">,</span>                        <span class="token string">"bus"</span><span class="token punctuation">,</span> <span class="token string">"car"</span><span class="token punctuation">,</span> <span class="token string">"cat"</span><span class="token punctuation">,</span> <span class="token string">"chair"</span><span class="token punctuation">,</span> <span class="token string">"cow"</span><span class="token punctuation">,</span> <span class="token string">"diningtable"</span><span class="token punctuation">,</span>                        <span class="token string">"dog"</span><span class="token punctuation">,</span> <span class="token string">"horse"</span><span class="token punctuation">,</span> <span class="token string">"motorbike"</span><span class="token punctuation">,</span> <span class="token string">"person"</span><span class="token punctuation">,</span> <span class="token string">"pottedplant"</span><span class="token punctuation">,</span>                        <span class="token string">"sheep"</span><span class="token punctuation">,</span> <span class="token string">"sofa"</span><span class="token punctuation">,</span> <span class="token string">"train"</span><span class="token punctuation">,</span> <span class="token string">"tvmonitor"</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># class numbers</span>        self<span class="token punctuation">.</span>class_num <span class="token operator">=</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>classes<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># confidence threshold</span>        self<span class="token punctuation">.</span>conf_threshold <span class="token operator">=</span> <span class="token number">0.2</span>        <span class="token comment" spellcheck="true"># iou threshold</span>        self<span class="token punctuation">.</span>iou_threshold <span class="token operator">=</span> <span class="token number">0.5</span>        <span class="token comment" spellcheck="true"># &lt;class 'tuple'>(7,7,2)</span>        <span class="token comment" spellcheck="true"># 边界框的中心坐标 (x,y) -- 此坐标是相对于per cell 的左上角 而言的</span>        <span class="token comment" spellcheck="true"># 范围(0,1)</span>        self<span class="token punctuation">.</span>x_offset <span class="token operator">=</span> np<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>                                    np<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>                                                <span class="token comment" spellcheck="true"># (7,7,2)</span>                                                np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span>self<span class="token punctuation">.</span>grid<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>grid <span class="token operator">*</span> self<span class="token punctuation">.</span>box<span class="token punctuation">)</span><span class="token punctuation">,</span>                                                <span class="token punctuation">[</span>self<span class="token punctuation">.</span>box<span class="token punctuation">,</span> self<span class="token punctuation">.</span>grid<span class="token punctuation">,</span> self<span class="token punctuation">.</span>grid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># &lt;class 'tuple'>(7,7,2)</span>        self<span class="token punctuation">.</span>y_offset <span class="token operator">=</span> np<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>self<span class="token punctuation">.</span>x_offset<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># shape (7,7,2)</span>        self<span class="token punctuation">.</span>sess <span class="token operator">=</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 创建会话</span>        self<span class="token punctuation">.</span>_build_net<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 构建卷积神经网络</span>        self<span class="token punctuation">.</span>_load_weights<span class="token punctuation">(</span>weights_file<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 加载权重文件</span>    <span class="token keyword">def</span> <span class="token function">_build_net</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""主体网络模型"""</span>        <span class="token comment" spellcheck="true"># 打印神经网络状态信息</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>verbose<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Start to build the network……"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 占位 (None,448,448,3)</span>        <span class="token comment" spellcheck="true"># None是输入的图片的个数</span>        <span class="token comment" spellcheck="true"># 后面三个主要是使用图像的格式 大小：448x448 通道数为3</span>        self<span class="token punctuation">.</span>images <span class="token operator">=</span> tf<span class="token punctuation">.</span>placeholder<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>float32<span class="token punctuation">,</span> <span class="token punctuation">[</span>None<span class="token punctuation">,</span> <span class="token number">448</span><span class="token punctuation">,</span> <span class="token number">448</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        net <span class="token operator">=</span> self<span class="token punctuation">.</span>_conv_layer<span class="token punctuation">(</span>self<span class="token punctuation">.</span>images<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输入张量，卷积核尺寸，步长，数量，层id</span>        net <span class="token operator">=</span> self<span class="token punctuation">.</span>_maxpool_layer<span class="token punctuation">(</span>net<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输入张量，池化核尺寸，步长，层id</span>        net <span class="token operator">=</span> self<span class="token punctuation">.</span>_conv_layer<span class="token punctuation">(</span>net<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">192</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>        net <span class="token operator">=</span> self<span class="token punctuation">.</span>_maxpool_layer<span class="token punctuation">(</span>net<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>        net <span class="token operator">=</span> self<span class="token punctuation">.</span>_conv_layer<span class="token punctuation">(</span>net<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>        net <span class="token operator">=</span> self<span class="token punctuation">.</span>_conv_layer<span class="token punctuation">(</span>net<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>        net <span class="token operator">=</span> self<span class="token punctuation">.</span>_conv_layer<span class="token punctuation">(</span>net<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>        net <span class="token operator">=</span> self<span class="token punctuation">.</span>_conv_layer<span class="token punctuation">(</span>net<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>        net <span class="token operator">=</span> self<span class="token punctuation">.</span>_maxpool_layer<span class="token punctuation">(</span>net<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>        net <span class="token operator">=</span> self<span class="token punctuation">.</span>_conv_layer<span class="token punctuation">(</span>net<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span>        net <span class="token operator">=</span> self<span class="token punctuation">.</span>_conv_layer<span class="token punctuation">(</span>net<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>        net <span class="token operator">=</span> self<span class="token punctuation">.</span>_conv_layer<span class="token punctuation">(</span>net<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span>        net <span class="token operator">=</span> self<span class="token punctuation">.</span>_conv_layer<span class="token punctuation">(</span>net<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>        net <span class="token operator">=</span> self<span class="token punctuation">.</span>_conv_layer<span class="token punctuation">(</span>net<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span>        net <span class="token operator">=</span> self<span class="token punctuation">.</span>_conv_layer<span class="token punctuation">(</span>net<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span>        net <span class="token operator">=</span> self<span class="token punctuation">.</span>_conv_layer<span class="token punctuation">(</span>net<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span>        net <span class="token operator">=</span> self<span class="token punctuation">.</span>_conv_layer<span class="token punctuation">(</span>net<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span>        net <span class="token operator">=</span> self<span class="token punctuation">.</span>_conv_layer<span class="token punctuation">(</span>net<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span>        net <span class="token operator">=</span> self<span class="token punctuation">.</span>_conv_layer<span class="token punctuation">(</span>net<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>        net <span class="token operator">=</span> self<span class="token punctuation">.</span>_maxpool_layer<span class="token punctuation">(</span>net<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>        net <span class="token operator">=</span> self<span class="token punctuation">.</span>_conv_layer<span class="token punctuation">(</span>net<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span>        net <span class="token operator">=</span> self<span class="token punctuation">.</span>_conv_layer<span class="token punctuation">(</span>net<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>        net <span class="token operator">=</span> self<span class="token punctuation">.</span>_conv_layer<span class="token punctuation">(</span>net<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span>        net <span class="token operator">=</span> self<span class="token punctuation">.</span>_conv_layer<span class="token punctuation">(</span>net<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>        net <span class="token operator">=</span> self<span class="token punctuation">.</span>_conv_layer<span class="token punctuation">(</span>net<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span>        net <span class="token operator">=</span> self<span class="token punctuation">.</span>_conv_layer<span class="token punctuation">(</span>net<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span>        net <span class="token operator">=</span> self<span class="token punctuation">.</span>_conv_layer<span class="token punctuation">(</span>net<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span>        net <span class="token operator">=</span> self<span class="token punctuation">.</span>_conv_layer<span class="token punctuation">(</span>net<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输出[None,7,7,1024]</span>        net <span class="token operator">=</span> self<span class="token punctuation">.</span>_flatten<span class="token punctuation">(</span>net<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 将输入张量展开为一维 [batch, 7*7*124]</span>        net <span class="token operator">=</span> self<span class="token punctuation">.</span>_fc_layer<span class="token punctuation">(</span>net<span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> activation<span class="token operator">=</span>self<span class="token punctuation">.</span>_leak_relu<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输入张量，神经元数量，激活函数，层id</span>        net <span class="token operator">=</span> self<span class="token punctuation">.</span>_fc_layer<span class="token punctuation">(</span>net<span class="token punctuation">,</span> <span class="token number">4096</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> activation<span class="token operator">=</span>self<span class="token punctuation">.</span>_leak_relu<span class="token punctuation">)</span>        net <span class="token operator">=</span> self<span class="token punctuation">.</span>_fc_layer<span class="token punctuation">(</span>net<span class="token punctuation">,</span> self<span class="token punctuation">.</span>grid <span class="token operator">*</span> self<span class="token punctuation">.</span>grid <span class="token operator">*</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>class_num <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>box<span class="token punctuation">)</span><span class="token punctuation">,</span>                             <span class="token number">27</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 神经元数量7*7*(20+5*2)=7*7*30 = 1470</span>        <span class="token comment" spellcheck="true"># {TensorShape} (?,1470)</span>        self<span class="token punctuation">.</span>predicts <span class="token operator">=</span> net        <span class="token keyword">if</span> self<span class="token punctuation">.</span>verbose<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Finished build the network……"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_conv_layer</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> filter_size<span class="token punctuation">,</span> stride<span class="token punctuation">,</span> filter_num<span class="token punctuation">,</span> layer_id<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        卷积层的实现过程        :param x: 输入图像        :param filter_size: kernel的大小        :param stride: 步长        :param filter_num: kernel的个数        :param layer_id: 网络层数        :return: 经过神经网络的图像输出 四维中三维都发生变化 [None, width,height,kernel个数]        """</span>        input_channel <span class="token operator">=</span> x<span class="token punctuation">.</span>get_shape<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>as_list<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 输入通道数</span>        <span class="token comment" spellcheck="true"># 总共的权值初始化均值为0 标准差为0.1的正态分布</span>        weight <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span>            tf<span class="token punctuation">.</span>truncated_normal<span class="token punctuation">(</span><span class="token punctuation">[</span>filter_size<span class="token punctuation">,</span> filter_size<span class="token punctuation">,</span> input_channel<span class="token punctuation">,</span> filter_num<span class="token punctuation">]</span><span class="token punctuation">,</span> stddev<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 权重节点</span>        bias <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">[</span>filter_num<span class="token punctuation">,</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 偏置项</span>        <span class="token comment" spellcheck="true"># 手动padding，不能使用`SAME`,否则会导致坐标计算错误</span>        pad_size <span class="token operator">=</span> filter_size <span class="token operator">//</span> <span class="token number">2</span>        <span class="token comment" spellcheck="true"># 要理解的话需要理解每一维的意义：eg:[None, 7,7,3]</span>        <span class="token comment" spellcheck="true"># 如果要padding的话，就padding 图像的宽度和高度</span>        pad_mat <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>pad_size<span class="token punctuation">,</span> pad_size<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>pad_size<span class="token punctuation">,</span> pad_size<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        x_pad <span class="token operator">=</span> tf<span class="token punctuation">.</span>pad<span class="token punctuation">(</span>x<span class="token punctuation">,</span> pad_mat<span class="token punctuation">)</span>        conv <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>conv2d<span class="token punctuation">(</span>x_pad<span class="token punctuation">,</span> weight<span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> stride<span class="token punctuation">,</span> stride<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">"VALID"</span><span class="token punctuation">)</span>        conv_bias <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>bias_add<span class="token punctuation">(</span>conv<span class="token punctuation">,</span> bias<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 激活函数</span>        output <span class="token operator">=</span> self<span class="token punctuation">.</span>_leak_relu<span class="token punctuation">(</span>conv_bias<span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>verbose<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">" Layer %d : Type=Convolutional Layer, Filter_size=%d, Stride=%d, Filter_num=%d, Output_shape=%s"</span> \                  <span class="token operator">%</span> <span class="token punctuation">(</span>layer_id<span class="token punctuation">,</span> filter_size<span class="token punctuation">,</span> stride<span class="token punctuation">,</span> filter_num<span class="token punctuation">,</span> str<span class="token punctuation">(</span>output<span class="token punctuation">.</span>get_shape<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> output    <span class="token keyword">def</span> <span class="token function">_leak_relu</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        激活函数        :param x: 输入图像        :param alpha: 从leak_relu的图像可以看到        :return: 经过激活函数的输出图像        """</span>        <span class="token comment" spellcheck="true"># 返回alpha * x 和x两者之间的最大值</span>        <span class="token keyword">return</span> tf<span class="token punctuation">.</span>maximum<span class="token punctuation">(</span>alpha <span class="token operator">*</span> x<span class="token punctuation">,</span> x<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_maxpool_layer</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> pool_size<span class="token punctuation">,</span> stride<span class="token punctuation">,</span> layer_id<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        最大池化层        :param x: 输入图像        :param pool_size: 池化尺寸        :param stride: 池化步长        :param layer_id: 层数索引        :return: 输出图像        """</span>        output <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>max_pool<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> pool_size<span class="token punctuation">,</span> pool_size<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> stride<span class="token punctuation">,</span> stride<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">"SAME"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>verbose<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">" Layer %d : Type=Maxpool, Pool_size=%d, Stride=%d, Output_shape=%s"</span> \                  <span class="token operator">%</span> <span class="token punctuation">(</span>layer_id<span class="token punctuation">,</span> pool_size<span class="token punctuation">,</span> stride<span class="token punctuation">,</span> str<span class="token punctuation">(</span>output<span class="token punctuation">.</span>get_shape<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> output    <span class="token keyword">def</span> <span class="token function">_flatten</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        将四维的图像信心展开        eg: [None,7,7,32] ->[None,7*7*32]        :param x: [batch, row, column,channels]        :return: [batch, row * column * channels]        """</span>        x_trans <span class="token operator">=</span> tf<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 转置</span>        nums <span class="token operator">=</span> np<span class="token punctuation">.</span>product<span class="token punctuation">(</span>x<span class="token punctuation">.</span>get_shape<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>as_list<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 列表元素全部相乘</span>        <span class="token keyword">return</span> tf<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>x_trans<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> nums<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_fc_layer</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> neuron_num<span class="token punctuation">,</span> layer_id<span class="token punctuation">,</span> activation<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        全连接层        :param x: [batch, row * column * channels]        :param neuron_num: 权重数量，可也以说是输出尺寸        :param layer_id: 层数索引        :param activation: 激活函数        :return: neuron_num        """</span>        <span class="token comment" spellcheck="true"># 通道数/维数</span>        input_num <span class="token operator">=</span> x<span class="token punctuation">.</span>get_shape<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>as_list<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 均差为0，标准差为0.1的正态分布</span>        weight <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>truncated_normal<span class="token punctuation">(</span><span class="token punctuation">[</span>input_num<span class="token punctuation">,</span> neuron_num<span class="token punctuation">]</span><span class="token punctuation">,</span> stddev<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        bias <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">[</span>neuron_num<span class="token punctuation">,</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        output <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>xw_plus_b<span class="token punctuation">(</span>x<span class="token punctuation">,</span> weight<span class="token punctuation">,</span> bias<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 相当于matmul(x, weights) + biases</span>        <span class="token comment" spellcheck="true"># 正常的全连接城市leak_relu激活函数</span>        <span class="token comment" spellcheck="true"># 最后一层是liner函数</span>        <span class="token keyword">if</span> activation<span class="token punctuation">:</span>            output <span class="token operator">=</span> activation<span class="token punctuation">(</span>output<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 打印该层信心</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>verbose<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Layer %d : Type=Full_connect_layer, Neuron_num=%d, output_shape=%s"</span> \                  <span class="token operator">%</span> <span class="token punctuation">(</span>layer_id<span class="token punctuation">,</span> neuron_num<span class="token punctuation">,</span> str<span class="token punctuation">(</span>output<span class="token punctuation">.</span>get_shape<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> output    <span class="token keyword">def</span> <span class="token function">_load_weights</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> weights_file<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        加载权重文件        :param weights_file: 权重文件        :return: 无        """</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>verbose<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Start to laod the weights file:%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>weights_file<span class="token punctuation">)</span><span class="token punctuation">)</span>        saver <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>Saver<span class="token punctuation">(</span><span class="token punctuation">)</span>        saver<span class="token punctuation">.</span>restore<span class="token punctuation">(</span>self<span class="token punctuation">.</span>sess<span class="token punctuation">,</span> weights_file<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># -----------------------------------------------------------------------------------</span>    <span class="token keyword">def</span> <span class="token function">detect_from_file</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> image<span class="token punctuation">,</span> imshow<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                         detected_boxes_file<span class="token operator">=</span><span class="token string">'boxes_file.txt'</span><span class="token punctuation">,</span> detected_image_file<span class="token operator">=</span><span class="token string">'detected_image.jpg'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        检测图像，并且将边界框 分类结果 坐标保存为txt        :param image: 输入图像        :param imshow: 是否显示        :param detected_boxes_file: 坐标记录        :param detected_image_file: 图像检测结果        :return:        """</span>        image <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>image<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 读入图像</span>        img_h<span class="token punctuation">,</span> img_w<span class="token punctuation">,</span> _ <span class="token operator">=</span> image<span class="token punctuation">.</span>shape  <span class="token comment" spellcheck="true"># 图片的高度和宽度</span>        predicts <span class="token operator">=</span> self<span class="token punctuation">.</span>_detect_from_image<span class="token punctuation">(</span>image<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 将图像输入卷积神经网络进行前向传播计算&lt;class 'tuple'> (1470,)</span>        predict_boxes <span class="token operator">=</span> self<span class="token punctuation">.</span>_interpret_predicts<span class="token punctuation">(</span>predicts<span class="token punctuation">,</span> img_h<span class="token punctuation">,</span> img_w<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 解析预测结果，得到检测框</span>        self<span class="token punctuation">.</span>show_results<span class="token punctuation">(</span>image<span class="token punctuation">,</span> predict_boxes<span class="token punctuation">,</span> imshow<span class="token punctuation">,</span> detected_boxes_file<span class="token punctuation">,</span> detected_image_file<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_detect_from_image</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> image<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        将图像输入卷积神经网络进行前向传播计算        :param image: 原始符合网络规格的图像        :return: 预测结果        """</span>        img_resize <span class="token operator">=</span> cv2<span class="token punctuation">.</span>resize<span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">448</span><span class="token punctuation">,</span> <span class="token number">448</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 缩放图片，使用网络的输入尺寸要求</span>        img_RGB <span class="token operator">=</span> cv2<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>img_resize<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>COLOR_BGR2RGB<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 颜色空间转为RGB</span>        img_np <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>img_RGB<span class="token punctuation">)</span>        _images <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">448</span><span class="token punctuation">,</span> <span class="token number">448</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>        _images<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>img_np <span class="token operator">/</span> <span class="token number">255.0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">-</span> <span class="token number">1.0</span>  <span class="token comment" spellcheck="true"># 图像转数组</span>        <span class="token comment" spellcheck="true"># self.predicts (?,1470)</span>        predicts <span class="token operator">=</span> self<span class="token punctuation">.</span>sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>self<span class="token punctuation">.</span>predicts<span class="token punctuation">,</span> feed_dict<span class="token operator">=</span><span class="token punctuation">{</span>self<span class="token punctuation">.</span>images<span class="token punctuation">:</span> _images<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># including :  7x7x30 = 1470</span>        <span class="token comment" spellcheck="true"># per grid cell:box_classes(20) \scores(2)\ bounding_box(8)</span>        <span class="token keyword">return</span> predicts    <span class="token keyword">def</span> <span class="token function">_interpret_predicts</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> predicts<span class="token punctuation">,</span> img_h<span class="token punctuation">,</span> img_w<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        解析预测结果，得到检测框        :param predicts: 预测结果 7x7x30 = 1470 per grid cell:box_classes(20) \scores(2)\ bounding_box(8)        :param img_h: 原始图像的高度 448        :param img_w: 原始图像的宽度 448        :return: 预测框数据为：[概率,x,y,w,h,类别置信度]        """</span>        <span class="token comment" spellcheck="true"># idx1 = 7x7x20 = 980</span>        idx1 <span class="token operator">=</span> self<span class="token punctuation">.</span>grid <span class="token operator">*</span> self<span class="token punctuation">.</span>grid <span class="token operator">*</span> self<span class="token punctuation">.</span>class_num  <span class="token comment" spellcheck="true"># 7*7* 20类</span>        <span class="token comment" spellcheck="true"># idx2 = 7x7x2 = 98</span>        idx2 <span class="token operator">=</span> idx1 <span class="token operator">+</span> self<span class="token punctuation">.</span>grid <span class="token operator">*</span> self<span class="token punctuation">.</span>grid <span class="token operator">*</span> self<span class="token punctuation">.</span>box  <span class="token comment" spellcheck="true"># 7*7* 2预测框的置信度</span>        <span class="token comment" spellcheck="true"># &lt;class 'tuple'>(7,7,20)</span>        <span class="token comment" spellcheck="true"># predicts[:7x7x20 = 980]</span>        class_prob <span class="token operator">=</span> np<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>predicts<span class="token punctuation">[</span><span class="token punctuation">:</span>idx1<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>grid<span class="token punctuation">,</span> self<span class="token punctuation">.</span>grid<span class="token punctuation">,</span> self<span class="token punctuation">.</span>class_num<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 类别概率</span>        <span class="token comment" spellcheck="true"># &lt;class 'tuple'>(7,7,2)</span>        <span class="token comment" spellcheck="true"># predicts[980: 980+98]</span>        confidence <span class="token operator">=</span> np<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>predicts<span class="token punctuation">[</span>idx1<span class="token punctuation">:</span>idx2<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>grid<span class="token punctuation">,</span> self<span class="token punctuation">.</span>grid<span class="token punctuation">,</span> self<span class="token punctuation">.</span>box<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 检测框置信度</span>        <span class="token comment" spellcheck="true">#&lt;class 'tuple'>(7,7,2,4)</span>        <span class="token comment" spellcheck="true"># predicts[980+98: 1469]</span>        <span class="token comment" spellcheck="true"># 7x7x4x2 = 392</span>        boxes <span class="token operator">=</span> np<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>predicts<span class="token punctuation">[</span>idx2<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>grid<span class="token punctuation">,</span> self<span class="token punctuation">.</span>grid<span class="token punctuation">,</span> self<span class="token punctuation">.</span>box<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 检测框坐标</span>        <span class="token comment" spellcheck="true"># 类别置信度分数</span>        <span class="token comment" spellcheck="true"># (7,7,2,1) x(7,7,1,20) = (7,7,2,20)</span>        scores <span class="token operator">=</span> np<span class="token punctuation">.</span>expand_dims<span class="token punctuation">(</span>confidence<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>expand_dims<span class="token punctuation">(</span>class_prob<span class="token punctuation">,</span>                                                                 <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 扩展维度再相乘 [7,7,2,1]*[7,7,1,20] = [7,7,2,20]</span>        <span class="token comment" spellcheck="true">#(7*7*2 = 98,20)</span>        scores <span class="token operator">=</span> np<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>scores<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>class_num<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># [S*S*B, C] 7*7*2个预测框，每个20个类别预测值 [7*7*2,20]</span>        <span class="token comment" spellcheck="true"># 转换检测框中心的坐标</span>        boxes<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+=</span> self<span class="token punctuation">.</span>x_offset        boxes<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> self<span class="token punctuation">.</span>y_offset        boxes<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">/=</span> self<span class="token punctuation">.</span>grid        <span class="token comment" spellcheck="true"># 检测框的高和宽</span>        boxes<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>square<span class="token punctuation">(</span>boxes<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 相对坐标转为绝对坐标(乘图像的高和宽)</span>        boxes<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*=</span> img_w        boxes<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*=</span> img_h        boxes<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">*=</span> img_w        boxes<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">*=</span> img_h        <span class="token comment" spellcheck="true"># (7,7,2,4) -> (98,4)</span>        boxes <span class="token operator">=</span> np<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>boxes<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 将类别置信度分数过低的置为0</span>        scores<span class="token punctuation">[</span>scores <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>conf_threshold<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.0</span>        <span class="token comment" spellcheck="true"># 非极大值抑制</span>        self<span class="token punctuation">.</span>_non_max_suppression<span class="token punctuation">(</span>scores<span class="token punctuation">,</span> boxes<span class="token punctuation">)</span>        predict_boxes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># (class, x, y, w, h, scores)</span>        <span class="token comment" spellcheck="true">#(98,) 这里找到了分类置信度最大的索引值</span>        max_idxs <span class="token operator">=</span> np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>scores<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 每一个预测框的最大类别置信分数的索引 scores形状[7*7*2,30]</span>        <span class="token comment" spellcheck="true"># len(scores) = 98</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>scores<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 遍历每个预测框</span>            max_idx <span class="token operator">=</span> max_idxs<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token comment" spellcheck="true"># 遍历scores</span>            <span class="token keyword">if</span> scores<span class="token punctuation">[</span>i<span class="token punctuation">,</span> max_idx<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0.0</span><span class="token punctuation">:</span>                predict_boxes<span class="token punctuation">.</span>append<span class="token punctuation">(</span>                    <span class="token punctuation">(</span>self<span class="token punctuation">.</span>classes<span class="token punctuation">[</span>max_idx<span class="token punctuation">]</span><span class="token punctuation">,</span> boxes<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> boxes<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> boxes<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> boxes<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> scores<span class="token punctuation">[</span>i<span class="token punctuation">,</span> max_idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> predict_boxes    <span class="token keyword">def</span> <span class="token function">_non_max_suppression</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> scores<span class="token punctuation">,</span> boxes<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        非极大值抑制,针对每一类        :param scores: (98,20)        :param boxes: (98,4)        :return:        """</span>        <span class="token comment" spellcheck="true"># 针对于每一类</span>        <span class="token keyword">for</span> c <span class="token keyword">in</span> range<span class="token punctuation">(</span>self<span class="token punctuation">.</span>class_num<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># argsort 从小到大的索引值</span>            <span class="token comment" spellcheck="true"># scores[:, c] 得到全部的98列</span>            <span class="token comment" spellcheck="true"># np.argsort(scores[:, c]) 从小到大的全部98列的索引</span>            sorted_idxs <span class="token operator">=</span> np<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span>scores<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> c<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 排序后的索引</span>            <span class="token comment" spellcheck="true"># 得到每一列的最大值</span>            last <span class="token operator">=</span> len<span class="token punctuation">(</span>sorted_idxs<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>  <span class="token comment" spellcheck="true"># 取最大值用</span>            <span class="token keyword">while</span> last <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># sorted_idxs[last] 每一列的最大值</span>                <span class="token comment" spellcheck="true"># 每一类</span>                <span class="token comment" spellcheck="true"># 如果 第c 类的最大置信分数 直接跳过</span>                <span class="token keyword">if</span> scores<span class="token punctuation">[</span>sorted_idxs<span class="token punctuation">[</span>last<span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">1e</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 类c的最大置信分数scores[sorted_idxs[last], c]</span>                    <span class="token keyword">break</span>                <span class="token comment" spellcheck="true">#</span>                <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>last<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 逐个取最大置信分数，计算iou，超过阈值置为0（如两辆车，各自有多个预测框）</span>                    <span class="token keyword">if</span> scores<span class="token punctuation">[</span>sorted_idxs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">1e</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span>                        <span class="token keyword">continue</span>                    <span class="token keyword">if</span> self<span class="token punctuation">.</span>_iou<span class="token punctuation">(</span>boxes<span class="token punctuation">[</span>sorted_idxs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> boxes<span class="token punctuation">[</span>sorted_idxs<span class="token punctuation">[</span>last<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> self<span class="token punctuation">.</span>iou_threshold<span class="token punctuation">:</span>                        scores<span class="token punctuation">[</span>sorted_idxs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.0</span>                last <span class="token operator">-=</span> <span class="token number">1</span>    <span class="token keyword">def</span> <span class="token function">_iou</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> box1<span class="token punctuation">,</span> box2<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># [x,y,w,h]</span>        <span class="token triple-quoted-string string">"""计算两个预测框的交并比"""</span>        inter_w <span class="token operator">=</span> np<span class="token punctuation">.</span>minimum<span class="token punctuation">(</span>box1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">0.5</span> <span class="token operator">*</span> box1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> box2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">0.5</span> <span class="token operator">*</span> box2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> \                  np<span class="token punctuation">.</span>maximum<span class="token punctuation">(</span>box1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">0.5</span> <span class="token operator">*</span> box1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> box2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">0.5</span> <span class="token operator">*</span> box2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        inter_h <span class="token operator">=</span> np<span class="token punctuation">.</span>minimum<span class="token punctuation">(</span>box1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">0.5</span> <span class="token operator">*</span> box1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> box2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">0.5</span> <span class="token operator">*</span> box2<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> \                  np<span class="token punctuation">.</span>maximum<span class="token punctuation">(</span>box1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">0.5</span> <span class="token operator">*</span> box1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> box2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">0.5</span> <span class="token operator">*</span> box2<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> inter_h <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">or</span> inter_w <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>            inter_area <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            inter_area <span class="token operator">=</span> inter_w <span class="token operator">*</span> inter_h        union_area <span class="token operator">=</span> box1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">*</span> box1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> box2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">*</span> box2<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">-</span> inter_area        <span class="token keyword">return</span> inter_area <span class="token operator">/</span> union_area    <span class="token keyword">def</span> <span class="token function">show_results</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> image<span class="token punctuation">,</span> predict_boxes<span class="token punctuation">,</span> imshow<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> detected_boxes_file<span class="token operator">=</span>None<span class="token punctuation">,</span> detected_image_file<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""在图片上绘制检测框"""</span>        results <span class="token operator">=</span> predict_boxes        img_copy <span class="token operator">=</span> image<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> detected_boxes_file<span class="token punctuation">:</span>            f <span class="token operator">=</span> open<span class="token punctuation">(</span>detected_boxes_file<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 遍历检测框，获取每个的信息</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># i [class,x,y,w,h,scores]</span>            x <span class="token operator">=</span> int<span class="token punctuation">(</span>results<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            y <span class="token operator">=</span> int<span class="token punctuation">(</span>results<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            w <span class="token operator">=</span> int<span class="token punctuation">(</span>results<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>            h <span class="token operator">=</span> int<span class="token punctuation">(</span>results<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>verbose<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">" Class: %s, [x, y, w, h]=[%d, %d, %d, %d], Confidence=%f"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>                results<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> w<span class="token punctuation">,</span> h<span class="token punctuation">,</span> results<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            cv2<span class="token punctuation">.</span>rectangle<span class="token punctuation">(</span>img_copy<span class="token punctuation">,</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> w<span class="token punctuation">,</span> y <span class="token operator">-</span> h<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> w<span class="token punctuation">,</span> y <span class="token operator">+</span> h<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 画检测框</span>            cv2<span class="token punctuation">.</span>rectangle<span class="token punctuation">(</span>img_copy<span class="token punctuation">,</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> w<span class="token punctuation">,</span> y <span class="token operator">-</span> h <span class="token operator">-</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> w<span class="token punctuation">,</span> y <span class="token operator">-</span> h<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 画文本框</span>            cv2<span class="token punctuation">.</span>putText<span class="token punctuation">(</span>img_copy<span class="token punctuation">,</span> results<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'%.2f'</span> <span class="token operator">%</span> results<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> w <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">,</span> y <span class="token operator">-</span> h <span class="token operator">-</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        cv2<span class="token punctuation">.</span>FONT_HERSHEY_SIMPLEX<span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 照片/添加的文字/左上角坐标/字体/字体大小/颜色/字体粗细</span>            <span class="token keyword">if</span> detected_boxes_file<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 将检测框信息写入文件</span>                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>results<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">','</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">','</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">','</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>w<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">','</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>h<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">','</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>                    results<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> imshow<span class="token punctuation">:</span>            cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">'YOLO_small detection'</span><span class="token punctuation">,</span> img_copy<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 显示图片（窗口名称，图片）</span>            cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 等待毫秒数，0表示无限等待</span>        <span class="token keyword">if</span> detected_image_file<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 保存图片</span>            cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span>detected_image_file<span class="token punctuation">,</span> img_copy<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 参数：保存文件名，读入图片</span>        <span class="token keyword">if</span> detected_boxes_file<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 关闭检测框信息文件</span>            f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    yolo <span class="token operator">=</span> YOLO<span class="token punctuation">(</span><span class="token string">"./weights/YOLO_small.ckpt"</span><span class="token punctuation">)</span>    yolo<span class="token punctuation">.</span>detect_from_file<span class="token punctuation">(</span><span class="token string">"./test/car2.jpg"</span><span class="token punctuation">)</span></code></pre><p>参考资料:</p><ul><li><a href="https://zhuanlan.zhihu.com/p/32525231" target="_blank" rel="noopener">目标检测|YOLO原理与实现</a></li><li><a href="https://github.com/xiaohu2015/DeepLearning_tutorials/blob/master/ObjectDetections/yolo/yolo_tf.py" target="_blank" rel="noopener">DeepLearning_tutorials</a> </li><li><a href="https://lanpeihui.top/" target="_blank" rel="noopener">lanpeihui</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> tensorflow </tag>
            
            <tag> Yolov1 </tag>
            
            <tag> Yolov1Programing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写于2020年3月31日深夜</title>
      <link href="/2020/03/31/20200331-230851/"/>
      <url>/2020/03/31/20200331-230851/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&nbsp;&nbsp;&nbsp;&nbsp; <code>2020年3月31日23:09:52</code> ，即将进入春天的四月份，恰逢今天晚上把自己的小窝(<code>Blog</code>)搭建的差不多了。看着黑夜中的点点灯光，听着汽车在马路上的喧嚣之身，忽然感阵阵焦虑。</p><h2 id="回首"><a href="#回首" class="headerlink" title="回首"></a>回首</h2><p>&nbsp;&nbsp;&nbsp;&nbsp; 回首研究生的第一个学期，竟然没有学习到新的技能，不能太把老师的任务当回事，还是得自己学好自己的东西。在这半年了，环境变了，身边的人不同了，自己也变得浮躁了，不能静下心来积累知识。自己制定的学习计划一次也没有完成过，总是吊儿郎当。慢慢的和优秀的人的差距越来越大，和比自己差的人的差距变得越来越小，人生就是这样，不进则退。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 信誓旦旦的在研究生开学之前定好学习计划，到今天才发现是一场空，一点都没有完成，今天焦虑的原因很大一部分就是因为这吧，还有一部分就是没钱….。</p><h2 id="翘首以望"><a href="#翘首以望" class="headerlink" title="翘首以望"></a>翘首以望</h2><p>&nbsp;&nbsp;&nbsp;&nbsp; 距离2020年结束，还有275天，也就意味着我的研究生毕设的题目已经定下了，我也做过了研究生一半的时光。我不想在2021年的第一天在遗憾2020年的每一天，遗憾为什么不认真完成自己制定的学习计划。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 在这周之前的周末制定了一份学习计划，学习强度特别大，但是我真的想认真地完成这份计划。如果能够完成，我一定会变得很有底气。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 写的有些乱七八糟，和自己现在的心情一样，可能自己无法用语言无法表达，但是我真的希望我能实现这份学习计划中的内容。</p><h2 id="最大不足之处"><a href="#最大不足之处" class="headerlink" title="最大不足之处"></a>最大不足之处</h2><p>睡觉过多：晚上睡5个半小时足够了，中午30min足够了</p><p>看视频：尤其是虎牙直播的LOL比赛和一起看</p><p>走路和吃饭的时间刷抖音</p><p>试着克服下吧，毕竟离我被卖给企业的时间真的不多了…..</p><h2 id="关于学习计划"><a href="#关于学习计划" class="headerlink" title="关于学习计划"></a>关于学习计划</h2><p>&nbsp;&nbsp;&nbsp;&nbsp; 算了，想了想还是不发了，怕被人看到。其实这篇文章并不想被别人看到的</p><p>学习计划是<code>EXCEL</code>做的，剩下的自己看着玩吧</p><h2 id="关于兼职问题"><a href="#关于兼职问题" class="headerlink" title="关于兼职问题"></a>关于兼职问题</h2><p>&nbsp;&nbsp;&nbsp;&nbsp; 我现在尝试着在知乎上回答问题，开一个公众号，咸鱼卖资源，抖音记录日常，不过我现在想要学习手机摄影和PS操作，毕竟之前P了个效果不满意的图都得要20元</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>&nbsp;&nbsp;&nbsp;&nbsp; 算了，不说了，新更新的逆天邪神还没看，洗洗脸，敷张面膜，就睡吧。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 希望我能记得住今天的这种感受。。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; <code>结束于2020年3月31日23:42:07</code></p><p>&nbsp;&nbsp;&nbsp;&nbsp; 希望以后的每天都是充实的日子。</p><h2 id="每日知识总结"><a href="#每日知识总结" class="headerlink" title="每日知识总结"></a>每日知识总结</h2><ol><li>新建md文件</li><li>添加参考</li><li>有空就仔细写，没空就copy过来</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 以笔谈心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>质量网站</title>
      <link href="/2020/03/31/20200331-202916/"/>
      <url>/2020/03/31/20200331-202916/</url>
      
        <content type="html"><![CDATA[<h2 id="网站汇总"><a href="#网站汇总" class="headerlink" title="网站汇总"></a>网站汇总</h2><h3 id="1-设计类"><a href="#1-设计类" class="headerlink" title="1.设计类"></a>1.设计类</h3><ol><li><p><a href="https://www.designevo.com/cn/" target="_blank" rel="noopener">designEvo</a></p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/1.png" alt=""></p></li></ol><p>&nbsp;&nbsp;&nbsp;&nbsp; 可制作<code>Logo</code>,能够免费下载低质量的，自己设计的<code>logo</code></p><p>&nbsp;&nbsp;&nbsp;&nbsp; 此博客的<code>logo</code>就是通过这个网站制作的</p><h3 id="2-6个桌面壁纸网站"><a href="#2-6个桌面壁纸网站" class="headerlink" title="2. 6个桌面壁纸网站"></a>2. 6个桌面壁纸网站</h3><ul><li><a href="http://wallls.com/" target="_blank" rel="noopener">wallls.com</a><ul><li>至少网页名字很好记住，在这个网站当中，首先就给了你相应的主题 </li><li>最好的方式是，你可以根据喜欢的颜色来找到喜欢的壁纸，比如这种类似 蒂芙尼蓝，选择好相应壁纸之后，直接点击下载即可 </li></ul></li><li><a href="https://www.wallpaperup.com/" target="_blank" rel="noopener">wallpaperup</a><ul><li>在这个网站上，你可以选择通过分类来找到想要的壁纸，也可以通过屏幕分辨率，适配你本身的电脑屏幕，甚至手机。 </li></ul></li><li><a href="http://simpledesktops.com/" target="_blank" rel="noopener">simpledesktops.com</a><ul><li>如果你喜欢极简设计的壁纸，这个网站就不要错过啦，找到你想要的壁纸，直接下载即可，当然，还能在这里，选择选择 Mac、iOS或者安卓等不同屏幕的适配 </li></ul></li><li><a href="https://stocksnap.io/" target="_blank" rel="noopener">stocksnap</a><ul><li>可自由下载使用的高清晰数码作品素材库，你随时都可以下载自己免费的资源 </li></ul></li><li><a href="https://www.pexels.com/" target="_blank" rel="noopener">pexels</a><ul><li>常用</li><li>高清无码、免费商用，如果还有一个特点，那就是网站好看 </li></ul></li></ul><p>参考：</p><p><a href="https://www.zhihu.com/question/21757507/answer/288387063" target="_blank" rel="noopener">你平时在哪找免费的可商业使用的图片素材？</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> website </category>
          
      </categories>
      
      
        <tags>
            
            <tag> website </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ps技巧</title>
      <link href="/2020/03/31/20200331-201841/"/>
      <url>/2020/03/31/20200331-201841/</url>
      
        <content type="html"><![CDATA[<h2 id="PS技巧汇总"><a href="#PS技巧汇总" class="headerlink" title="PS技巧汇总"></a>PS技巧汇总</h2><p>&nbsp;&nbsp;&nbsp;&nbsp; 用到什么学什么，主要是没时间学啊…</p><h3 id="1-底色透明"><a href="#1-底色透明" class="headerlink" title="1. 底色透明"></a>1. 底色透明</h3><blockquote><p>需求：是为了将<code>Blog</code>的<code>logo</code>和<code>Favicon</code>变为底色透明的图</p></blockquote><ol><li><code>PS</code>中打开图片，并解锁图层</li><li>顶部导航栏：选择 -&gt;色彩范围，点击</li><li>将鼠标放到左边图片白色部分，鼠标变成采集颜色的笔，然后左键点击白色位置，然后再点击右侧确定。这时候图片处白色背景以外，都变成选定状态。 </li><li>步骤四：按<code>Delete</code>键删除白底，这时候图片呈透明状态 </li><li>保存即可</li></ol><h4 id="2-PS图片放大缩小"><a href="#2-PS图片放大缩小" class="headerlink" title="2. PS图片放大缩小"></a>2. PS图片放大缩小</h4><p><code>ctrl+T(自由变换)</code></p><p><code>alt+shift</code>等比缩放</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pycharm使用记录</title>
      <link href="/2020/03/30/20200330-194036/"/>
      <url>/2020/03/30/20200330-194036/</url>
      
        <content type="html"><![CDATA[<h2 id="1-pycharm的调试功能"><a href="#1-pycharm的调试功能" class="headerlink" title="1. pycharm的调试功能"></a>1. pycharm的调试功能</h2><ul><li><p>设置断点</p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/%E8%AE%BE%E7%BD%AE%E6%96%AD%E7%82%B9.png" alt=""></p></li><li><p>开始<code>debug</code></p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/debug.png" alt=""></p></li><li><p>代码执行页面</p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/debug1.png" alt=""></p><ul><li><code>step over</code>（F8快捷键）：在单步执行时，在函数内遇到子函数时不会进入子函数内单步执行，而是将子函数整个执行完再停止，也就是把子函数整个作为一步。在不存在子函数的情况下是和step into效果一样的。简单的说就是，<strong>程序代码越过子函数，但子函数会执行，且不进入。</strong> </li><li><code>step into</code>（F7快捷键）：在单步执行时，遇到子函数就进入并且继续单步执行，有的会跳到源代码里面去执行。 </li><li><code>step into my code</code>（Alt+Shift+F7快捷键）：在单步执行时，遇到子函数就进入并且继续单步执行，不会进入到源码中。 </li><li><code>step out</code>（Shift+F8快捷键）：假如进入了一个函数体中，你看了两行代码，不想看了，跳出当前函数体内，返回到调用此函数的地方，即使用此功能即可。 </li></ul></li></ul><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p> <code>pycharm</code> 为什么在工程性的程序中颇受欢迎，因为它实在是太强大了。。。还有一些拓展功能，大家可以去慕课网上搜下<strong>IntelliJ IDEA神器使用技巧</strong> ,老师讲的非常详细，涉及到许多技巧，<code>idea</code>和<code>pycharm</code>是一家公司出的，所以使用上的技巧也是一样的，可以融会贯通。 </p><h2 id="2-批量删除代码注释"><a href="#2-批量删除代码注释" class="headerlink" title="2.批量删除代码注释"></a>2.批量删除代码注释</h2><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/%E6%89%B9%E9%87%8F%E6%B3%A8%E9%87%8A.png" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pycharm </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>YoloV1 基于tensorflow2的代码编写过程记录</title>
      <link href="/2020/03/27/20200327-092117/"/>
      <url>/2020/03/27/20200327-092117/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&nbsp;&nbsp;&nbsp;&nbsp; 本来打算使用<code>jupyter</code>来写，但是之间使用<code>jupyter</code>调用<code>opencv</code>的<code>imshow</code>函数显示图片时会卡顿，图像显示的<code>GUI</code>窗体无响应，所以还是使用<code>pycharm</code>来写吧</p><h2 id="pycharm-IDE的基本配置"><a href="#pycharm-IDE的基本配置" class="headerlink" title="pycharm IDE的基本配置"></a>pycharm IDE的基本配置</h2><ol><li><p>setting 在File中</p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/setting.png" alt=""></p></li><li><p>设置主题，最好设置为Darcula的主题，偏黑灰色，属于护眼模式，当然也能够装..</p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/setting1.png" alt=""></p></li><li><p>显示行号，不解释</p><p>选择-<code>Editor-General-Appearance</code> 选择<code>show line numbers</code>显示行号 </p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/setting2.png" alt=""></p></li><li><p>修改字体大小，默认的字体太不友好了</p><p>选择<code>Editor-Colors&amp;Font-Font</code>，我们可以选择<code>Consolas</code> 字体，字号修改为18</p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/setting3.png" alt=""></p></li></ol><h2 id="机器学习相关知识整理"><a href="#机器学习相关知识整理" class="headerlink" title="机器学习相关知识整理"></a>机器学习相关知识整理</h2><h3 id="理解卷积网络中的通道channel"><a href="#理解卷积网络中的通道channel" class="headerlink" title="理解卷积网络中的通道channel"></a>理解卷积网络中的通道channel</h3><p>&nbsp;&nbsp;&nbsp;&nbsp; 在深度学习的算法学习中，都会提到 <code>channels</code> 这个概念。在一般的深度学习框架的 <code>conv2d</code> 中，如 <code>channels</code> 都是必填的一个参数。 </p><p>&nbsp;&nbsp;&nbsp;&nbsp; <code>channels</code> 该如何理解？</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 首先，是<code>tensorflow</code>中给出的，对于输入样本中 <code>channels</code> 的含义。一般的RGB图片，<code>channels</code> 数量是 3 （红、绿、蓝） ;</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 其次，<code>mxnet</code>中提到的，一般 <code>channels</code> 的含义是，<strong>每个卷积层中卷积核的数量</strong>。 </p><h3 id="直观理解channel"><a href="#直观理解channel" class="headerlink" title="直观理解channel"></a>直观理解channel</h3><blockquote><p>图片使用Ng老师的深度学习课程</p></blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp; 如下图，假设现有一个为 6x6x3 的图片样本，使用 3×3×3 的卷积核（filter）进行卷积操作。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 此时输入图片的 <code>channels</code>为 3 ，而卷积核中的 <code>in_channels</code> 与 需要进行卷积操作的数据的<code>channels</code> 一致（这里就是图片样本，为3）。</p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/channel1.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp; 接下来，进行卷积操作，卷积核中的（3<em>3</em>3 = 27）27个数字与分别与样本对应相乘后，再进行求和，得到第一个结果。依次进行，最终得到 4×4x1 的上图所示的结果。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; <strong>注意</strong>：在这里有一个让人迷惑的部分，<code>input_image</code>的通道数为3，所以卷积核中的 <code>in_channels</code>的数值也应该为3，这是因为卷积核和图像的相应通道要进行卷积操作，最后还要在加到一块，形成上图所示的4x4x1的输出。</p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/channel2.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp; 在实际应用过程中，会使用多个卷积核，这里如果在添加一个3x3x3的卷积核，就会得到4x4x2的结果。</p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/channel3.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp; 总结：可以把一个卷积核理解为一个特征，一个物体肯定会有多个特征，所以要使用多个卷积核。</p><ol><li>最初输入的图片样本的<code>channel</code>取决于图片的类型,例如上面的<code>RGB</code>图片的<code>channel</code>=3</li><li>卷积操作完成后输出的<code>out_channels</code>，取决于卷积核的数量。此时的<code>out_channels</code>为下一层<code>conv</code>的卷积核的<code>in_channels</code>。</li><li>如上面，<code>6x6x3</code>的图片需要经过卷积核为<strong>[3x3x3(<code>channel</code>)]</strong>的卷积网络,得到4x4x2的输出，其<code>out_channel</code>=2;此时下一层的卷积核的<code>in_channel</code> = <code>out_channel</code>=2。</li></ol><h3 id="关于tensorflow的get-shape-as-list-函数"><a href="#关于tensorflow的get-shape-as-list-函数" class="headerlink" title="关于tensorflow的get_shape().as_list()函数"></a>关于<code>tensorflow</code>的<code>get_shape().as_list()</code>函数</h3><ul><li><p><code>ndarray</code>是多维数组类型，可以使用<code>x.shape</code>来获得<code>x</code>的维数信息</p></li><li><p><code>Tensor</code>类型，可以使用<code>x.get_shape()</code>来获得维数信息,属于<code>TensorShape</code>的元组类型</p></li><li><p><code>x.get_shape().as_list()</code>是将<code>TensorShape</code>类型转换为<code>list</code>类型</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true"># 这里使用v1版本</span><span class="token keyword">import</span> tensorflow<span class="token punctuation">.</span>compat<span class="token punctuation">.</span>v1 <span class="token keyword">as</span> tf<span class="token keyword">import</span> cv2<span class="token comment" spellcheck="true"># 关闭v2版本</span>tf<span class="token punctuation">.</span>disable_v2_behavior<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""测试x.get_shape().as_list()[-1]"""</span>x <span class="token operator">=</span> tf<span class="token punctuation">.</span>constant<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'x:'</span><span class="token punctuation">,</span>type<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>get_shape<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>y <span class="token operator">=</span> x<span class="token punctuation">.</span>get_shape<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>as_list<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token triple-quoted-string string">""" Result:x: &lt;class 'tensorflow.python.framework.ops.Tensor'>(2, 5)&lt;class 'list'> 5&lt;class 'numpy.ndarray'> (2, 2)"""</span></code></pre></li></ul><h3 id="关于CNN网络中的权值weights和偏置bias的问题"><a href="#关于CNN网络中的权值weights和偏置bias的问题" class="headerlink" title="关于CNN网络中的权值weights和偏置bias的问题"></a>关于CNN网络中的权值<code>weights</code>和偏置<code>bias</code>的问题</h3><p>卷积层计算输出层的大小：</p><ol><li><code>Input_Image</code>：<code>WxHxD</code></li><li><code>kernel</code>：<ul><li><code>filter_num</code>:<code>K</code></li><li><code>filter_size</code>:<code>F</code></li><li><code>stride</code>:<code>S</code></li></ul></li><li>通过参数共享，每一个<code>filter</code>共携带<code>FxFxD</code>个权值，对于整个卷积层，共携带<code>FxFxDxK</code>个权值，此外还有<code>K</code>个偏置（<code>bias</code>）</li></ol><p><strong>CNN调整的是所有卷积核中的数值和偏置</strong></p><h3 id="关于tf-truncated-normal-shape-mean-0-0-stddev-1-0"><a href="#关于tf-truncated-normal-shape-mean-0-0-stddev-1-0" class="headerlink" title="关于tf.truncated_normal(shape, mean=0.0, stddev=1.0)"></a>关于<code>tf.truncated_normal(shape, mean=0.0, stddev=1.0)</code></h3><p>&nbsp;&nbsp;&nbsp;&nbsp; 作用：从阶段的正态分布中输出随机值，生成的值服从具有指定均值和标准差的正态分布，如果生成的值大于平均值2个标准偏差的值将被丢弃重新选择。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 在正态分布的曲线中，横轴区间<code>（μ-σ，μ+σ）</code>内的面积为<code>68.268949%</code>。 </p><p>&nbsp;&nbsp;&nbsp;&nbsp; 横轴区间<code>（μ-2σ，μ+2σ）</code>内的面积为<code>95.449974%</code>。 </p><p>&nbsp;&nbsp;&nbsp;&nbsp; 横轴区间<code>（μ-3σ，μ+3σ）</code>内的面积为<code>99.730020%</code>。 </p><p>&nbsp;&nbsp;&nbsp;&nbsp; X落在<code>（μ-3σ，μ+3σ）</code>以外的概率小于千分之三，在实际问题中常认为相应的事件是不会发生的。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 基本上可以把区间<code>（μ-3σ，μ+3σ）</code>看作是随机变量X实际可能的取值区间，这称之为正态分布的<code>“3σ”</code>原则。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 在<code>tf.truncated_normal</code>中如果x的取值在区间<code>（μ-2σ，μ+2σ）</code>之外则重新进行选择。这样保证了生成的值都在均值附近 。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'使用的计算图模式'</span><span class="token punctuation">)</span>matrix4 <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>truncated_normal<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>mean<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">,</span>stddev<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>init <span class="token operator">=</span> tf<span class="token punctuation">.</span>global_variables_initializer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">with</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span>    sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>init<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>matrix4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""[[[-0.07482259  0.01712328]  [ 0.01182383 -0.09702285]] [[ 0.09984504  0.01924772]  [-0.13555853  0.0730053 ]]]"""</span></code></pre><h3 id="tf-pad-的理解"><a href="#tf-pad-的理解" class="headerlink" title="tf.pad()的理解"></a><code>tf.pad()</code>的理解</h3><ul><li><code>paddings</code> 代表每一维度的最开始和最后面要添加多少行/列</li><li><strong>传入的列数一定要和<code>Tensor</code>的维度一致</strong></li><li>默认填充<code>0</code></li></ul><pre class=" language-python"><code class="language-python">t<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">with</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>pad<span class="token punctuation">(</span>t<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"CONSTANT"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""[[0 0 0 0 0 0 0] [0 0 2 3 4 0 0] [0 0 5 6 7 0 0] [0 0 0 0 0 0 0]]"""</span></code></pre><p>多维数组中的：</p><ul><li>第一个<code>[1,1]</code>表示行<code>paddings</code>，前面添加1行，后面添加1行</li><li>第二个<code>[2,2]</code>表示列<code>paddings</code>，左边添加2列，右边添加2列</li></ul><h3 id="tf-conv2d-input-filter-strides-padding-use-cudnn-on-gpu-No"><a href="#tf-conv2d-input-filter-strides-padding-use-cudnn-on-gpu-No" class="headerlink" title="tf.conv2d(input, filter, strides,padding,use_cudnn_on_gpu=No)"></a><code>tf.conv2d(input, filter, strides,padding,use_cudnn_on_gpu=No)</code></h3><ul><li><p><code>param input</code>: 指需要做卷积的输入图像，它要求是一个<code>Tensor</code>，具有<code>[batch, in_height, in_width, in_channels]</code>这样的<code>shape</code>，具体含义是<code>[训练时一个batch的图片数量, 图片高度, 图片宽度, 图像通道数]</code>，注意这是一个4维的<code>Tensor</code>，要求类型为<code>float32</code>和<code>float64</code>其中之一</p></li><li><p><code>filter</code>:相当于<code>CNN</code>中的卷积核，它要求是一个<code>ensor</code>，具有<code>[filter_height, filter_width, in_channels, out_channels]</code>这样的<code>shape</code>，具体含义是<code>[卷积核的高度，卷积核的宽度，图像通道数，卷积核个数]</code>，要求类型与参数<code>input</code>相同，<strong>有一个地方需要注意，第三维<code>in_channels</code>，就是参数<code>input</code>的第四维</strong></p><p>这个问题详细可见<a href="#直观理解channel">直观理解channel</a></p></li><li><p><code>strides</code>:卷积时在图像每一维的步长，这是一个一维的向量，长度4 </p></li><li><p><code>padding</code>:<code>string</code>类型的量，只能是<code>"SAME"</code>,<code>"VALID"</code>其中之一，这个值决定了不同的卷积方式</p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/padding.jpg" alt=""></p><ul><li><code>VALID</code>是采用丢弃的方式,比如上述的<code>input_width=13</code>,只允许滑动2次,多余的元素全部丢掉 </li><li><code>SAME</code>的方式,采用的是补全的方式,对于上述的情况,允许滑动3次,但是需要补3个元素,左奇右偶,在左边补一个0,右边补2个0 </li></ul></li><li><p><code>use_cudnn_on_gpu</code>:<code>use_cudnn_on_gpu:bool</code>类型，是否使用<code>cudnn</code>加速，默认为<code>true</code>,结果返回一个<code>Tensor</code>，这个输出，就是我们常说的<code>feature map</code></p></li><li><p><font style="color:red">题外话：markdown的锚点设置跳转:</font></p><pre><code>[直观理解channel](#直观理解channel)</code></pre></li></ul><h3 id="关于激活函数reluand-leak-relu"><a href="#关于激活函数reluand-leak-relu" class="headerlink" title="关于激活函数reluand leak_relu"></a>关于激活函数<code>relu</code>and <code>leak_relu</code></h3><ul><li><p><code>ReLU</code>是将所有的负值都设为零，正区间为<code>y=x</code></p></li><li><p><code>leak_relu</code>:是给所有的赋值赋予一个非零斜率</p><p>​    <img src="https://gitee.com/Home-wang/cloudimg/raw/master/leak_relu.png" alt=""></p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/relu.png" alt=""></p></li></ul><h3 id="CNN中卷积层的计算细节"><a href="#CNN中卷积层的计算细节" class="headerlink" title="CNN中卷积层的计算细节"></a>CNN中卷积层的计算细节</h3><blockquote><p>搞清楚卷积层中输入和输出之间的尺寸关系</p></blockquote><h4 id="卷积层尺寸的计算原理"><a href="#卷积层尺寸的计算原理" class="headerlink" title="卷积层尺寸的计算原理"></a>卷积层尺寸的计算原理</h4><ul><li><p>输入矩阵格式：4维度 <code>[batch_size, width, height, in_channel]</code></p></li><li><p>输出矩阵格式：4维度<code>[batch_size, width, height, out_channel]</code></p><ul><li>其中<code>width and height</code>的尺寸发生变化</li><li><code>out_channel</code>的大小为卷积核的大小</li></ul></li><li><p>权重矩阵格式： 4维度 <code>[width, height, in_channel, out_channel]</code></p><ul><li>这个是卷积层内部计算使用</li><li><code>width height</code>: 卷积核宽度和高度</li><li><code>in_channel</code>: 这个参数和输入矩阵的<code>in_channel</code>(第四维)</li><li><code>out_channel</code>:这个参数为卷积核的个数</li></ul></li><li><p>上述三者之间的关系：</p><ul><li>卷积核的输入通道数（<code>in Channel</code>）由输入矩阵的输入通道数（<code>In Channel</code>）所决定。（红色标注） </li><li>输出矩阵的通道数（<code>Out Channel</code>）由卷积核的个数(<code>kernel-&gt;Out Channel</code>)所决定。（绿色标注） </li><li>输出矩阵的高度和宽度（<code>height, width</code>）这两个维度的尺寸由输入矩阵、卷积核、扫描方式所共同决定。计算公式如下。（蓝色标注）</li></ul><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/relation.png" alt=""></p><blockquote><p>严格来说还有一个bias ,这里省略掉了,具体例子如下图所示</p></blockquote></li></ul><h4 id="卷积计算举例"><a href="#卷积计算举例" class="headerlink" title="卷积计算举例"></a>卷积计算举例</h4><blockquote><p>以 AlexNet 模型的第一个卷积层为例，</p><p>输入图片的尺寸统一为 227 x 227 x 3 （高度 x 宽度 x 颜色通道数），</p><p>本层一共具有96个卷积核， </p><p>每个卷积核的尺寸都是 11 x 11 x 3。 </p><p>已知 stride = 4， padding = 0， </p><p>假设 batch_size = 256，</p><p>则输出矩阵的高度/宽度为 (227 - 11) / 4 + 1 = 55 </p></blockquote><p><strong>注意一点:</strong> kernel的<code>out channel</code>需要被理解为<code>kernel numbers</code></p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/eg1.png" alt=""></p><h5 id="1x1卷积举例"><a href="#1x1卷积举例" class="headerlink" title="1x1卷积举例"></a>1x1卷积举例</h5><blockquote><p>后期 GoogLeNet、ResNet 等经典模型中普遍使用一个像素大小的卷积核作为降低参数复杂度的手段。 </p><p>从下面的运算可以看到，其实 1 x 1 卷积没有什么神秘的，其作用就是将输入矩阵的通道数量缩减后输出（512 降为 32），</p><p>并保持它在宽度和高度维度上的尺寸（227 x 227）。 </p></blockquote><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/eg2.png" alt=""></p><h5 id="全连接层计算举例"><a href="#全连接层计算举例" class="headerlink" title="全连接层计算举例"></a>全连接层计算举例</h5><blockquote><p>实际上，全连接层也可以被视为是一种极端情况的卷积层，</p><p>其卷积核尺寸就是输入矩阵尺寸，因此输出矩阵的高度和宽度尺寸都是1。 </p></blockquote><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/eg3.png" alt=""></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li>总结下来，其实只需要认识到:<ul><li>虽然输入的每一张图像本身具有三个维度，</li><li>但是对于卷积核来讲依然只是一个一维向量。</li><li>卷积核做的，其实就是与感受野范围内的像素点进行点积（而不是矩阵乘法）。</li><li>卷积核个数是查论文查的,如果自己玩,卷积核个数可以随便设置 </li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> tensorflow </tag>
            
            <tag> Yolov1 </tag>
            
            <tag> 目标识别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录使用Hexo打造个人博客系统--持续记录中</title>
      <link href="/2020/03/26/20200326-112506/"/>
      <url>/2020/03/26/20200326-112506/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&nbsp;&nbsp;&nbsp;&nbsp; 2020年3月26日，开始搭建了第一个自己的独立博客，并且打算坚持持续使用并且进行不断的优化。 </p><p>&nbsp;&nbsp;&nbsp;&nbsp;  关于我：我是一个正在不断学习计算机相关的菜鸟小硕。2020年由于新冠肺炎疫情的影响，以在家3个月有余，每天在家坚持学习（有时效率贼低）。我现在最大的愿望就是毕业的时候能卖个好价格。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 很多人应该也想过搭建一个自己的博客，网上也有一堆详细教程。<strong>我在此打算将这篇文章集百家之长，将自己能够了解到的相关hexo搭建博客的知识整合在这一篇文章中。</strong>这篇文章将不断的进行更新。</p><h2 id="关于搭建博客的工具-Hexo"><a href="#关于搭建博客的工具-Hexo" class="headerlink" title="关于搭建博客的工具-Hexo"></a>关于搭建博客的工具-Hexo</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;  首先要了解一下我们搭建博客要用到的框架。<code>Hexo</code>是高效的静态站点生成框架，它基于<code>Node.js</code>。通过<code>Hexo</code>，你可以直接使用<code>Markdown</code>语法来书写博客。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;   当然你可能对上面的这些概念比较陌生，不用过分担心，其实就是使用工具搭建博客系统罢了。请记住大部分都是满满的套路，直接按部就班就好。 你无需关心网页源代码的具体细节，你只需要用心写好你的博客内容就行。</p><h2 id="搭建博客的步骤"><a href="#搭建博客的步骤" class="headerlink" title="搭建博客的步骤"></a>搭建博客的步骤</h2><h3 id="1-安装Node-js"><a href="#1-安装Node-js" class="headerlink" title="1.安装Node.js"></a>1.安装Node.js</h3><p>首先下载稳定版<a href="https://nodejs.org/dist/v9.11.1/node-v9.11.1-x64.msi" target="_blank" rel="noopener">Node.js</a>，我这里给的是64位的。</p><p>安装选项全部默认，一路点击<code>Next</code>。</p><p>最后安装好之后，按<code>Win+R</code>打开命令提示符，输入<code>node -v</code>和<code>npm -v</code>，如果出现版本号，那么就安装成功了。</p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200401185856.png" alt=""></p><h3 id="2-添加国内镜像源"><a href="#2-添加国内镜像源" class="headerlink" title="2. 添加国内镜像源"></a>2. 添加国内镜像源</h3><p>如果没有梯子的话，可以使用阿里的国内镜像进行加速。 </p><pre class=" language-js"><code class="language-js">npm config <span class="token keyword">set</span> registry https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>registry<span class="token punctuation">.</span>npm<span class="token punctuation">.</span>taobao<span class="token punctuation">.</span>org</code></pre><h3 id="3-安装Git"><a href="#3-安装Git" class="headerlink" title="3. 安装Git"></a>3. 安装Git</h3><p>为了把本地的网页文件上传到github上面去，我们需要用到分布式版本控制工具————<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">Git</a>。</p><p>安装选项还是全部默认，只不过最后一步添加路径时选择<code>Use Git from the Windows Command Prompt</code>，这样我们就可以直接在命令提示符里打开git了。</p><p>安装完成后在命令提示符中输入<code>git --version</code>验证是否安装成功</p><h3 id="4-注册Github账号-amp-新建仓库repository"><a href="#4-注册Github账号-amp-新建仓库repository" class="headerlink" title="4.注册Github账号&amp;新建仓库repository"></a>4.注册Github账号&amp;新建仓库repository</h3><ol><li>注册一个<code>Github</code>账号。</li><li>新建项目</li><li>项目名称以<code>你的GitHub账号名字.github.io</code>!! 注意一定要这样写！！</li></ol><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93.png" alt=""></p><h3 id="5-安装Hexo"><a href="#5-安装Hexo" class="headerlink" title="5.安装Hexo"></a>5.安装Hexo</h3><ol><li><p>在合适的地方新建一个文件夹，用来存放自己的博客文件，比如我的博客文件都存放在<code>E:\MyBlog\</code>目录下。</p></li><li><p>在该目录下右键点击<code>Git Bash Here</code>，打开git的控制台窗口，以后我们所有的操作都在<code>git</code>控制台进行，就不要用<code>Windows</code>自带的控制台了。</p></li><li><p>定位到该目录下，输入<code>npm i hexo-cli -g</code>安装Hexo。会有几个报错，无视它就行。</p></li><li><p>安装完后输入<code>hexo -v</code>验证是否安装成功。</p></li><li><p>然后就要初始化我们的网站，输入<code>hexo init</code>初始化文件夹，接着输入<code>npm install</code>安装必备的组件。</p></li><li><p>这样本地的网站配置也弄好啦，输入<code>hexo g</code>（g 为 generator的缩写）生成静态网页，然后输入<code>hexo s</code>（s 为services的缩写）打开本地服务器，然后浏览器打开<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a>，就可以看到我们的博客啦，效果如下:</p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/%E5%8E%9F%E5%A7%8B%E6%95%88%E6%9E%9C.jpg" alt=""></p><ol start="7"><li>使用<code>ctrl+c</code>可以关闭本地服务器</li></ol></li></ol><h3 id="6-连接Github和本地"><a href="#6-连接Github和本地" class="headerlink" title="6. 连接Github和本地"></a>6. 连接Github和本地</h3><ol><li>首先右键打开git bash，然后输入下面命令： </li></ol><pre><code>git config --global user.name "YongKunWang"git config --global user.email "Wang_YongKun@yeah.net"</code></pre><p>用户名和邮箱根据你注册github的信息自行修改。</p><ol start="2"><li>然后生成密钥SSH key：</li></ol><pre><code>ssh-keygen -t rsa -C "Wang_YongKun@yeah.net"</code></pre><ol start="3"><li>打开<a href="http://github.com/" target="_blank" rel="noopener">github</a>，在头像下面点击<code>settings</code>，再点击<code>SSH and GPG keys</code>，新建一个SSH，名字随便。 </li><li>git bash中输入 :</li></ol><pre><code>cat ~/.ssh/id_rsa.pub</code></pre><ol start="5"><li><p>将输出的内容复制到框中，点击确定保存。 </p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/ssh%E8%AE%BE%E7%BD%AE.png" alt=""></p></li><li><p>输入<code>ssh -T git@github.com</code>，如果如下图所示，出现你的用户名，那就成功了。</p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200403114408.png" alt=""></p></li><li><p>打开博客根目录下的<code>_config.yml</code>文件，这是博客的配置文件，在这里你可以修改与博客相关的各种信息。 </p><p>修改最后一行的配置： </p><pre><code>deploy:  type: git  repository: https://github.com/godweiyang/YongKunWang.github.io  branch: master</code></pre><p><code>repository</code>修改为你自己的<code>github</code>项目地址。 </p></li></ol><p><strong>经过以上7个步骤，必要的环境配置条件基本已经完成了！！</strong></p><h3 id="7-测试本地写文章、发布文章"><a href="#7-测试本地写文章、发布文章" class="headerlink" title="7.测试本地写文章、发布文章"></a>7.测试本地写文章、发布文章</h3><p>首先在博客根目录下右键打开git bash，安装一个扩展<code>npm i hexo-deployer-git</code>。</p><p>然后输入<code>hexo new post "article title"</code>，新建一篇文章。</p><p>然后打开<code>E:\MyBlog\source\_posts</code>的目录，可以发现下面多了一个<code>.md</code>文件，可以新建一个<code>images</code>文件用来存放你的图片等数据，另一个就是你的文章文件啦。</p><p>编写完<code>markdown</code>文件后，根目录下输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>可以本地预览效果，最后输入<code>hexo d</code>上传到github上。这时打开你的github.io主页就能看到发布的文章啦。</p><p><strong>我们经常用的关于hexo的4个指令：</strong></p><pre><code>//不需要添加后缀，hexo会自动生成title.md文件hexo new post "title" // g:generatorhexo g// s: servicehexo s// d: deployhexo d</code></pre><h3 id="8-绑定域名"><a href="#8-绑定域名" class="headerlink" title="8. 绑定域名"></a>8. 绑定域名</h3><p>&nbsp;&nbsp;&nbsp;&nbsp; 现在默认的域名还是<code>xxx.github.io</code>，可以直接通过<code>xxx.github.io</code>访问自己搭建的博客系统。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 如果想要绑定自己的域名，可以通过网络购买一个域名，然后进行配置。本人在阿里云购买的域名，如下图所示，并且添加两条解析记录：</p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90.png" alt=""></p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%901.png" alt=""></p><p>&nbsp;&nbsp;&nbsp;&nbsp; 然后打开自己新建的仓库，点击<code>settings</code>，拉到下面<code>Custom domain</code>处，填上你自己的域名，保存： </p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/%E5%9F%9F%E5%90%8D%E7%BB%91%E5%AE%9A.png" alt=""></p><p>此时在你的<code>github</code>仓库的根目录下会生成一个名字为<code>CNAME</code>的文件，如果没有的话（其实如果本地没有这个文件的话，<code>hexo d</code>会将全部文件上传，此时github仓库会丢失这个文件，所以<code>CNAME</code>这个文件本地一定要有的 ）打开你本地博客<code>/source</code>目录，我的是<code>E:\Myblog\source</code>，新建<code>CNAME</code>文件，注意没有后缀。然后在里面写上你的域名<code>homewyk.com</code>，保存。最后运行<code>hexo g</code>、<code>hexo d</code>上传到github。 </p><h3 id="9-主题推荐"><a href="#9-主题推荐" class="headerlink" title="9.主题推荐"></a>9.主题推荐</h3><p>主题的原地址在这里：<a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">hexo-theme-matery</a>，它的文档写得也非常的详细，还有中英文两个版本，作者回复也很及时。效果图如下，可以看出非常合我的口味： </p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/theme.png" alt=""></p><h2 id="个性化配置（matery-theme）"><a href="#个性化配置（matery-theme）" class="headerlink" title="个性化配置（matery_theme）"></a>个性化配置（matery_theme）</h2><h3 id="博客的目录结构"><a href="#博客的目录结构" class="headerlink" title="博客的目录结构"></a>博客的目录结构</h3><pre><code>- node_modules- public- scaffolds- source    - _data    - _posts    - about    - archives    - categories    - friends    - tags- themes</code></pre><ul><li><code>node_modules</code>是<code>node.js</code>各种库的目录</li><li><code>public</code>是生成的网页文件目录</li><li><code>scaffolds</code>里面就三个文件，存储着新文章和新页面的初始设置</li><li><code>source</code>是我们最常用到的一个目录，里面存放着文章、各类页面、图像等文件</li><li><code>themes</code>存放着主题文件，一般也用不到</li><li>我们平时写文章只需要关注<code>source/_posts</code>这个文件夹就行了</li></ul><h4 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h4><p>在文件根目录下的<code>_config.yml</code>，就是整个<code>hexo</code>框架的配置文件了。可以在里面修改大部分的配置。详细可参考官方的<a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">配置描述</a> </p><h5 id="网站相关信息"><a href="#网站相关信息" class="headerlink" title="网站相关信息"></a>网站相关信息</h5><p>参数描述：</p><ul><li><code>title</code>网站标题</li><li><code>subtitle</code>网站副标题</li><li><code>description</code>网站描述</li><li><code>author</code>您的名字</li><li><code>language</code>网站使用的语言</li><li><code>timezone</code>网站时区。<code>Hexo</code> 默认使用您电脑的时区。时区列表。比如说：<code>America/New_York, Japan</code>, 和 <code>UTC</code> 。</li></ul><p>其中：</p><ul><li><code>description</code>主要用于<code>SEO</code>，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。</li><li><code>author</code>参数用于主题显示文章的作者。</li></ul><h5 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h5><p>参数描述：</p><ul><li><code>url</code>网址</li><li><code>root</code>网站根目录</li><li><code>permalink</code>文章的<a href="https://hexo.io/zh-cn/docs/permalinks" target="_blank" rel="noopener">永久链接</a>格式</li><li><code>permalink_defaults</code>永久链接中各部分的默认值</li></ul><p>在这里，你需要把<code>url</code>改成你的<strong>网站域名</strong>。</p><p><code>permalink</code>，也就是你生成某个文章时的那个链接格式。</p><p>比如我新建一个文章叫<code>temp.md</code>，那么这个时候他自动生成的地址就是<code>http://yoursite.com/2018/09/05/temp</code>。</p><p>再往下翻，中间这些都默认就好了。 </p><h4 id="theme"><a href="#theme" class="headerlink" title="theme"></a><code>theme</code></h4><p> <code>theme</code>就是选择什么主题，也就是在<code>themes</code>这个文件夹下，在官网上有很多个主题，默认给你安装的是<code>lanscape</code>这个主题。当你需要更换主题时，在官网上下载，把主题的文件放在<code>themes</code>文件夹下，再修改这个主题参数就可以了。 </p><h4 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h4><h5 id="post"><a href="#post" class="headerlink" title="post"></a><code>post</code></h5><p>当你每一次使用代码 </p><pre class=" language-bash"><code class="language-bash">hexo new XXX</code></pre><p>它其实默认使用的是<code>post</code>这个布局，也就是在<code>source</code>文件夹下的<code>_post</code>里面。</p><p><code>Hexo</code>有三种默认布局：<code>post</code>、<code>page</code>和<code>draft</code>，它们分别对应不同的路径，而您自定义的其他布局和<code>post</code>相同，都将储存到<code>source/_posts</code>文件夹。</p><p>而new这个命令其实是：</p><pre class=" language-bash"><code class="language-bash">hexo new <span class="token punctuation">[</span>layout<span class="token punctuation">]</span> <span class="token operator">&lt;</span>title<span class="token operator">></span></code></pre><p>只不过这个<code>layout</code>默认是<code>post</code>罢了。 </p><h5 id="page"><a href="#page" class="headerlink" title="page"></a><code>page</code></h5><p>如果你想另起一页，那么可以使用 :</p><pre class=" language-bash"><code class="language-bash">hexo new page newpage</code></pre><p>系统会自动给你在<code>source</code>文件夹下创建一个<code>newpage</code>文件夹，以及<code>newpage</code>文件夹中的<code>index.md</code>，这样你访问的<code>newpage</code>对应的链接就是<a href="http://xxx.xxx/newpage" target="_blank" rel="noopener">http://xxx.xxx/newpage</a> </p><h5 id="draft"><a href="#draft" class="headerlink" title="draft"></a><code>draft</code></h5><p><code>draft</code>是草稿的意思，也就是你如果想写文章，又不希望被看到，那么可以 :</p><pre class=" language-bash"><code class="language-bash">hexo server --draft</code></pre><p>在本地端口中开启服务预览。</p><p>如果你的草稿文件写完了，想要发表到<code>post</code>中:</p><pre class=" language-bash"><code class="language-bash">hexo publish draft newdraft</code></pre><p>就会自动把<code>newdraft.md</code>发送到<code>post</code>中 。</p><h3 id="更改导航栏颜色"><a href="#更改导航栏颜色" class="headerlink" title="更改导航栏颜色"></a>更改导航栏颜色</h3><p>在主题文件的theme/matery /source/css/matery.css 文件中，搜索 .bg-color 来修改背景颜色：  </p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.bg-color</span> </span><span class="token punctuation">{</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right, <span class="token hexcode">#103945</span> <span class="token number">0%</span>, <span class="token hexcode">#c1baa7</span> <span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0.6</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>效果：</p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200401204906.png" alt=""></p><h3 id="取消蒙版特效"><a href="#取消蒙版特效" class="headerlink" title="取消蒙版特效"></a>取消蒙版特效</h3><p>在主题文件的 theme/matery /source/css/matery.css 文件中，搜索 .bg-cover:after 注释它： </p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.bg-cover</span><span class="token pseudo-element">:after</span> </span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*-webkit-animation: rainbow 60s infinite;*/</span>    <span class="token comment" spellcheck="true">/*animation: rainbow 60s infinite;*/</span><span class="token punctuation">}</span></code></pre><h3 id="设置首页显示部分"><a href="#设置首页显示部分" class="headerlink" title="设置首页显示部分"></a>设置首页显示部分</h3><pre><code># index page dream text,# 配置首页显示"梦想"的语句.dream:  enable: true  showTitle: true  title: 吉檀迦利  text: &lt;p&gt;离你最近的地方，路途最远，&lt;/p&gt;&lt;br /&gt;&lt;p&gt;最简单的音调，需要最艰苦的练习。&lt;/p&gt;&lt;br /&gt;&lt;p&gt;旅客要在每个生人门口敲叩，才能敲到自己的家门,&lt;/p&gt;&lt;br /&gt;&lt;p&gt;人要在外面到处漂流，最后才能走到最深的内殿。&lt;/p&gt;&lt;br /&gt;&lt;p&gt;我的眼睛向空阔处四望，最后才合上眼说：“你原来住在这里！”。&lt;/p&gt;&lt;br /&gt;&lt;p align="right" style="margin-right:100px"&gt;——泰戈尔(Rabindranath Thakur)&lt;/p&gt;</code></pre><p>效果显示：</p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200401213211.png" alt=""></p><h3 id="设置打字效果副标题"><a href="#设置打字效果副标题" class="headerlink" title="设置打字效果副标题"></a>设置打字效果副标题</h3><pre><code># 打字效果副标题.# 如果有符号 ‘ ，请在 ’ 前面加上 \subtitle:  enable: true  loop: true # 是否循环  showCursor: true # 是否显示光标  startDelay: 300 # 开始延迟  typeSpeed: 100 # 打字速度  backSpeed: 50 # 删除速度  sub1: 天空没有留下鸟的痕迹，但我已飞过  sub2: I leave no trace of wings in the air,but I am glad I have had my flight.</code></pre><p>效果展示：</p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200401213337.png" alt=""></p><h3 id="添加404页面"><a href="#添加404页面" class="headerlink" title="添加404页面"></a>添加404页面</h3><p>原来的主题没有<code>404</code>页面，我们加一个。首先在<code>/source/</code>目录下新建一个<code>404.md</code>，非主题目录下的<code>source</code>内容如下： </p><pre class=" language-json"><code class="language-json">title<span class="token operator">:</span> <span class="token number">404</span>date<span class="token operator">:</span> <span class="token number">2019</span>-<span class="token number">08</span>-<span class="token number">5</span> <span class="token number">16</span><span class="token operator">:</span><span class="token number">41</span><span class="token operator">:</span><span class="token number">10</span>type<span class="token operator">:</span> <span class="token string">"404"</span>layout<span class="token operator">:</span> <span class="token string">"404"</span>description<span class="token operator">:</span> <span class="token string">"Oops～，我崩溃了！找不到你想要的页面 :("</span></code></pre><p>然后在<code>/themes/matery/layout/</code>目录下新建一个<code>404.ejs</code>文件，内容如下： </p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token comment" spellcheck="true">/* don't remove. */</span>    <span class="token selector"><span class="token class">.about-cover</span> </span><span class="token punctuation">{</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">75</span>vh<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bg-cover pd-header about-cover<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col s10 offset-s1 m8 offset-m2 l8 offset-l2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>brand<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title center-align<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        404                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>description center-align<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        &lt;%= page.description %>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// 每天切换 banner 图.  Switch banner image every day.</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.bg-cover'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-image'</span><span class="token punctuation">,</span> <span class="token string">'url(/medias/banner/'</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.jpg)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><h3 id="1-hexo的网页的TOC的目录显示"><a href="#1-hexo的网页的TOC的目录显示" class="headerlink" title="1. hexo的网页的TOC的目录显示"></a>1. hexo的网页的TOC的目录显示</h3><p>是从二级标题开始能够正常实现的，<code>##</code></p><p>一级标题不能在<code>toc</code>目录中正常显示<code>#</code></p><h3 id="2-博文中添加image"><a href="#2-博文中添加image" class="headerlink" title="2. 博文中添加image"></a>2. 博文中添加<code>image</code></h3><p><strong>好方法：</strong></p><p>通过图床的方式来做</p><p>详情请看<a href="https://homewyk.com/2020/04/01/20200401-122211/">写作四剑客</a></p><p>结束上述配置以后，就可以实现markdowm的img图片的插入了，还能够预览，比下面的方法好多了。</p><hr><p>不好的方法：</p><p>采用相对路径的方法：</p><ol><li><p>配置文件：<code>_config.yml</code></p><pre><code>post_asset_folder: true</code></pre></li><li><p>将<code>_config.yml</code>文件中的配置项<code>post_asset_folder</code>设为<code>true</code>后，执行命令<code>$ hexo new post_name</code>，在<code>source/_posts</code>中会生成文章<code>post_name.md</code>和同名文件夹<code>post_name</code>。将图片资源放在<code>post_name</code>中，文章就可以使用相对路径引用图片资源了。 </p></li><li><p>引用的时候还是和之前的markdown语法是不一样的:</p><pre><code>![](image.jpg)</code></pre></li><li><p>当<code>hexo g</code>的时候，会将.md文件和图片文件一块发布到以时间命名的文件夹中。</p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/%E5%8F%91%E5%B8%83%E6%95%88%E6%9E%9C.png" alt=""></p></li></ol><h3 id="3-添加首页和推荐页部分的Img设置"><a href="#3-添加首页和推荐页部分的Img设置" class="headerlink" title="3. 添加首页和推荐页部分的Img设置"></a>3. 添加首页和推荐页部分的<code>Img</code>设置</h3><p>需要在文章头部添加：</p><pre><code>img： url链接coverImg: url链接</code></pre><p>或者直接在scaffolds文件夹中的post中添加全局：</p><pre><code>title: {{ title }}id:img:coverImg: date: {{ date }}top: falsecover: falsepassword:toc: truemathjax: truesummary:tags:categories:</code></pre><p>截图：</p><p>本篇博文使用的文件头部：</p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200401182625.png" alt=""></p><p>公共头部信息：</p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/20200401182801.png" alt=""></p><p><strong>注意：图床的Image的大小要在1MB以内，要不然会出现加载失败的情况</strong></p><h3 id="4-Hexo-添加自定义静态HTML的解决方法"><a href="#4-Hexo-添加自定义静态HTML的解决方法" class="headerlink" title="4. Hexo 添加自定义静态HTML的解决方法"></a>4. Hexo 添加自定义静态HTML的解决方法</h3><p>使用<code>hexo</code>创建的静态博客，所有博文内容都是有<code>markdown</code>生成，且页面样式也是由下载的主题自动化生成的，那么想要在独立页面中大展身手的前端小伙伴，如何将写好的静态页面引入到<code>hexo</code>博客中呢？<code>html</code>，<code>css</code>，<code>js</code>等文件在<code>hexo</code>项目里如何避免被自动渲染呢？ </p><pre><code>hexo├─ public|  └┈ demo|     ├─ new_file.html|     ├─ css|     └┈ js├─ source|  ├─ _posts|  ├─ demo|  |  ├─ new_file.html|  |  ├─ css|  |  └┈ js|  └┈ space├─ themes|  └┈ next|     └┈ source└┈ _config.yml</code></pre><p>&nbsp;&nbsp;&nbsp;&nbsp; 首先，在根目录下的<code>source</code>文件夹下，新建一个文件夹，用来存放静态页面文件。这里假设文件夹叫<code>demo</code>。 </p><p>&nbsp;&nbsp;&nbsp;&nbsp; 然后，在<code>demo</code>文件夹中放入所需的<code>html</code>文件。这里为<code>new_file.html</code>。 </p><p>&nbsp;&nbsp;&nbsp;&nbsp; <code>hexo -g</code>，<code>public</code>文件夹中就会有相应的<code>demo</code>文件夹和其包含的文件生成。 </p><p>&nbsp;&nbsp;&nbsp;&nbsp; 此时，再在某个<code>md</code>文件中添加一个链接，直接在浏览器中访问地址<code>"xxx/demo/new_file.html"</code>，即可链接到我们新建的<code>new_file</code>页面了。 </p><p>&nbsp;&nbsp;&nbsp;&nbsp; 这时你会发现，我们访问到的<code>new_file</code>页面和在本地打开的并不相同，原因就是，<code>hexo</code>的<code>source</code>文件夹下的所有文件都会自动编译。 </p><p>&nbsp;&nbsp;&nbsp;&nbsp; 这种形式我们也可能用到，就是新引入的页面作为一篇博文的内容展示。这样做的话，就和写一篇<code>md</code>文章相差无几。<br>&nbsp;&nbsp;&nbsp;&nbsp; 当然，使用<code>html</code>的好处就是可以随意修改<code>css</code>和<code>js</code>。这里就不建议使用外链的形式引入<code>css</code>、<code>js</code>，因为上面提到过，<code>source</code>文件下的文件都会被编译，从而导致<code>css</code>、<code>js</code>的编译错误。</p><p>那么，有没有方法可以避免文件被编译呢？</p><p>答案是肯定的。只要在文件开头加上 </p><pre><code>---layout: false---</code></pre><p>即可。只是这个方法只适用于<code>html</code>文件，而且每个文件都要加，还是有很大的局限性。除此之外，有个还笨办法，就是把要引用的文件放到<code>themes/(主题名)/source</code>文件夹下，这样也会避免被编译，但本人不建议使用。</p><p>那么没有更好地办法了？</p><hr><p>&nbsp;&nbsp;&nbsp;&nbsp; 打开hexo项目根目录下的配置文件<code>_config.yml</code>，找到<code>skip_render:</code>，在这里就可以配置需要跳过渲染的文件。 </p><p>&nbsp;&nbsp;&nbsp;&nbsp; 例如，我们把所有静态页面放到<code>source</code>文件夹下的<code>demo</code>文件夹中，只要配置 </p><pre><code>skip_render: demo/**</code></pre><p>&nbsp;&nbsp;&nbsp;&nbsp; 就可以使<code>demo</code>下的所有文件（包括子文件）避免被编译。这样的匹配规则在许多前端框架和自动化工具中都有用到，前端小伙伴应该都很熟悉。举几个例子： </p><pre><code>skip_render: demo/*             # 屏蔽demo文件夹下的文件，不包括子文件夹内的内容skip_render: demo/**            # 屏蔽demo文件夹下的所有文件，包括子文件夹内的内容skip_render: demo/index.html    # 屏蔽demo文件夹下的index.html，特指一个文件skip_render: demo/*.html        # 屏蔽demo文件夹下的所有html文件</code></pre><p>写多个筛选条件时，要这样： </p><pre><code>skip_render:    - space/**    - demo/*</code></pre><p>&nbsp;&nbsp;&nbsp;&nbsp; 配置文件写好后，重新生成代码，就可以通过链接访问未经编码的原生页面了。这里有个小问题，在<code>markdown</code>页面里的链接只能在本页面打开，如果想实现以新标签打开链接，可以直接在<code>markdown</code>写<code>&lt;a target="_blank" href="#"&gt;&lt;/a&gt;</code>，或者通过<code>js</code>控制。 </p><p><strong>注意：</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp; 在执行<code>hexo g</code>生成代码之前，建议先执行<code>hexo clean</code>将原有代码清空，以免造成混乱。 </p><p><strong>举例</strong></p><p><a target="_blank" href="../../../../staticHtml/test.html">test页面</a> </p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../../../../staticHtml/test.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!--    这是部署到github上的访问路径    staticHtml 就是上面的Demo--></span></code></pre><p>&nbsp;&nbsp;&nbsp;&nbsp; 通过这种方法其实可以有多重实践，在此文件下放很多可以从博客链接过来的东西。比如首页的视频可以直接链接到这个文件夹下。</p><h3 id="5-更换Hexo的网页图标-小图片"><a href="#5-更换Hexo的网页图标-小图片" class="headerlink" title="5.更换Hexo的网页图标/小图片"></a>5.更换Hexo的网页图标/小图片</h3><p>本文介绍的是主题theme配置文件中的修改方式，也就是说仅适用于被修改的主题。 </p><h4 id="制作favicon图标"><a href="#制作favicon图标" class="headerlink" title="制作favicon图标"></a>制作favicon图标</h4><ol><li>备好用作标签页/网页小图标favicon的图片</li><li>搜索<code>favicon 在线</code>，可以看到一些在线图片转favicon的工具<br>我用的是这个（link）： <a href="http://www.bitbug.net/" target="_blank" rel="noopener">bitbug</a></li><li>利用工具做成图标。<br>我做了16x16，与32x32的。</li></ol><h4 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h4><pre><code>favicon: /favicon.png</code></pre><p>直接在相应文件下进行替换</p><p><strong>注意</strong>：是以<code>sources</code>为根目录的</p><h4 id="如何确定favicon信息"><a href="#如何确定favicon信息" class="headerlink" title="如何确定favicon信息"></a>如何确定<code>favicon</code>信息</h4><p>查看网页图标的信息：</p><p><img src="https://gitee.com/Home-wang/cloudimg/raw/master/favicon.png" alt=""></p><p>###6. Hexo博客网址变得简洁，使用英文路径</p><h4 id="为什么要是用英文网址"><a href="#为什么要是用英文网址" class="headerlink" title="为什么要是用英文网址"></a>为什么要是用英文网址</h4><p>&nbsp;&nbsp;&nbsp;&nbsp; 一般来说，URL只能使用英文和数字和一些标点符号表示。这是因为网络标准<code>RFC 1738</code> 做了硬性规定。</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 虽然在<code>Hexo</code>中的全局配置文件中的网址的构成引用了<code>:title</code>(其实就是markdown的文件名称)可以显示中文的网址，但是复制粘贴到记事本会发现得到的是一大串百分号之类的“乱码”（其实这并不是乱码，而是中文被转码成十六进制编码的结果），看起来不怎么好看。</p><h4 id="解决方法-经使用不大好，使用法2"><a href="#解决方法-经使用不大好，使用法2" class="headerlink" title="解决方法(经使用不大好，使用法2)"></a>解决方法(经使用不大好，使用法2)</h4><p>我们可以在生成<code>markdown</code>文件名称的时候，使用全英文作为文件名称。</p><p>在博客根目录下的配置文件中(<code>_config.yml</code>)中进行修改:</p><pre><code>#permalink: :year/:month/:day/:title # 这是原配置permalink: :year/:title/ # 替换为此新配置</code></pre><h4 id="解决方法2"><a href="#解决方法2" class="headerlink" title="解决方法2"></a>解决方法2</h4><p>通过添加文章<code>id</code>来实现</p><p>需要修改2个部分：</p><p>我们可以在博客根目录的配置文件（<code>_config.yml</code>）中这样修改：</p><pre><code>#permalink: :year/:month/:day/:title # 这是原配置permalink: :year/:id/ # 替换为此新配置</code></pre><p>并且在<code>.\scaffolds\post.md</code>中修改为：</p><p>（注意新增了一个<code>id:</code>）</p><pre><code>title: {{ title }}id: date: {{ date }}updated: {{ date }}categories:tags:permalink: ---</code></pre><p>在写文档时需要添加id信息:</p><pre><code>title: 如何让你的Hexo博客网址使用全英文路径id: 123456789-abcddate: 2017-12-30 20:57:46updated: 2017-12-30categories: 后台01 文档管理tags:permalink:---</code></pre><p>不过为了命名规范（同时也是为了方便记忆），我的做法是使用创建日期中的<code>月+日+时+分+秒</code>来定义一个id，比如使用<code>1230-205746</code>作为<code>id</code>。 </p><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://blog.csdn.net/Likianta/article/details/79343427" target="_blank" rel="noopener">CSDN</a></p><h2 id="参考资料-1"><a href="#参考资料-1" class="headerlink" title="参考资料"></a>参考资料</h2><p>待续…</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> theme-matery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Blog</title>
      <link href="/2020/03/23/20200323-140000/"/>
      <url>/2020/03/23/20200323-140000/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp; <code>Hello Blog!</code></p><p>&nbsp;&nbsp;&nbsp;&nbsp; 开启新的学习旅程！</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 这将是我研究生乃至后续时间写作的主要地方！</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 互联网虽大，仍旧需要一个小窝来记录！</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 为了排版，再加一行 !</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hello_Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hello Blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
